<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ExtendedReflection</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1">
            <summary>
            This interface allows to convert concrete values into terms.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.NativeInt(System.IntPtr)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.Int8(System.SByte)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.Int16(System.Int16)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.Int32(System.Int32)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.Int64(System.Int64)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.UnsignedNativeInt(System.UIntPtr)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.UnsignedInt8(System.Byte)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.UnsignedInt16(System.UInt16)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.UnsignedInt32(System.UInt32)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.UnsignedInt64(System.UInt64)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.Bool(System.Boolean)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.Char(System.Char)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.Float32(System.Single)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.Float64(System.Double)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.Object(System.Object)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.ManagedPointer(System.UIntPtr)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.Pointer(System.UIntPtr)">
            <summary>
            Converts a native value into an term.
            </summary>
            <param name="value">concrete value</param>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.Struct(Microsoft.ExtendedReflection.Metadata.TypeEx,`0[])">
            <summary>
            Creates an abstract struct value from the sequence of abstract struct field values.
            </summary>
            <param name="structType"></param>
            <param name="fieldValues"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.SzArrayElements(Microsoft.ExtendedReflection.Metadata.Layout,`0[])">
            <summary>
            Creates an abstract sequence of sz-array elements from a sequence of abstract element values.
            </summary>
            <param name="compoundLayout"></param>
            <param name="elementValues"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermConstructor`1.MdArrayElements(Microsoft.ExtendedReflection.Metadata.Layout,System.Array)">
            <summary>
            Creates an abstract matrix of md-array elements from a sequence of abstract element values.
            </summary>
            <param name="compoundLayout"></param>
            <param name="elementValues"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastAccess`2">
            <summary>
            This class provides access to fast readers and writers by instantiating this class.
            </summary>
            <typeparam name="T">type for which to obtain fast readers and writers</typeparam>
            <typeparam name="Term"></typeparam>
        </member>
        <member name="F:Microsoft.ExtendedReflection.DataAccess.FastAccess`2.ReadersAndWriters">
            <summary>
            Fast readers and writers to various types built over this element type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.DataAccess.FastAccess`2.Read">
            <summary>
            Fast converter from values of this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.DataAccess.FastAccess`2.Write">
            <summary>
            Fast converter to values of this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.DataAccess.FastAccess`2.Box">
            <summary>
            Fast converter to values of this type.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastAccess`1">
            <summary>
            This class provides access to fast readers and writers and method invokers.
            </summary>
            <typeparam name="Term"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.FastAccess`1.OfType(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            A fast accessor for values of this type.
            </summary>
            <remarks>
            Using this accessor avoids the overhead of using reflection.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.FastAccess`1.OfField(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            A fast accessor to read values from and store values to this field.
            </summary>
            <remarks>
            Using this accessor avoids the overhead of using reflection.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.FastAccess`1.OfMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            A fast accessor to invoke a method.
            </summary>
            <remarks>
            Using this accessor avoids the overhead of using reflection.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.FastAccess`1.GetReaderMethod(System.Type)">
            <summary>
            Retrieves method that can be used to build fast readers.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1">
            <summary>
            This class provides delegates which allow fast read/write access to native data.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadEnumerable(System.Type)">
            <summary>
            Provides a delegate to read the values of an enumeration of a given type.
            </summary>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.Invoker">
            <summary>
            A delegate to invoke a method.
            </summary>
            <param name="constructor"></param>
            <param name="destructor"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.Reader">
            <summary>
            A delegate to read a value of a field of an object.
            </summary>
            <param name="constructor"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.Writer">
            <summary>
            A delegate to write to a field of an object.
            </summary>
            <param name="destructor"></param>
            <param name="instance"></param>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.SzArrayElementReader">
            <summary>
            A delegate to read from an element of an sz-array.
            </summary>
            <param name="constructor"></param>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.SzArrayElementWriter">
            <summary>
            A delegate to write to an element of an sz-array.
            </summary>
            <param name="destructor"></param>
            <param name="array"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.RawMemoryWriter">
            <summary>
            A delegate to write to raw memory
            </summary>
            <param name="destructor"></param>
            <param name="address"></param>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.MdArrayElementReader">
            <summary>
            A delegate to read from an element of an md-array.
            </summary>
            <param name="constructor"></param>
            <param name="array"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.MdArrayElementWriter">
            <summary>
            A delegate to write to an element of an md-array.
            </summary>
            <param name="destructor"></param>
            <param name="array"></param>
            <param name="indices"></param>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.FieldReadersAndWriters">
            <summary>
            A class which provides read and write access to a field.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.FieldReadersAndWriters.Read">
            <summary>
            A reader of this field.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.FieldReadersAndWriters.Write">
            <summary>
            A writer of this field.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.Reader`1">
            <summary>
            A delegate to convert from a native value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="constructor"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.Writer`1">
            <summary>
            A delegate to convert to a native value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="destructor"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.IndirectReader">
            <summary>
            A delegate to read a value from an address.
            </summary>
            <param name="constructor"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.DefaultValueBoxer">
            <summary>
            A delegate to create a box of a value type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters">
            <summary>
            A class which provides read and write access to various types built from an element type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters.GetMdArrayElementReader(System.Int32)">
            <summary>
            Retrieves a reader of an element of an md-array of a given rank.
            </summary>
            <param name="rank"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters.GetMdArrayElementWriter(System.Int32)">
            <summary>
            Retrieves a writer of an element of an md-array of a given rank.
            </summary>
            <param name="rank"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters.GetMdArrayElementsReader(System.Int32)">
            <summary>
            Retrieves a reader of all elements of an md-array of a given rank.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters.GetMdArrayElementsWriter(System.Int32)">
            <summary>
            Retrieves a writer of all elements of an md-array of a given rank.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters.ReadSzArrayElement">
            <summary>
            A reader of sz-array elements.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters.WriteSzArrayElement">
            <summary>
            A writer of sz-array elements.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters.WriteRawMemory">
            <summary>
            A writer of raw memory.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters.ReadBoxedValue">
            <summary>
            A reader of boxed values.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters.WriteBoxedValue">
            <summary>
            A writer of boxed values.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters.ReadIndirect">
            <summary>
            A reader of values accessible through an address.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters.ReadSzArrayElements">
            <summary>
            A reader of all elements of an sz-array.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters.WriteSzArrayElements">
            <summary>
            A writer of all elements of an sz-array.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters.BoxDefaultValue">
            <summary>
            A creator of boxes of this (value) type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.ReadersAndWriters.Box">
            <summary>
            A writer that boxes if necessary.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.FastDelegates`1.EnumeratingReader">
            <summary>
            A delegate that lifts an enumeration of concrete values to terms.
            </summary>
            <param name="constructor"></param>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.AddressKind">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.DataAccess.AddressKind.Invalid">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.DataAccess.AddressKind.ByRefHolderField">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.DataAccess.AddressKind.SzArrayElement">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.AddressInfo`1">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.DataAccess.AddressInfo`1.Kind">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.DataAccess.AddressInfo`1.Object">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.DataAccess.AddressInfo`1.Index">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1">
            <summary>
            This interface allows to convert terms to concrete values.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.NativeInt(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.Int8(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.Int16(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.Int32(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.Int64(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.UnsignedNativeInt(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.UnsignedInt8(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.UnsignedInt16(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.UnsignedInt32(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.UnsignedInt64(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.Bool(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.Char(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.Float32(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.Float64(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.ManagedPointer(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.Pointer(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.Object(`0)">
            <summary>
            Converts a term into an native value.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">if the term cannot be converted to the requested type</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.TryObject(`0,System.Object@)">
            <summary>
            Same as <see cref="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.Object(`0)"/>, but instead of throwing an exception, it turns the exception object on error.
            </summary>
            <param name="value"></param>
            <param name="object"></param>
            <returns></returns>
            <remarks>
            The method only exist to avoid the performance penalty of throwing exceptions in <see cref="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.Object(`0)"/>,
            which is rather common scenario if the requested object hasn't been created yet.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.Struct(`0)">
            <summary>
            Turns an abstract struct value into the sequence of abstract struct field values
            </summary>
            <param name="structCompound"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.SzArrayElements(`0)">
            <summary>
            Turns an abstract sequence of array elements into the sequence of abstract array elements.
            </summary>
            <param name="uniformCompound"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.MdArrayElements(`0)">
            <summary>
            Turns an abstract matrix of array elements into a matrix of abstract array elements.
            </summary>
            <param name="uniformCompound"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.ITermDestructor`1.Address(`0,Microsoft.ExtendedReflection.DataAccess.AddressInfo{`0}@)">
            <summary>
            Decomposes an address.
            </summary>
            <param name="address"></param>
            <param name="info"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.TermConversionException">
            <summary>
            This exception is the base class of 
            <see cref="T:Microsoft.ExtendedReflection.DataAccess.TermConstructionException"/>
            and
            <see cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.TermConversionException.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.TermConversionException.#ctor(System.String)">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.TermConversionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.TermConversionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Fills in an instance of this class.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.TermConstructionException">
            <summary>
            This exception is thrown when a native value cannot be converted into an term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.TermConstructionException.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.TermConstructionException.#ctor(System.String)">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.TermConstructionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.TermConstructionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Fills in an instance of this class.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException">
            <summary>
            This exception is thrown when a term cannot be converted into a native value.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.TermDestructionException.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.TermDestructionException.#ctor(System.String)">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.TermDestructionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.TermDestructionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Fills in an instance of this class.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.DataAccess.TermDestructionException.Instance">
            <summary>
            Gets an instance of the <see cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.Methods`1">
            <summary>
            Internal class which generates methods with System.Reflection.Emit
            </summary>
            <typeparam name="Term"></typeparam>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.TermConversionErrorMode">
            <summary>
            Error handling modes for cases when terms cannot be converted to native values, or vice versa.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.TermConversionErrorMode.Throw">
            <summary>
            Whether an 
            <see cref="T:Microsoft.ExtendedReflection.DataAccess.TermConstructionException"/> 
            or 
            <see cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException"/> 
            exception should be thrown 
            when an error occurs.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.TermConversionErrorMode.Default">
            <summary>
            Whether just the default value should be returned
            when an error occurs.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.TermConversionErrorMode.FailAndDefault">
            <summary>
            Whether <see cref="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Fail(System.String)"/> should be called
            and then the default value should be returned
            when an error occurs.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.TermManager">
            <summary>
            Abstract class to build and deconstruct terms
            that are relevant to represent values that exist in the CLR.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.TermManagerBase">
            <summary>
            Abstract class to build and deconstruct terms
            that are relevant to represent values that exist in the CLR.
            </summary>
            <remarks>
            Also see <see cref="T:Microsoft.ExtendedReflection.Interpretation.TermManager"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.ComponentBase">
            <summary>
            A base class for components
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.SafeMarshalByRefObject">
            <summary>
            A <see cref="T:System.MarshalByRefObject"/> with an infinite lifetime.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.SafeMarshalByRefObject.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"></see> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"></see> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/></PermissionSet>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IComponent">
            <summary>
            A component
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IComponent.GetService``1">
            <summary>
            Gets a service of type T
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IComponent.TryGetService``1(``0@)">
            <summary>
            Tries to get a service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponent.Setup">
            <summary>
            Retrieves an interface through which this component is setup.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponent.Site">
            <summary>
            Gets or sets the size associated with this component.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.ComponentModel.IComponent.Disposed">
            <summary>
            Represents the method that handles the Disposed event of a component.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponent.Log">
            <summary>
            The event log.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponent.Services">
            <summary>
            Gets the services.
            </summary>
            <value>The services.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IComponentSetup">
            <summary>
            A helper interface for component setup
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IComponentSetup.TryGetServiceProvidedByThisComponent(System.Type,Microsoft.ExtendedReflection.ComponentModel.IService@)">
            <summary>
            Tries to query an object that implements a given service type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="service">The service.</param>
            <returns></returns>
            <remarks>
            The argument serviceType is a reflection argument to enable cross-appdomain and other remoting scenarios.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IComponentSetup.Initialize">
            <summary>
            Initializes this instance. Might be called multiple times, just to make sure.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ComponentBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.ComponentBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ComponentBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ComponentBase.GetService``1">
            <summary>
            Gets a required service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ComponentBase.GetService(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets a required service.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ComponentBase.TryGetService``1(``0@)">
            <summary>
            Tries to get an optional service.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ComponentBase.TryGetService(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.ComponentModel.IService@)">
            <summary>
            Tries to get an optional service.
            </summary>
            <param name="type">The type.</param>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ComponentBase.TryGetServiceProvidedByThisComponent(System.Type,Microsoft.ExtendedReflection.ComponentModel.IService@)">
            <summary>
            Tries to query the service provided by this component.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ComponentBase.Initialize">
            <summary>
            Initializes this instance. Will be called exactly once.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentBase.IsInitialized">
            <summary>
            Gets a value indicating whether this instance is initialized.
            </summary>
            <value>
            	<c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Microsoft.ExtendedReflection.ComponentModel.ComponentBase.Disposed">
            <summary>
            Disposed event handler
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentBase.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"></see> associated with the <see cref="T:System.ComponentModel.IComponent"></see>.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.ComponentModel.ISite"></see> object associated with the component; or null, if the component does not have a site.</returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentBase.Log">
            <summary>
            Gets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentBase.Services">
            <summary>
            Gets the services.
            </summary>
            <value>The services.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsValid(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the given term is valid (in particular, not garbage collected).
            May not be reliable in non-DEBUG builds.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.GetTermFromUniqueIndex(System.Int32)">
            <summary>
            Obtains a term from its unique index.
            </summary>
            <param name="uniqueIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.VisitTerm``2(Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor{``0,``1},``1,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visits the term.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="parameter">The parameter.</param>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TermMap(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Createsa term map with one entry.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TermMap(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}})">
            <summary>
            Createsa term map with a set of assignments.
            </summary>
            <param name="assignments"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.AreDifferent(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether two terms are guaranteed to denote two different values in all models.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.Default(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Retrieves the default value for a given layout, i.e. the value which corresponds to a bit-pattern of all zeros.
            </summary>
            <param name="layout"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.PointerToNowhere(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            The constant managed pointer value that represents 'null'.
            </summary>
            <param name="elementLayout">layout of pointed to value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.PointerToValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            A managed pointer value to an immutable value.
            </summary>
            <param name="value">immutable value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.PointerToBoundedIUniform(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            A managed pointer value to an indexed uniform compound with a maximum valid length
            </summary>
            <param name="compound">compound</param>
            <param name="length">length</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.Type(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            The constant abstract type value that represents a type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.ArrayElementType(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents the element type
            of the given array type.
            </summary>
            <param name="arrayType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.BoxValueType(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents the value type
            of the given box type.
            </summary>
            <param name="boxType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.ObjectProperty(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ObjectProperty)">
            <summary>
            Returns the term that represents the given object property
            for the given object reference.
            </summary>
            <param name="reference"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.MdIndex(Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Buildsa term representing an <see cref="T:Microsoft.ExtendedReflection.Metadata.Layout.MdIndex"/>.
            </summary>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsAssignable(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents
            whether a value of the source type is assignable to a location
            whose formal type is the target type.
            The result <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>.
            </summary>
            <param name="sourceType"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IfThenElse(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents
            a case distinction; it evaluates to the <paramref name="then"/> value
            when the condition is true, and to <paramref name="else"/> otherwise.
            </summary>
            <param name="condition">condition of <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/></param>
            <param name="then">value with same layout as <paramref name="else"/></param>
            <param name="else">value with same layout as <paramref name="then"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.String(System.String)">
            <summary>
            Returns a term that represents the given string value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.PrimitiveImmutable(System.Object)">
            <summary>
            Returns a term that represents the given concrete value,
            whose type <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsPrimitiveImmutable"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.PointerToArgument(System.Int32,System.Int32,System.Int32,Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Returns a term that represents
            a pointer to an argument.
            </summary>
            <param name="thread"></param>
            <param name="frame"></param>
            <param name="argumentIndex"></param>
            <param name="layout">layout of value that the pointer points to</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.PointerToLocal(System.Int32,System.Int32,System.Int32,Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Returns a term that represents
            a pointer to a local variable.
            </summary>
            <param name="thread"></param>
            <param name="frame"></param>
            <param name="localIndex"></param>
            <param name="layout">layout of value that the pointer points to</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.PointerToStackTop(System.Int32,System.Int32,Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Returns a term that represents
            a pointer to the topmost value on the evaluation stack of a particular stack frame.
            </summary>
            <param name="thread"></param>
            <param name="frame"></param>
            <param name="layout">layout of value that the pointer points to</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.Method(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            The constant abstract method value that represents the given method.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.VTableMethod(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Returns a term that represents the method
            that the vtable of the given object reference's type contains
            for the given method.
            </summary>
            <param name="reference"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.Ac1(Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Builds an associative, commutative operation with unit.
            </summary>
            <param name="operator">The operator.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.Binary(Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Buildsa term that represents a binary operation
            over two arguments.
            </summary>
            <param name="operator"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.Unary(Microsoft.ExtendedReflection.Metadata.UnaryOperator,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Buildsa term that represents the unary operation
            over an argument.
            </summary>
            <param name="operator"></param>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.PointerToInstanceFieldMap(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Returns a term that represents
            a pointer to a reference types' instance field's field map.
            </summary>
            <param name="field">instance field</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.PointerToStaticField(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Returns a term that represents
            a pointer to a static field.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.StructField(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            The constant term that represents a struct's instance field.
            </summary>
            <remarks>
            Intuitively, the returned value can be thought of as the offset
            of the struct field in the struct value.
            </remarks>
            <param name="field">instance field of struct</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.Symbol(Microsoft.ExtendedReflection.Interpretation.ISymbolId)">
            <summary>
            The symbol with the given identity.
            </summary>
            <remarks>
            There is only one symbol for each identity.
            </remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.Undef(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            The constant abstract object reference value that represents 
            an undefined value.
            </summary>
            <param name="layout"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.PointerToElement(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents
            a pointer to an element of a compound value.
            </summary>
            <param name="baseAddress">base address of compound value</param>
            <param name="index">index into compound value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.Fill(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Creates a uniform compound whose values are equal to <paramref name="elementValue"/>
            </summary>
            <param name="indexLayout"></param>
            <param name="elementValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.Select(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Selects an element of a compound value.
            </summary>
            <param name="compound"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.Fuse(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            forall a,b,i,j. fuse(a,i,b)[j] = ite(clt_un(i,j), a[i], b[i])
            </summary>
            <param name="leftCompound">The left compound.</param>
            <param name="offset">The offset.</param>
            <param name="rightCompound">The right compound.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.Move(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Return a term
            that moves all indices of a map by an offset.
            </summary>
            <param name="compound">The compound.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.Update(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermMap)">
            <summary>
            Returns a term that represents
            a compound value that results from updating an existing compound.
            </summary>
            <param name="baseCompound">existing compound</param>
            <param name="updates">set of updates</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I1(System.Byte)">
            <summary>
            Returns constant term that represents an integer value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I2(System.Int16)">
            <summary>
            Returns constant term that represents an integer value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I2"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I4(System.Int32)">
            <summary>
            Returns constant term that represents an integer value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I8(System.Int64)">
            <summary>
            Returns constant term that represents an integer value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.R4(System.Single)">
            <summary>
            Returns constant term that represents a floating-point value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R4"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.R8(System.Double)">
            <summary>
            Returns constant term that represents a floating-point value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.Object(Microsoft.ExtendedReflection.Interpretation.IObjectId,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection)">
            <summary>
            Returns the constant abstract object reference value that represents 
            the object with the given identifier and properties.
            </summary>
            <param name="id"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.FunctionApplication(Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Returns a term that represents the invocation
            of a method with arguments at a particular time.
            </summary>
            <param name="function"></param>
            <param name="time"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsSymbol(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Whethera term represents a symbol.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsObject(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks if the given term is constant and has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.Ref"/>.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsUndef(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks ifa term represents an undefined value.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsDefaultStruct(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks ifa term is a default struct.
            </summary>
            <param name="term">supposed default struct</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsPointerToInstanceFieldMap(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks if an abstract represents represents
            an object field map pointer.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsPointerToNowhere(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks if an abstract represents represents
            the pointer to nowhere.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsUpdate(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks ifa term represents
            the update of a compound value.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsSelect(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Whethera term represents a select.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsObjectProperty(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Whethera term represents an object property.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetI1Constant(Microsoft.ExtendedReflection.Interpretation.Term,System.Byte@)">
            <summary>
            Tries to retrieve the integer value represented by an term.
            </summary>
            <param name="term">supposed integer value</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetI2Constant(Microsoft.ExtendedReflection.Interpretation.Term,System.Int16@)">
            <summary>
            Tries to retrieve the integer value represented by an term.
            </summary>
            <param name="term">supposed integer value</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetI4Constant(Microsoft.ExtendedReflection.Interpretation.Term,System.Int32@)">
            <summary>
            Tries to retrieve the integer value represented by an term.
            </summary>
            <param name="term">supposed integer value</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetI8Constant(Microsoft.ExtendedReflection.Interpretation.Term,System.Int64@)">
            <summary>
            Tries to retrieve the integer value represented by an term.
            </summary>
            <param name="term">supposed integer value</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetR4Constant(Microsoft.ExtendedReflection.Interpretation.Term,System.Single@)">
            <summary>
            Tries to retrieve the floating point value represented by an term.
            </summary>
            <param name="term">supposed floating-point value</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetR8Constant(Microsoft.ExtendedReflection.Interpretation.Term,System.Double@)">
            <summary>
            Tries to retrieve the floating point value represented by an term.
            </summary>
            <param name="term">supposed floating-point value</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetObject(Microsoft.ExtendedReflection.Interpretation.Term,System.Object@)">
            <summary>
            Tries to obtain 'null', a string, or a primitive value.
            </summary>
            <param name="term">supposed object reference</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetObjectId(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IObjectId@)">
            <summary>
            Tries to obtain the id of an object reference.
            </summary>
            <param name="term">supposed object reference</param>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetObjectPropertyValue(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ObjectProperty,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain a property value that define an object reference.
            </summary>
            <param name="term">supposed object reference</param>
            <param name="property"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetObjectPropertyCollection(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection@)">
            <summary>
            Tries to query the object property collection that define an object reference.
            </summary>
            <param name="term">The term.</param>
            <param name="propertyCollection">The property collection.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetType(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx@)">
            <summary>
            Tries to obtain the concrete type thata term represents.
            </summary>
            <param name="term">supposed type value</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetMethod(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to obtain the concrete method thata term represents.
            </summary>
            <param name="term">supposed method value</param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetUnary(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.UnaryOperator@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of a unary operation
            thata term represents.
            </summary>
            <param name="term">supposed unary operation</param>
            <param name="operator"></param>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetLogicalOr(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to obtain the constituents of a logical disjunction.
            </summary>
            <param name="term">supposed disjunction</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetLogicalAnd(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to obtain the constituents of a logical conjunction.
            </summary>
            <param name="term">supposed conjunction</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetBinary(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.BinaryOperator@,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of a binary operation
            thata term represents.
            </summary>
            <param name="term">supposed binary operation</param>
            <param name="operator"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetAc1(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermAc1Set@)">
            <summary>
            Tries to obtain the constituents of an associative, commutative operation with unit
            thata term represents.
            </summary>
            <param name="term">supposed binary operation</param>
            <param name="operandSet">The operand set.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetAc1Aggressive(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermAc1Set@)">
            <summary>
            Tries to obtain the constituents of an associative, commutative operation with unit
            thata term represents.
            Also considers If-Then-Else terms that represent logical expressions.
            </summary>
            <param name="term">supposed associative operation</param>
            <param name="operandSet">The operand set.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetVTableMethod(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to obtain the constituents of a vtable method lookup
            thata term represents.
            </summary>
            <param name="term">supposed vtable method lookup</param>
            <param name="reference"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetObjectProperty(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.ObjectProperty@)">
            <summary>
            Tries to obtain the constituents of the operation
            that retrieves an object property.
            </summary>
            <param name="term">supposed object-property selection</param>
            <param name="reference">object reference</param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetIsAssignable(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of the IsAssignable
            operation thata term represents.
            </summary>
            <param name="term">supposed IsAssignable operation</param>
            <param name="sourceType">source type</param>
            <param name="targetType">target type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetArrayElementType(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of the ArrayElementType
            operation thata term represents.
            </summary>
            <param name="term">supposed ArrayElementType operation</param>
            <param name="arrayType">array type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetBoxValueType(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of the BoxValueType
            operation thata term represents.
            </summary>
            <param name="term">supposed BoxValueType operation</param>
            <param name="boxType">box type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetPointerToValue(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of the operation
            that obtains the pointer of an immutable value.
            </summary>
            <param name="term">supposed pointer to an element</param>
            <param name="value">value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetPointerToBoundedIUniform(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of the operation
            that obtains the pointer of an immutable compound with a maximal length.
            </summary>
            <param name="term">supposed pointer to an element</param>
            <param name="compound">The compound.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetPointerToElement(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of the operation
            that obtains the pointer of an element of a compound value.
            </summary>
            <param name="term">supposed pointer to an element</param>
            <param name="baseAddress">base address of compound value</param>
            <param name="index">index into compound value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetPointerToInstanceFieldMap(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field@)">
            <summary>
            Tries to obtain the instance field 
            of an object field map pointer.
            </summary>
            <param name="term">supposed pointer to object field map</param>
            <param name="field">instance field of reference type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetFuse(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of the operation
            that updates a compound value with a range of another compound value.
            </summary>
            <param name="term">The term.</param>
            <param name="leftCompound">The left compound.</param>
            <param name="offset">The offset.</param>
            <param name="rightCompound">The right compound.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetMove(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of the operation
            that moves all indices of a map by an offset.
            </summary>
            <param name="term">The term.</param>
            <param name="compound">The compound.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetUpdate(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.ITermMap@)">
            <summary>
            Tries to obtain the constituents of an operation
            that represents the update of a compound value.
            </summary>
            <param name="term"></param>
            <param name="baseCompound"></param>
            <param name="updates"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetInnerLogicallyNegatedValue(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the term that
            resulted from a logical negation. 
            Note that the <paramref name="innerNegatedValue"/> may have any layout.
            </summary>
            <param name="term">negation</param>
            <param name="innerNegatedValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetInnerNegatedValue(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the term that
            resulted from a negation. 
            Note that the <paramref name="innerNegatedValue"/> may have any layout.
            </summary>
            <param name="term">negation</param>
            <param name="innerNegatedValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetEquality(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of an abstract
            value that represents an equality.
            </summary>
            <param name="term">supposed equality</param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetStructField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field@)">
             <summary>
             Tries to retrieve the struct field that
            a term represents
             </summary>
             <param name="term">supposed struct field</param>
             <param name="field">instance field of struct</param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetFill(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents ofa term that represents a fill.
            </summary>
            <param name="term">supposed select</param>
            <param name="indexLayout"></param>
            <param name="elementValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetSelect(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents ofa term that represents a select.
            </summary>
            <param name="term">supposed select</param>
            <param name="compound"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetMdIndex(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[]@)">
            <summary>
            Tries to obtain the constituents ofa term that represents an index into a multidimensional array.
            </summary>
            <param name="term">supposed indices</param>
            <param name="indices">The indices.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetFunctionApplication(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IFunction@,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term[]@)">
            <summary>
            Tries to obtain the constituents ofa term that represents a function application.
            </summary>
            <param name="term">supposed select</param>
            <param name="function"></param>
            <param name="time"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetSymbol(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ISymbolId@)">
            <summary>
            Tries to obtain the constituents ofa term that represents a symbol.
            </summary>
            <param name="term"></param>
            <param name="symbolId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetIfThenElse(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents ofa term that represents an if-then-else expression.
            </summary>
            <param name="term"></param>
            <param name="condition"></param>
            <param name="then"></param>
            <param name="else"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Whethera term represents a constant value (which may be undef).
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsDefaultValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks ifa term represents the default value.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsNotDefaultValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks ifa term is distinct from the default value.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsNegativeValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks ifa term represents a negative value.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsNotNegativeValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks ifa term represents a non-negative value.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.GetStaticType(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            If the given value has <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Ref"/>, the best known type is returned; otherwise <code>null</code>.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.TryGetBaseLayout(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout@)">
            <summary>
            Tries to retrieve the layout of the compound 
            into which the provided pointer points.
            </summary>
            <remarks>
            This function returns false when <paramref name=">pointerToElement"/>
            is not a pointer into a compound, or the layout of the compound is not known
            since the base address is a native integer.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.GetLayout(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Retrieve the layout of an term.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.GetObjectCreationTime(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Retrieves the object creat time of an term.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks whether the given term has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>
            and evaluates to either zero or one.
            </summary>
            <remarks>
            The concept of proper stack booleans reflects that
            in .Net, all boolean decisions and operations are performed on arbitrary 32-bit
            values where zero represents false, and everything else represents true.
            Only of a value <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>, it is guaranteed to
            be zero or one.
            </remarks>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.EmptyTermMap">
            <summary>
            The empty term map.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IService">
            <summary>
            All services must derive from this interface.
            </summary>
            <remarks>
            Instances of services should not be passed around, but always queried through the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.IServiceProvider"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.#ctor(System.Converter{Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer})">
            <summary>
            Constructor.
            </summary>
            <param name="customReducerFactory">The optional custom reducer factory.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetSubstitution(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}})">
            <summary>
            Creates a substitution.
            </summary>
            <param name="substitution">The substitution.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetSubstitution(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}[])">
            <summary>
            Creates a substitution.
            </summary>
            <param name="substitution">The substitution.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetConstructor(Microsoft.ExtendedReflection.Interpretation.TermConversionErrorMode)">
            <summary>
            A constructor of basic values.
            When the constructor encounters a value it cannot convert, 
            it either throws a 
            <see cref="T:Microsoft.ExtendedReflection.DataAccess.TermConstructionException"/>,
            or it fails and substitutes it with the default value, 
            or it just substitutes it with the default value,
            depending on the error mode.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetDestructor(Microsoft.ExtendedReflection.Interpretation.TermConversionErrorMode)">
            <summary>
            A destructor of basic values.
            When the destructor encounters a value it cannot convert, 
            it either throws a 
            <see cref="T:Microsoft.ExtendedReflection.DataAccess.TermDestructionException"/>,
            or it fails and substitutes it with the default value, 
            or it just substitutes it with the default value,
            depending on the error mode.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.CreateTermManager">
            <summary>
            Creates a new term manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.CreateTermManager(System.Converter{Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer})">
            <summary>
            Creates a new term manager with a custom reducer.
            </summary>
            <param name="customReducerFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Decimal(System.Decimal)">
            <summary>
            Returns a term that represents
            the <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Zero(Microsoft.ExtendedReflection.Metadata.LayoutKind)">
            <summary>
            The value zero.
            </summary>
            <param name="kind"><see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I1(System.Byte)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I2(System.Int16)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I4(System.Int32)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I8(System.Int64)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.R4(System.Single)"/> or <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.R8(System.Double)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.One(Microsoft.ExtendedReflection.Metadata.LayoutKind)">
            <summary>
            The value one.
            </summary>
            <param name="kind"><see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I1(System.Byte)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I2(System.Int16)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I4(System.Int32)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I8(System.Int64)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.R4(System.Single)"/> or <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.R8(System.Double)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.MinusOne(Microsoft.ExtendedReflection.Metadata.LayoutKind)">
            <summary>
            The value minus one.
            </summary>
            <param name="kind"><see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I1(System.Byte)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I2(System.Int16)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I4(System.Int32)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I8(System.Int64)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.R4(System.Single)"/> or <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.R8(System.Double)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.MinSigned(Microsoft.ExtendedReflection.Metadata.LayoutKind)">
            <summary>
            The biggest signed number.
            </summary>
            <param name="kind"><see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I1(System.Byte)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I2(System.Int16)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I4(System.Int32)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I8(System.Int64)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.R4(System.Single)"/> or <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.R8(System.Double)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.MaxSigned(Microsoft.ExtendedReflection.Metadata.LayoutKind)">
            <summary>
            The biggest signed number.
            </summary>
            <param name="kind"><see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I1(System.Byte)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I2(System.Int16)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I4(System.Int32)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.I8(System.Int64)"/>, <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.R4(System.Single)"/> or <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.R8(System.Double)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetAc1LogicalUnit(Microsoft.ExtendedReflection.Metadata.BinaryOperator)">
            <summary>
            Gets the ac1 unit in a logical context.
            </summary>
            <param name="operator">The operator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Ac1WithoutOffset(Microsoft.ExtendedReflection.Interpretation.ITermAc1Set)">
            <summary>
            Gets value that represents the associative, commutative operation with unit, however without the offset.
            </summary>
            <param name="ac1Set">The ac1 set.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetAc1Unit(Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Metadata.LayoutKind)">
            <summary>
            Gets the ac1 unit.
            </summary>
            <param name="operator">The operator.</param>
            <param name="layoutKind">Kind of the layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.AreEqualWithoutOffsets(Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Whether two values are equal, not taking into account their offsets.
            </summary>
            <param name="operator">The @operator.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
            <remarks>
            This method may return <code>false</code> even if the are actually equal.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetBaseAndOffset(Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Gets the base and the offset.
            </summary>
            <param name="operator">The operator.</param>
            <param name="value">The value.</param>
            <param name="base">The base.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.LogicalAc1(Microsoft.ExtendedReflection.Metadata.BinaryOperator,System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Interpretation.Term})">
            <summary>
            Builds an associative, commutative operation with unit
            where all operands and the result are proper stack booleans.
            </summary>
            <param name="operator">The @operator.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Ac1(Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Metadata.LayoutKind,System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Interpretation.Term})">
            <summary>
            Builds an associative, commutative operation with unit.
            </summary>
            <param name="operator">The operator.</param>
            <param name="layoutKind">Kind of the layout.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.AreProperStackBooleans(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Interpretation.Term})">
            <summary>
            Tests whether all elements of given enumeration are IsProperStackBoolean.
            </summary>
            <param name="terms">The terms.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.MakeProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            This method turns any <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> value into a value that <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetBytesConverter(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IBytesConverter@)">
            <summary>
            Turns a value into a byte map.
            </summary>
            <param name="layout">The layout.</param>
            <param name="bytesOffset">The bytes offset.</param>
            <param name="bytesConverter">The bytes converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.LogicalNot(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Logical 'not', where the argument has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, and
            the result <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.LogicalOr(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Logical 'or', where the arguments has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, and
            the result <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.LogicalAnd(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Logical 'and', where the arguments has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, and
            the result <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.LogicalIff(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Logical 'iff', where the arguments has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, and
            the result <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Clt(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Compare if less than. 
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            the result <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Cgt(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Compare if greater than. 
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            the result <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Cge(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Compare if greater or equal than. 
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            the result <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Or(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Bitwise ors two values.
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/>.
            Do you want to use <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManager.LogicalOr(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)"/>?
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.And(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Bitwise ands two values.
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/>.
            Do you want to use <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManager.LogicalAnd(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)"/>?
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Xor(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Bitwise xors two values.
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/>.
            Do you want to use <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManager.LogicalNot(Microsoft.ExtendedReflection.Interpretation.Term)"/> and <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManager.LogicalIff(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)"/>?
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Add(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Add two values.
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Sub(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Subtract one value from anoter.
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Mul(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Multiplies two values.
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.SizeOf(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Multiplies two values.
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            </summary>
            <param name="layout">The layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Div(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Divide one value by another.
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Div_Un(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Divide one value by another, unsigned.
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Rem(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Computes the remainder.
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Rem_Un(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Computes the remainder, unsigned.
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Exp(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Computes the exponent.
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            </summary>
            <param name="base">The base.</param>
            <param name="exponent">The exponent.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Clt_Un(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Compare if less than, unsigned.
            The arguments must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            the result <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Shl(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Shifts a value to the left by a given number of bits.
            </summary>
            <param name="value">The value.</param>
            <param name="bits">The bits.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Shr(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Shifts a value to the right by a given number of bits,
            duplicating the highermost bit.
            </summary>
            <param name="value">The value.</param>
            <param name="bits">The bits.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Shr_Un(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Shifts a value to the right by a given number of bits,
            filling in the new bits with zero.
            </summary>
            <param name="value">The value.</param>
            <param name="bits">The bits.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Neg(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Negate. (unary minus)
            The argument must be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            The result will have the same layout.
            </summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Conv_I4(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Converts the signed argument to <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>.
            </summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Conv_U4(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Converts the unsigned argument to <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>.
            </summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Trunc_I1(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Truncates the argument to <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I1"/>.
            </summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Trunc_I2(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Truncates the argument to <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I2"/>.
            </summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Trunc_I4(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Truncates the argument to <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>.
            </summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Trunc_R4(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Truncates the argument to <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R4"/>.
            </summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.ObjectType(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns the term that represents the object type
            of the given object reference.
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.SzArrayLength(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns the term that represents the length
            of the sz-array whose object reference is given.
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.StringLength(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns the term that represents the length
            of the string whose object reference is given.
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.StringChars(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns the term that represents the character map
            of the string whose object reference is given.
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.MdArrayLength(Microsoft.ExtendedReflection.Interpretation.Term,System.Int32)">
            <summary>
            Returns the term that represents the length
            of the md-array, at a particular dimension, 
            where the md-array's object reference is given.
            </summary>
            <param name="reference"></param>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.MdArrayLowerBound(Microsoft.ExtendedReflection.Interpretation.Term,System.Int32)">
            <summary>
            Returns the term that represents the lower bound
            of the md-array, at a particular dimension, 
            where the md-array's object reference is given.
            </summary>
            <param name="reference"></param>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetObjectType(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx@)">
            <summary>
            Tries to obtain the precise type of an object reference.
            </summary>
            <param name="term">supposed object reference</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetSzArrayLength(Microsoft.ExtendedReflection.Interpretation.Term,System.IntPtr@)">
            <summary>
            Tries to obtain the precise length of an sz array reference.
            </summary>
            <param name="term">supposed sz array reference</param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetStringLength(Microsoft.ExtendedReflection.Interpretation.Term,System.Int32@)">
            <summary>
            Tries to obtain the precise length of an sz array reference.
            </summary>
            <param name="term">supposed sz array reference</param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.I4s(System.Int32[])">
            <summary>
            Builds a list of <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> values.
            </summary>
            <remarks>
            A common use of this function is to build indices of md-arrays.
            </remarks>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.MdIndex(System.Int32[])">
            <summary>
            Builds a term representing an <see cref="T:Microsoft.ExtendedReflection.Metadata.Layout.MdIndex"/>.
            </summary>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.CastOrNull(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Returns a term that corresponds to the given reference,
            if the reference is assignable to a location whose formal type is the target type,
            and 'null' otherwise.
            </summary>
            <param name="reference"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryMakeImmutableObject(System.Object,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to turn a term that represents
            a value into an term.
            </summary>
            <remarks>
            'null', a string, or a value whose type <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsPrimitiveImmutable"/>
            can be turned into terms.
            </remarks>
            <param name="value"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.PointerToInstanceField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Returns a term that represents
            a pointer to an object's instance field.
            </summary>
            <param name="reference">object reference</param>
            <param name="field">instance field of object</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.PointerToStructField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Returns a term that represents
            a pointer to a struct value's field.
            </summary>
            <param name="address">address of struct value</param>
            <param name="field">struct's instance field</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.InIRange(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents the check that an index 
            is between zero (inclusive) and the given length (exclusive); the result <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>.
            </summary>
            <param name="index">index with <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/></param>
            <param name="length">length with <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.InIRange(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents the check that an index 
            is between the given start (inclusive) and the given start plus the given length (exclusive); the result <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>.
            </summary>
            <param name="start">start with <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/></param>
            <param name="index">index with <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/></param>
            <param name="length">length with <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.UniqueSymbol(System.String,Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Builds a fresh symbol.
            </summary>
            <param name="description"></param>
            <param name="layout"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.UniqueSymbol(System.String,Microsoft.ExtendedReflection.Metadata.Parameter)">
            <summary>
            Builds a fresh symbol representing a parameter value.
            </summary>
            <param name="description"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.PointerToBoxValueField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Returns a term that represents
            a pointer to the value field of a box type.
            </summary>
            <param name="boxReference">object reference</param>
            <param name="type">value type that <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasBoxType"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.PointerToByRefHolderValueField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Returns a term that represents
            a pointer to the value field of a by-ref-holder type.
            </summary>
            <param name="byRefHolderReference">object reference</param>
            <param name="type">value type that <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasByRefHolderType"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.PointerToSzArrayElement(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents
            a pointer to an element of an sz-array.
            </summary>
            <param name="elementLayout"></param>
            <param name="array">object reference</param>
            <param name="index">index with <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.PointerToMdArrayElement(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Returns a term that represents
            a pointer to an element of an md-array.
            </summary>
            <param name="elementLayout"></param>
            <param name="array">object reference</param>
            <param name="indices">indices with <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.SelectStructField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Selects a field of a struct value.
            </summary>
            <param name="structValue"></param>
            <param name="structField">instance field of struct</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.SelectFixedArrayElement(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Selects an element of a fixed array.
            </summary>
            <param name="fixedArrayValue">The fixed array value.</param>
            <param name="elementIndex">Index of the element (not offset).</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.FixedArrayElementOffset(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Computes the offset of an element in a fixed-size array.
            </summary>
            <param name="fixedArrayLayout">The fixed array layout.</param>
            <param name="elementIndex">Index of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.SelectInstanceFieldInInitialState(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Selects an instance field given an object reference; this represents the value of the field in the initial state.
            </summary>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetInitialInstanceFieldMap(Microsoft.ExtendedReflection.Metadata.Field)"/> for more information.
            </remarks>
            <param name="reference"></param>
            <param name="instanceField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.NewStruct(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            The constant struct value that represents the struct whose 
            fields hold default values.
            </summary>
            <param name="structType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Struct(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Builds a struct from the values of its fields.
            </summary>
            <remarks>
            The order of the given field values
            must match the order of <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.DeclaredInstanceFields"/>.
            </remarks>
            <param name="structType"></param>
            <param name="fieldValues"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Nullable(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Returns an abstract nullable value that 
            represents the nullable value that has no value.
            </summary>
            <param name="elementType">type that <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasNullableType"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Nullable(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns an abstract nullable value that 
            represents the nullable value that has a value.
            </summary>
            <param name="elementType">type that <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasNullableType"/></param>
            <param name="elementValue">value stored in nullable value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TypedReference(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns an abstract typed reference.
            </summary>
            <param name="elementType">type that this reference points to</param>
            <param name="pointer">unmanaged pointer type with <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.ManagedPointer"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.RuntimeTypeHandle(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Returns a term that represents
            the <see cref="T:System.RuntimeTypeHandle"/> of the given type definition.
            </summary>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.RuntimeTypeHandle(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Returns a term that represents
            the <see cref="T:System.RuntimeTypeHandle"/> of the given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetRuntimeTypeHandle(Microsoft.ExtendedReflection.Interpretation.Term,System.RuntimeTypeHandle@)">
            <summary>
            Tries to retrieve the runtime type handle represented by an term.
            </summary>
            <param name="term"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.RuntimeMethodHandle(Microsoft.ExtendedReflection.Metadata.GenericMethod)">
            <summary>
            Returns a term that represents
            the <see cref="T:System.RuntimeMethodHandle"/> of the given generic method.
            </summary>
            <param name="genericMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.RuntimeMethodHandle(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Returns a term that represents
            the <see cref="T:System.RuntimeMethodHandle"/> of the given method.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetRuntimeMethodHandle(Microsoft.ExtendedReflection.Interpretation.Term,System.RuntimeMethodHandle@)">
            <summary>
            Tries to retrieve the runtime method handle represented by an term.
            </summary>
            <param name="term"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.RuntimeFieldHandle(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Returns a term that represents
            the <see cref="T:System.RuntimeFieldHandle"/> of the given field.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetRuntimeFieldHandle(Microsoft.ExtendedReflection.Interpretation.Term,System.RuntimeFieldHandle@)">
            <summary>
            Tries to retrieve the runtime field handle represented by an term.
            </summary>
            <param name="term"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Override(Microsoft.ExtendedReflection.Interpretation.ITermMap,Microsoft.ExtendedReflection.Interpretation.ITermMap)">
            <summary>
            Creates a new map that contains the mapping of the first map overriden by the second.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Compound(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.ITermMap)">
            <summary>
            Returns a term that represents
            a compound value given by a set of assignments.
            </summary>
            <param name="layout">layout of compound</param>
            <param name="assignments"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.SzArrayElements(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Returns a term that represents
            a compound value given by a sequence of elements.
            </summary>
            <param name="layout">uniform layout over <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/></param>
            <param name="elements">sequence of elements</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.MdArrayElements(Microsoft.ExtendedReflection.Metadata.Layout,System.Array)">
            <summary>
            Returns a term that represents
            a compound value given by a matrix of elements.
            </summary>
            <param name="layout">uniform layout over <see cref="T:Microsoft.ExtendedReflection.Metadata.Layout.MdIndex"/></param>
            <param name="elements">matrix (multi-dimensonal array) of elements</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Update(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents
            a compound value that results from updating an existing compound.
            </summary>
            <param name="baseCompound">existing compound</param>
            <param name="index">index of update</param>
            <param name="value">new value of update</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.I4(System.Boolean)">
            <summary>
            Returns constant term that represents an boolean value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.I(System.IntPtr)">
            <summary>
            Returns constant term that represents a native integer / unmanaged pointer value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Builtin(Microsoft.ExtendedReflection.Metadata.Layout,System.Byte[])">
            <summary>
            Builds an I1/I2/I4/I8/I/R4/R8 value.
            </summary>
            <param name="layout"></param>
            <param name="bytes">sequence of bytes with length <see cref="P:Microsoft.ExtendedReflection.Metadata.Layout.Size"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Equality(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns term that represents
            whether two terms are equal.
            The result <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsDefault(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents
            whether the given term is equal to the default value.
            The result <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>
            </summary>
            <remarks>
            Intuitively, this expresses the logical not.
            </remarks>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsNaN(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents
            whether the given term of Layout.R4 or Layout.R8 is NaN.
            The result <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManagerBase.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/>
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsNotDefault(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns an <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> term which expresses
            whether the given term is not equal to the default value.
            </summary>
            <remarks>
            Intuitively, this method lifts any term to a logical truth value.
            Use <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManager.MakeProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)"/> if the given value is known to be <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>.
            </remarks>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Widen(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.StackWidening)">
            <summary>
            Widens an term; this happens when loading a value from a memory location onto the evaluation stack.
            </summary>
            <param name="term"></param>
            <param name="widening"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Narrow(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.MemoryNarrowing)">
            <summary>
            Narrows an term; this happens when storing a value into a memory location from the evaluation stack.
            </summary>
            <param name="term"></param>
            <param name="narrowing"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.DumpStatistics(System.IO.TextWriter)">
            <summary>
            Dumps some statistics into a text writer.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetStatistics">
            <summary>
            Gets statistics that could be plotted over time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.AddUser(Microsoft.ExtendedReflection.Interpretation.ITermUser,System.Boolean)">
            <summary>
            Adds a client.
            </summary>
            <param name="user">The user.</param>
            <param name="weak">Whether only the client should be referenced weakly.</param>
            <remarks>
            Every client that stores references to terms must register itself
            before <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManager.CollectDeadTerms(System.Boolean)"/> is called.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.RemoveUser(Microsoft.ExtendedReflection.Interpretation.ITermUser,System.Boolean)">
            <summary>
            Unregisters a client.
            </summary>
            <param name="user">The user.</param>
            <param name="weak">Whether the client was added weakly.</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManager.AddUser(Microsoft.ExtendedReflection.Interpretation.ITermUser,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.CollectDeadTerms(System.Boolean)">
            <summary>
            This method renders all previously produced abstract
            values invalid unless they are held and reported
            by a currently registered <see cref="T:Microsoft.ExtendedReflection.Interpretation.ITermUser"/>.
            </summary>
            <param name="force">Whether to force a collection.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetInitialInstanceFieldMap(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Retrieve initial object field map.
            </summary>
            <param name="instanceField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetInitialMemoryMap(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Retrieve initial memory map.
            </summary>
            <param name="elementLayout">The element layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetInitialTypeOfMap(System.Int32)">
            <summary>
            Retrieve initial typeOf map.
            </summary>
            <param name="typeLevel">The type level.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetGlobalIndexOf(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets the global index symbol for a particular type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetInstanceField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field@)">
            <summary>
            Retrieve the field of a field map that was obtained from <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetInitialInstanceFieldMap(Microsoft.ExtendedReflection.Metadata.Field)"/>.
            </summary>
            <param name="initialInstanceFieldMap"></param>
            <param name="instanceField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetMemoryMap(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout@)">
            <summary>
            Retrieve the element layout of a memory map that was obtained from <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetInitialMemoryMap(Microsoft.ExtendedReflection.Metadata.Layout)"/>.
            </summary>
            <param name="memoryMap">The memory map.</param>
            <param name="elementLayout">The element layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetTypeOfMap(Microsoft.ExtendedReflection.Interpretation.Term,System.Int32@)">
            <summary>
            Retrieve the typeLevel of a typeOf map that was obtained from <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetInitialTypeOfMap(System.Int32)"/>.
            </summary>
            <param name="typedMap">The typed map.</param>
            <param name="typeLevel">The type level.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetStructElementType(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Computes the type of an element of a struct value.
            </summary>
            <param name="structLayout">layout of struct</param>
            <param name="index">index into struct value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetIConstant(Microsoft.ExtendedReflection.Interpretation.Term,System.IntPtr@)">
            <summary>
            Tries to retrieve the integer value represented by an term.
            </summary>
            <param name="term">supposed integer value</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Pack(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Turns a <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/>,
            <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.Method"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.Type"/>, or <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.ManagedPointer"/>
            into <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I"/>.
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryUnpack(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to unpack a <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I"/> which holds
            either a <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.Method"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.Type"/>, or <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.ManagedPointer"/>.
            </summary>
            <param name="term">The term.</param>
            <param name="unpackedLayout">The unpacked layout.</param>
            <param name="unpackedTerm">The unpacked term.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryUnpack(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to unpack a <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I"/>.
            </summary>
            <param name="term">The term.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryUnpack(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx@)">
            <summary>
            Tries to unpack a <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I"/>.
            </summary>
            <param name="term">The term.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetBaseLayout(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Tries to retrieve the layout of the compound 
            into which the provided pointer and index point.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.ClearCaches">
            <summary>
            Clears the caches.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the specified term is value.
            </summary>
            <param name="term">The term.</param>
            <returns>
            	<c>true</c> if the specified term is value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsSymbol(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the specified term is symbol.
            </summary>
            <param name="term">The term.</param>
            <returns>
            	<c>true</c> if the specified term is symbol; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.AreDifferent(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether two terms are guaranteed to denote two different values in all models.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.Less(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            A partial order over terms for a binary operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsMinusOneValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the given value represents minus one.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsOneValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the given value represents one.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetI1Constant(Microsoft.ExtendedReflection.Interpretation.Term,System.Byte@)">
            <summary>
            Tries to query the i1 constant.
            </summary>
            <param name="term">The term.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetI2Constant(Microsoft.ExtendedReflection.Interpretation.Term,System.Int16@)">
            <summary>
            Tries to query the i2 constant.
            </summary>
            <param name="term">The term.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetI4Constant(Microsoft.ExtendedReflection.Interpretation.Term,System.Int32@)">
            <summary>
            Tries to query the i4 constant.
            </summary>
            <param name="term">The term.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetI8Constant(Microsoft.ExtendedReflection.Interpretation.Term,System.Int64@)">
            <summary>
            Tries to query the i8 constant.
            </summary>
            <param name="term">The term.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetR4Constant(Microsoft.ExtendedReflection.Interpretation.Term,System.Single@)">
            <summary>
            Tries to query the r4 constant.
            </summary>
            <param name="term">The term.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetR8Constant(Microsoft.ExtendedReflection.Interpretation.Term,System.Double@)">
            <summary>
            Tries to query the r8 constant.
            </summary>
            <param name="term">The term.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetObjectPropertyValue(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ObjectProperty,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to query the object property value.
            </summary>
            <param name="term">The term.</param>
            <param name="property">The property.</param>
            <param name="propertyValue">The property value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetObjectPropertyCollection(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection@)">
            <summary>
            Tries to query the object property collection.
            </summary>
            <param name="term">The term.</param>
            <param name="propertyCollection">The property collection.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetType(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx@)">
            <summary>
            Tries to obtain the concrete type that a term represents.
            </summary>
            <param name="term">supposed type value</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetMethod(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to query the method.
            </summary>
            <param name="term">The term.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsObject(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the specified term is object.
            </summary>
            <param name="term">The term.</param>
            <returns>
            	<c>true</c> if the specified term is object; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsDefaultStruct(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether a term represents the default struct.
            </summary>
            <param name="term">The term.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsSelect(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the specified term is select.
            </summary>
            <param name="term">The term.</param>
            <returns>
            	<c>true</c> if the specified term is select; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsObjectProperty(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the specified term is select.
            </summary>
            <param name="term">The term.</param>
            <returns>
            	<c>true</c> if the specified term is select; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetIsAssignable(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to query the is assignable.
            </summary>
            <param name="term">The term.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetArrayElementType(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            
            </summary>
            <param name="term"></param>
            <param name="arrayType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetBoxValueType(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            
            </summary>
            <param name="term"></param>
            <param name="boxType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetUnary(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.UnaryOperator@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to query the unary.
            </summary>
            <param name="term">The term.</param>
            <param name="operator">The @operator.</param>
            <param name="operand">The operand.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetVTableMethod(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to query the V table method.
            </summary>
            <param name="term">The term.</param>
            <param name="reference">The reference.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetBinary(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.BinaryOperator@,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to query the binary.
            </summary>
            <param name="term">The term.</param>
            <param name="operator">The @operator.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetAc1(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermAc1Set@)">
            <summary>
            Tries to get an ac1 operation.
            </summary>
            <param name="term">The term.</param>
            <param name="operandSet">The operand set.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetObjectProperty(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.ObjectProperty@)">
            <summary>
            Tries to query the object property.
            </summary>
            <param name="term">The term.</param>
            <param name="objectTerm">The object term.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsUpdate(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the specified term is update.
            </summary>
            <param name="term">The term.</param>
            <returns>
            	<c>true</c> if the specified term is update; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetFuse(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of the operation
            that updates a compound value with a range of another compound value.
            </summary>
            <param name="term">The term.</param>
            <param name="leftCompound">The left compound.</param>
            <param name="offset">The offset.</param>
            <param name="rightCompound">The right compound.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetMove(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of the operation
            that moves all indices of a map by an offset.
            </summary>
            <param name="term">The term.</param>
            <param name="compound">The compound.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetUpdate(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.ITermMap@)">
            <summary>
            Tries to query the update.
            </summary>
            <param name="term">The term.</param>
            <param name="baseCompound">The base compound.</param>
            <param name="updates">The updates.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetUpdateAggressive(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.ITermMap@)">
            <summary>
            Tries to query the update.
            </summary>
            <param name="term">The term.</param>
            <param name="baseCompound">The base compound.</param>
            <param name="updates">The updates.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetPointerToValue(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to query the pointer to value.
            </summary>
            <param name="term">The term.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetPointerToBoundedIUniform(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of the operation
            that obtains the pointer of an immutable compound with a maximal length.
            </summary>
            <param name="term">supposed pointer to an element</param>
            <param name="compound">The compound.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetPointerToElement(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to query the pointer to element.
            </summary>
            <param name="term">The term.</param>
            <param name="baseAddress">The base address.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsPointerToInstanceFieldMap(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether a term represents a pointer to an instance field map.
            </summary>
            <param name="term">The term.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsPointerToNowhere(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks if an abstract represents represents
            the pointer to nowhere.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetPointerToInstanceFieldMap(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field@)">
            <summary>
            Tries to query the pointer to instance field map.
            </summary>
            <param name="term">The term.</param>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsDefaultValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether a term represents the default value.
            </summary>
            <param name="term">The term.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsNotDefaultValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks if a term is distinct from the default value.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsNegativeValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks if a term represents a negative value.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsNotNegativeValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks if a term represents a non-negative value.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetStaticType(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            If the given value has <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Ref"/>, the best known type is returned; otherwise <code>null</code>.
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsUndef(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the specified term is undef.
            </summary>
            <param name="term">The term.</param>
            <returns>
            	<c>true</c> if the specified term is undef; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetLayout(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Gets the layout.
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetObjectCreationTime(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Retrieves the object creat time of an term.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.GetLayoutKind(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Gets the kind of the layout.
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsProperStackBoolean(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether a term is a proper stack boolean.
            </summary>
            <param name="term">The term.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsFalse(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks if a term is equal to<see cref="P:Microsoft.ExtendedReflection.Interpretation.TermManager.False"/>.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsTrue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the specified term is true.
            </summary>
            <param name="term">The term.</param>
            <returns>
            	<c>true</c> if the specified term is true; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsNull(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the specified term is null.
            </summary>
            <param name="term">The term.</param>
            <returns>
            	<c>true</c> if the specified term is null; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetTruthValue(Microsoft.ExtendedReflection.Interpretation.Term,System.Boolean@)">
            <summary>
            Tries to query the truth value.
            </summary>
            <param name="term">The term.</param>
            <param name="truthValue">if set to <c>true</c> [truth value].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetInnerLogicallyNegatedValue(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to query the inner negated value.
            </summary>
            <param name="term">The term.</param>
            <param name="innerNegatedTerm">The inner negated term.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetInnerNegatedValue(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to query the inner negated value.
            </summary>
            <param name="term">The term.</param>
            <param name="innerNegatedTerm">The inner negated term.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetEquality(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to query the equality.
            </summary>
            <param name="term">The term.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetFill(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to query the fill.
            </summary>
            <param name="term">The term.</param>
            <param name="indexLayout">The index layout.</param>
            <param name="elementValue">The element value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetSelect(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to query the select.
            </summary>
            <param name="term">The term.</param>
            <param name="compound">The compound.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetMdIndex(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[]@)">
            <summary>
            Tries to obtain the constituents of a term that represents an index into a multidimensional array.
            </summary>
            <param name="term">supposed indices</param>
            <param name="indices">The indices.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetSymbol(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ISymbolId@)">
            <summary>
            Tries to obtain the constituents of a term that represents a symbol.
            </summary>
            <param name="term"></param>
            <param name="symbolId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetBaseLayout(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout@)">
            <summary>
            Tries to retrieve the layout of the compound
            into which the provided pointer points.
            </summary>
            <param name="pointerToElement"></param>
            <param name="compoundLayout"></param>
            <returns></returns>
            <remarks>
            This function returns false when <paramref name="&gt;pointerToElement"/>
            is not a pointer into a compound, or the layout of the compound is not known
            since the base address is a native integer.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetStructField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field@)">
            <summary>
            Tries to query the struct field.
            </summary>
            <param name="term">The term.</param>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetIfThenElse(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the constituents of a term that represents an if-then-else expression.
            </summary>
            <param name="term"></param>
            <param name="condition"></param>
            <param name="then"></param>
            <param name="else"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.IsValid(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the given term is valid (in particular, not garbage collected).
            May not be reliable in non-DEBUG builds.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetObjectId(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IObjectId@)">
            <summary>
            Tries to obtain the id of an object reference.
            </summary>
            <param name="term">supposed object reference</param>
            <param name="objectId">The object id.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetFunctionApplication(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IFunction@,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term[]@)">
            <summary>
            Tries to obtain the constituents of a term that represents a function application.
            </summary>
            <param name="term">The term.</param>
            <param name="function">The function.</param>
            <param name="time">The time.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryConvertValueToTerm(Microsoft.ExtendedReflection.Metadata.LayoutKind,System.Double,System.Decimal,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to convert the value into a constant term
            </summary>
            <param name="layoutKind"></param>
            <param name="doubleValue"></param>
            <param name="decimalValue"></param>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetTermValueAsFloatingPoint(Microsoft.ExtendedReflection.Interpretation.Term,System.Double@,System.Decimal@,System.Boolean@)">
            <summary>
            Tries to convert a term into a floating point
            </summary>
            <param name="term"></param>
            <param name="doubleValue"></param>
            <param name="decimalValue"></param>
            <param name="isDecimal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.TryGetDecimalConstant(Microsoft.ExtendedReflection.Interpretation.Term,System.Decimal@)">
            <summary>
            Tries the obtain a constant decimal value.
            </summary>
            <param name="term">The term.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermManager.Reducer">
            <summary>
            Retrieves a reducer of terms.
            </summary>
            <remarks>
            An implementation of the term manager should automatically
            reduce terms, so that the use of the reducer is not necessary.
            However, the reducer of this abstract class might be useful to
            implement a concrete class.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermManager.Ranges">
            <summary>
            Gets the ranges.
            </summary>
            <value>The ranges.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermManager.IdentitySubstitution">
            <summary>
            Gets the identity substitution.
            </summary>
            <value>The identity substitution.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermManager.False">
            <summary>
            The logical value 'false' in <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermManager.True">
            <summary>
            The logical value 'true' in <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermManager.Null">
            <summary>
            The constant abstract object reference value that represents 'null'.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermManager.INull">
            <summary>
            The constant term that represents the default native integer / unmanaged pointer value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.TermManager.ShiftedBytesConverter">
            <summary>
            Shifted bytes converter.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.IBytesConverter">
            <summary>
            A converter of values to and from bytes
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IBytesConverter.ToBytes(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Turns a value into a map of bytes.
            </summary>
            <param name="sourceValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IBytesConverter.FromBytes(System.Converter{System.UIntPtr,Microsoft.ExtendedReflection.Interpretation.Term})">
            <summary>
            Turns a map of bytes to a value.
            </summary>
            <param name="sourceBytes"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.IBytesConverter.Layout">
            <summary>
            The layout of the values which this converter applies to
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.ShiftedBytesConverter.Create(Microsoft.ExtendedReflection.Interpretation.IBytesConverter,System.IntPtr)">
            <summary>
            Creates a shifted bytes converter.
            </summary>
            <param name="innerConverter"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.ShiftedBytesConverter.ToBytes(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Turns a value into a map of bytes.
            </summary>
            <param name="sourceValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermManager.ShiftedBytesConverter.FromBytes(System.Converter{System.UIntPtr,Microsoft.ExtendedReflection.Interpretation.Term})">
            <summary>
            Turns a map of bytes to a value.
            </summary>
            <param name="sourceBytes"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermManager.ShiftedBytesConverter.Layout">
            <summary>
            The layout of the values which this converter applies to
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ISymbolId">
            <summary>
            Interface that describes the identifier of a symbol.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ISymbolId.GetPersistentHashCode">
            <summary>
            Gets a strong, persistent hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ISymbolId.Description">
            <summary>
            Textual description of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ISymbolId.Layout">
            <summary>
            The layout of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ISymbolId.ObjectCreationTime">
            <summary>
            When the object (or all objects within this value) was created.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ISymbolIdFromParameter">
            <summary>
            Symbol which is associated with a parameter.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ISymbolIdWithType">
            <summary>
            Symbol with precise type information
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ISymbolIdWithType.Type">
            <summary>
            Gets type; may be <code>null</code>
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ISymbolIdFromParameter.Parameter">
            <summary>
            Gets the parameter; may be <code>null</code>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.TermManager.Constructor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ISubstitution">
            <summary>
            Interface describing the substitution of terms.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ISubstitution.Apply(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Apply the substitution to an term.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ISubstitution.Apply(Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Apply the substitution to a list of terms.
            </summary>
            <param name="terms"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ISubstitution.TermManager">
            <summary>
            The term manager associated with this substitution.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ISubstitution.Domain">
            <summary>
            Retrieves all terms in the domain of this substitution.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ISubstitution.Resolver">
            <summary>
            Retrieves the resolver associated with this substitution.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1">
            <summary>
            This class allows to rewrite terms; it only attempts to rewrite each unique term once.
            </summary>
            <typeparam name="TParameter">type of a parameter that is threaded through</typeparam>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1">
            <summary>
            This abstract class allows to rewrite an term.
            </summary>
            <remarks>
            This class implements a visitor pattern.
            </remarks>
            <typeparam name="TParameter">type of a parameter that is threaded through</typeparam>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2">
            <summary>
            Abstract class that provides visitor pattern for terms.
            </summary>
            <remarks>
            This abstract class implements the main dispatch method of the visitor pattern;
            however, it does not implement the individual visitor methods.
            </remarks>
            <typeparam name="TResult">type of visiting result</typeparam>
            <typeparam name="TParameter">type of a parameter that is threaded through</typeparam>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2">
            <summary>
            Interface that provides visitor pattern for terms.
            </summary>
            <typeparam name="TResult">type of visiting result</typeparam>
            <typeparam name="TParameter">type of a parameter that is threaded through</typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitTerm(`1,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Main visitor that dispatches to individual visit-methods.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitI1(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Byte)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitI2(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int16)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitI4(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitI8(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int64)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitR4(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Single)">
            <summary>
            Visitor for a floating-point constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitR8(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Double)">
            <summary>
            Visitor for a floating-point constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitObject(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IObjectId,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection)">
            <summary>
            Visitor for an object reference constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="id">id of object</param>
            <param name="properties">properties of object</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitStructField(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Visitor for a struct-field constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="instanceField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitMethod(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Visitor for a constant representing a method.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitType(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Visitor for a constant representing a type.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitUndef(`1,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a constant that represents an undefined value.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitSymbol(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ISymbolId)">
            <summary>
            Visitor for a symbol.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="key">identifier of symbol</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitDefaultStruct(`1,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for an empty struct, i.e. the struct whose elements are default values.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitFill(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a map whose element are all mapped to <paramref name="elementValue"/>.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="indexLayout"></param>
            <param name="elementValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitPointerToNowhere(`1,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an illegal address.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitPointerToValue(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an immutable value.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitPointerToBoundedIUniform(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to a uniform compound indexed over <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I"/>, where indices range from zero to the given maximum length
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="compound">uniform compound</param>
            <param name="length">maximum length</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitPointerToStaticField(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Visitor for a pointer to a static field.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="staticField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitPointerToInstanceFieldMap(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Visitor for a pointer to an instance-field of an object.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="instanceField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitPointerToArgument(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to an argument of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <param name="argumentIndex">index of argument in stack-frame</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitPointerToLocal(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to a local variable of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <param name="localIndex">index of local variable in stack-frame</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitPointerToElement(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an element in a compound value.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="baseAddress">address of compound value</param>
            <param name="index">index into compound value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitPointerToStackTop(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to the topmost element of the evaluation stack of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitVTableMethod(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Visitor for a vtable-lookup.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="reference">object reference</param>
            <param name="method">virtual method</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitArrayElementType(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for array-element type.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="arrayType">type of an array</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitBoxValueType(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for box-value type.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="boxType">type of a box</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitObjectProperty(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ObjectProperty)">
            <summary>
            Visitor for an object property.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="reference">object reference</param>
            <param name="property">object property</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitUpdate(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermMap)">
            <summary>
            Visitor for an updated compound.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="baseCompound">compound value</param>
            <param name="updates">set of updates</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitFuse(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a fused compound.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="leftCompound">The left compound.</param>
            <param name="offset">The offset.</param>
            <param name="rightCompound">The right compound.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitMove(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a moved compound.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="compound">The compound.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitSelect(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a selection.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="compound">compound value</param>
            <param name="index">index into compound</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitUnary(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.UnaryOperator,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a unary operation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operator">unary operator</param>
            <param name="operand">operand value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitBinary(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a binary operation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operator">binary operator</param>
            <param name="left">left operand value</param>
            <param name="right">right operand value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitAc1(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermAc1Set)">
            <summary>
            Visitor for an associative, commutative operation with a unit.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operandSet">The operand set.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitIsAssignable(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a subtype test.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="sourceType">source type</param>
            <param name="targetType">target type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitIfThenElse(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for an if-then-else value, that evaluates to the <paramref name="then"/> value if the condition holds, and to <paramref name="else"/> otherwise.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="condition">condition of <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/></param>
            <param name="then">value with same layout as <paramref name="else"/></param>
            <param name="else">value with same layout as <paramref name="then"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitFunctionApplication(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Visitor for an invocation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="function">invoked method</param>
            <param name="time">value that represents the invocation time</param>
            <param name="arguments">method arguments</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.ITermVisitor`2.VisitMdIndex(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Visitor for a multi-dimensional array index.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="indices">list of indices</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.TermManager">
            <summary>
            The TermManager associated with this visitor.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager)">
            <summary>
            Creates an instance of this type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitTerm(`1,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Main visitor that dispatches to individual visit-methods.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitI1(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Byte)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitI2(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int16)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitI4(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitI8(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int64)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitR4(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Single)">
            <summary>
            Visitor for a floating-point constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitR8(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Double)">
            <summary>
            Visitor for a floating-point constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitObject(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IObjectId,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection)">
            <summary>
            Visitor for an object reference constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="id">id of object</param>
            <param name="properties">properties of object</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitStructField(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Visitor for a struct-field constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="instanceField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitMethod(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Visitor for a constant representing a method.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitType(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Visitor for a constant representing a type.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitUndef(`1,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a constant that represents an undefined value.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitSymbol(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ISymbolId)">
            <summary>
            Visitor for a symbol.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="key">identifier of symbol</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitDefaultStruct(`1,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for an empty compound, i.e. the compound whose elements are default values.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitFill(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a map whose element are all mapped to <paramref name="elementValue"/>.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="indexLayout"></param>
            <param name="elementValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitPointerToNowhere(`1,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an illegal address.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitPointerToValue(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an immutable value.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitPointerToBoundedIUniform(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to a uniform compound indexed over <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I"/>, where indices range from zero to the given maximum length
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="compound">uniform compound</param>
            <param name="length">maximum length</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitPointerToStaticField(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Visitor for a pointer to a static field.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="staticField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitPointerToInstanceFieldMap(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Visitor for a pointer to an instance-field of an object.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="instanceField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitPointerToArgument(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to an argument of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <param name="argumentIndex">index of argument in stack-frame</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitPointerToLocal(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to a local variable of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <param name="localIndex">index of local variable in stack-frame</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitPointerToElement(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an element in a compound value.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="baseAddress">address of compound value</param>
            <param name="index">index into compound value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitPointerToStackTop(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to the topmost element of the evaluation stack of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitVTableMethod(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Visitor for a vtable-lookup.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="reference">object reference</param>
            <param name="method">virtual method</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitArrayElementType(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for array-element type.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="arrayType">type of an array</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitBoxValueType(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for box-value type.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="boxType">type of a box</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitObjectProperty(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ObjectProperty)">
            <summary>
            Visitor for an object property.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="reference">object reference</param>
            <param name="property">object property</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitFuse(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a fused compound.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="leftCompound">The left compound.</param>
            <param name="offset">The offset.</param>
            <param name="rightCompound">The right compound.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitMove(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a moved compound.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="compound">The compound.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitUpdate(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermMap)">
            <summary>
            Visitor for an updated compound.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="baseCompound">compound value</param>
            <param name="updates">set of updates</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitSelect(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a selection.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="compound">compound value</param>
            <param name="index">index into compound</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitUnary(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.UnaryOperator,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a unary operation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operator">unary operator</param>
            <param name="operand">operand value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitBinary(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a binary operation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operator">binary operator</param>
            <param name="left">left operand value</param>
            <param name="right">right operand value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitAc1(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermAc1Set)">
            <summary>
            Visitor for an associative, commutative operation with a unit.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operandSet"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitIsAssignable(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a subtype test.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="sourceType">source type</param>
            <param name="targetType">target type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitIfThenElse(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for an if-then-else value, that evaluates to the <paramref name="then"/> value if the condition holds, and to <paramref name="else"/> otherwise.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="condition">condition of <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/></param>
            <param name="then">value with same layout as <paramref name="else"/></param>
            <param name="else">value with same layout as <paramref name="then"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitFunctionApplication(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Visitor for an invocation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="function">function</param>
            <param name="time">value that represents the invocation time</param>
            <param name="arguments">method arguments</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorBase`2.VisitMdIndex(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Visitor for a multi-dimensional array index.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="indices">list of indices</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="termManager"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.ClearAndTrim">
            <summary>
            Clears all internalized values.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.Clear">
            <summary>
            Clears all internalized values.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitI1(`0,Microsoft.ExtendedReflection.Interpretation.Term,System.Byte)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitI2(`0,Microsoft.ExtendedReflection.Interpretation.Term,System.Int16)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitI4(`0,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitI8(`0,Microsoft.ExtendedReflection.Interpretation.Term,System.Int64)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitR4(`0,Microsoft.ExtendedReflection.Interpretation.Term,System.Single)">
            <summary>
            Visitor for a floating-point constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitR8(`0,Microsoft.ExtendedReflection.Interpretation.Term,System.Double)">
            <summary>
            Visitor for a floating-point constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitObject(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IObjectId,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection)">
            <summary>
            Visitor for an object reference constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="id">id of object</param>
            <param name="properties">properties of object</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitStructField(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Visitor for a struct-field constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="instanceField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitMethod(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Visitor for a constant representing a method.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitType(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Visitor for a constant representing a type.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitUndef(`0,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a constant that represents an undefined value.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitSymbol(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ISymbolId)">
            <summary>
            Visitor for a symbol.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="key">identifier of symbol</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitDefaultStruct(`0,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for an empty compound, i.e. the compound whose elements are default values.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitFill(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a map whose element are all mapped to <paramref name="elementValue"/>.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="indexLayout"></param>
            <param name="elementValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitPointerToNowhere(`0,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an illegal address.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitPointerToValue(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an immutable value.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitPointerToBoundedIUniform(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to a uniform compound indexed over <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I"/>, where indices range from zero to the given maximum length
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="compound">uniform compound</param>
            <param name="length">maximum length</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitPointerToStaticField(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Visitor for a pointer to a static field.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="staticField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitPointerToInstanceFieldMap(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Visitor for a pointer to an instance-field of an object.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="instanceField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitPointerToArgument(`0,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to an argument of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <param name="argumentIndex">index of argument in stack-frame</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitPointerToLocal(`0,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to a local variable of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <param name="localIndex">index of local variable in stack-frame</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitPointerToElement(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an element in a compound value.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="baseAddress">address of compound value</param>
            <param name="index">index into compound value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitPointerToStackTop(`0,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to the topmost element of the evaluation stack of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitVTableMethod(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Visitor for a vtable-lookup.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="reference">object reference</param>
            <param name="method">virtual method</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitArrayElementType(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for array-element type.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="arrayType">type of an array</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitBoxValueType(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for box-value type.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="boxType">type of an array</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitObjectProperty(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ObjectProperty)">
            <summary>
            Visitor for an object property.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="reference">object reference</param>
            <param name="property">object property</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitFuse(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a fused compound.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="leftCompound">The left compound.</param>
            <param name="offset">The offset.</param>
            <param name="rightCompound">The right compound.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitMove(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a moved compound.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="compound">The compound.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitUpdate(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermMap)">
            <summary>
            Visitor for an updated compound.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="baseCompound">compound value</param>
            <param name="updates">set of updates</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitSelect(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a selection.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="compound">compound value</param>
            <param name="index">index into compound</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitUnary(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.UnaryOperator,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a unary operation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operator">unary operator</param>
            <param name="operand">operand value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitBinary(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a binary operation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operator">binary operator</param>
            <param name="left">left operand value</param>
            <param name="right">right operand value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitAc1(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermAc1Set)">
            <summary>
            Visitor for an associative, commutative operation with a unit.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operandSet"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitIsAssignable(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a subtype test.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="sourceType">source type</param>
            <param name="targetType">target type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitIfThenElse(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for an if-then-else value, that evaluates to the <paramref name="then"/> value if the condition holds, and to <paramref name="else"/> otherwise.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="condition">condition of <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/></param>
            <param name="then">value with same layout as <paramref name="else"/></param>
            <param name="else">value with same layout as <paramref name="then"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitFunctionApplication(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Visitor for an invocation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="function">function</param>
            <param name="time">value that represents the invocation time</param>
            <param name="arguments">method arguments</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermRewriter`1.VisitMdIndex(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Visitor for a multi-dimensional array index.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="indices">list of indices</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ITermUser">
            <summary>
            A user of terms obtained from an <see cref="T:Microsoft.ExtendedReflection.Interpretation.TermManager"/>.
            </summary>
            <remarks>
            When a client stores terms obtained from an <see cref="T:Microsoft.ExtendedReflection.Interpretation.TermManager"/>,
            it must register itself with <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermManager.AddUser(Microsoft.ExtendedReflection.Interpretation.ITermUser,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ITermUser.CollectLiveTerms(Microsoft.ExtendedReflection.Interpretation.ITermCollector)">
            <summary>
            Collects a list of all currently referenced terms.
            </summary>
            <param name="collection">callback to announce referenced terms</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter{`0}.OnCollection)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="termManager">The term manager.</param>
            <param name="onCollection">What to do when terms are garbage collected.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1.ClearAndTrim">
            <summary>
            Clears all internalized values.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1.Clear">
            <summary>
            Clears all internalized values.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1.VisitTerm(`0,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Main visitor that dispatches to individual visit-methods.
            </summary>
            <remarks>
            Each term is only visited once.
            </remarks>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1.Rewrite(`0,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Rewrites the specified term.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1.CollectLiveTerms(Microsoft.ExtendedReflection.Interpretation.ITermCollector)">
            <summary>
            Collects a list of all currently referenced terms.
            </summary>
            <param name="collection">callback to announce referenced terms</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1.CheckDisposed">
            <summary>
            Checks whether this instance has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1.InternalizedKeys">
            <summary>
            Gets the internalized keys.
            </summary>
            <value>The internalized values.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1.OnCollection">
            <summary>
            What to do when terms are collected
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1.OnCollection.Fail">
            <summary>
            Fail
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1.OnCollection.Clear">
            <summary>
            call Clear()
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1.OnCollection.ClearAndTrim">
            <summary>
            call ClearAndTrim()
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Visitors.TermInternalizingRewriter`1.OnCollection.Report">
            <summary>
            report all cached terms
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.TermMapBuilder">
            <summary>
            Class to build a term map.
            </summary>
            <remarks>
            Call <see cref="M:Microsoft.ExtendedReflection.Interpretation.TermMapBuilder.ToTermMap"/> to obtain a term map.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermMapBuilder.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="termManager"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermMapBuilder.Override(Microsoft.ExtendedReflection.Interpretation.ITermMap)">
            <summary>
            Overrides parts of the current map with mappings given by another map.
            </summary>
            <param name="termMap"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermMapBuilder.ToTermMap">
            <summary>
            Retrieves a term map from the current state of this builder.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermMapBuilder.Item(System.UIntPtr)">
            <summary>
            Mapping of native integers / unmanaged pointers to unmanaged values.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermMapBuilder.Item(System.Int32)">
            <summary>
            Mapping of <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> values to terms.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermMapBuilder.Item(System.IntPtr)">
            <summary>
            Mapping of <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I"/> values to terms.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermMapBuilder.Item(System.Int32[])">
            <summary>
            Mapping of md-indices to terms.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermMapBuilder.Item(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Mapping of struct-fields to terms.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermMapBuilder.Item(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Mapping of terms to terms.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Effects.IEffectsTracker">
            <summary>
            Interface to track effects on the heap.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Effects.IEffectsTracker.AddNewObject(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            A new object has been created.
            </summary>
            <param name="object">object reference</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Effects.IEffectsTracker.IsNewObject(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Whether <see cref="M:Microsoft.ExtendedReflection.Interpretation.Effects.IEffectsTracker.AddNewObject(Microsoft.ExtendedReflection.Interpretation.Term)"/> was notified before
            for the given object reference.
            </summary>
            <param name="object">object reference</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Effects.IEffectsTracker.AddEffect(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.Effects.IEffect)">
            <summary>
            Adds an effect.
            </summary>
            <param name="source">method in which the effect occurred, if any</param>
            <param name="effect">effect</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Effects.IEffectsTracker.ReadField(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Adds a read-effect.
            </summary>
            <param name="source">method in which the effect occurred, if any</param>
            <param name="field">field which was read</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Effects.IEffectsTracker.ReadFromMemoryRegion(Microsoft.ExtendedReflection.Metadata.Method,System.UIntPtr)">
            <summary>
            Adds a read-effect.
            </summary>
            <param name="source">method in which the effect occurred, if any</param>
            <param name="baseAddress">memory region which was read</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Effects.IEffectsTracker.WriteField(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Adds a write-effect.
            </summary>
            <param name="source">method in which the effect occurred, if any</param>
            <param name="field">field which was written</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Effects.IEffectsTracker.WriteToMemoryRegion(Microsoft.ExtendedReflection.Metadata.Method,System.UIntPtr)">
            <summary>
            Adds a write-effect.
            </summary>
            <param name="source">method in which the effect occurred, if any</param>
            <param name="baseAddress">memory region which was written</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalBehavior">
            <summary>
            Abstract class that represents potential branch in interpreter.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalBehavior.Interpreter">
            <summary>
            Interpreter of this conditional behavior.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalBehavior.Next">
            <summary>
            Next conditional behavior of a linked list.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Switch">
            <summary>
            Switch.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Switch.Case(Microsoft.ExtendedReflection.Metadata.ICallStackTrace,System.Int32,System.Int32)">
            <summary>
            Select case.
            </summary>
            <param name="callStackTrace">The call stack trace.</param>
            <param name="codeLabel">The code label.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Switch.Default(Microsoft.ExtendedReflection.Metadata.ICallStackTrace,System.Int32)">
            <summary>
            Fallthrough.
            </summary>
            <param name="callStackTrace">The call stack trace.</param>
            <param name="codeLabel">The code label.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.Switch.Selector">
            <summary>
            Switch selector.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.Switch.TargetsCount">
            <summary>
            Number of switch targets.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.GuardedStore">
            <summary>
            A delayed store that is only executed when no exception was thrown.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.GuardedStore.Fire(System.Int32)">
            <summary>
            Fire store.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.GuardedStore.Address">
            <summary>
            Address where value is to be stored.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.GuardedStore.Value">
            <summary>
            Value to be stored.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.GuardedStore.Layout">
            <summary>
            Layout of value to be stored.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalBranch">
            <summary>
            Conditional branch.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalBranch.Decide(Microsoft.ExtendedReflection.Metadata.ICallStackTrace,System.Int32,System.Boolean)">
            <summary>
            Decides which branch target to go to.
            </summary>
            <param name="callStackTrace">The call stack trace.</param>
            <param name="codeLabel">The code label.</param>
            <param name="branchTaken">whether the branch was taken</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalBranch.Sign">
            <summary>
            Sign of condition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalBranch.Condition">
            <summary>
            Condition; negated if not <see cref="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalBranch.Sign"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalExceptionKind">
            <summary>
            Kinds of conditional exceptions handled by intepreter.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalExceptionKind.NullReference">
            <summary>
            <see cref="T:System.NullReferenceException"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalExceptionKind.IndexOutOfRange">
            <summary>
            <see cref="T:System.IndexOutOfRangeException"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalExceptionKind.DivideByZero">
            <summary>
            <see cref="T:System.DivideByZeroException"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalExceptionKind.InvalidCast">
            <summary>
            <see cref="T:System.InvalidCastException"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalExceptionKind.Overflow">
            <summary>
            <see cref="T:System.OverflowException"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalExceptionKind.ArrayTypeMismatch">
            <summary>
            <see cref="T:System.ArrayTypeMismatchException"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalExceptionKind.ArgumentOutOfRange">
            <summary>
            <see cref="T:System.ArgumentOutOfRangeException"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalExceptionKind.ArgumentNull">
            <summary>
            <see cref="T:System.ArgumentNullException"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalExceptionKind._End">
            <summary>
            Must be last value in enumeration.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalException">
            <summary>
            Conditional exception.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalException.Kind">
            <summary>
            Kind of exception.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalException.Sign">
            <summary>
            Sign of condition.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalException.Decide(Microsoft.ExtendedReflection.Metadata.ICallStackTrace,System.Int32,System.Boolean)">
            <summary>
            Decodes whether exception is taken.
            </summary>
            <param name="callStackTrace">The call stack trace.</param>
            <param name="codeLabel">The code label.</param>
            <param name="exceptionTaken">if set to <c>true</c> [exception taken].</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalException.ExceptionType">
            <summary>
            Type of exception.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalException.Condition">
            <summary>
            Condition when exception is thrown; negated if not <see cref="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.ConditionalException.Sign"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.IExecutionBounds">
            <summary>
            Interface which provides facilities to bound an execution.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.IExecutionBounds.ResetBounds">
            <summary>
            Resets the execution bound counters
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.IExecutionBounds.ConsumeBranch">
            <summary>
            This method is called every time the instruction interpreter 
            hits a branch; this method decides whether execution is
            allowed to continue.
            </summary>
            <returns>false if execution should stop</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.IExecutionBounds.ConsumeMethodCalls">
            <summary>
            This method is called every time the instruction interpreter 
            hits a method call; this method decides whether execution is
            allowed to continue.
            </summary>
            <returns>false if execution should stop</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.IExecutionBounds.ConsumeFrame">
            <summary>
            This method is called every time the instruction interpreter
            enters a method call; this method decides whether execution is
            allowed to continue.
            </summary>
            <returns>false if execution should stop</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.IExecutionBounds.UndoConsumeFrame">
            <summary>
            This method is called every time the instruction interpreter
            leaves a method call.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ITermCollector">
            <summary>
            Interface that represents mutible collection of terms.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ITermCollector.Add(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Adds a term to the collection.
            </summary>
            <param name="liveTerm"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ITermCollector.Add(System.Int32)">
            <summary>
            Adds a term to the collection.
            </summary>
            <param name="liveTermUniqueIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ITermCollector.AddRange(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Interpretation.Term})">
            <summary>
            Adds a set of terms to the collection.
            </summary>
            <param name="liveTerms"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ITermCollector.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds a set of terms to the collection.
            </summary>
            <param name="liveTerms"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.FunctionFlags">
            <summary>
            Flags that characterize a function
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.FunctionFlags.Pure">
            <summary>
            Whether the function is pure
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.FunctionFlags.Identity">
            <summary>
            Whether the function is identity.
            </summary>
            <remarks>
            When set, <see cref="F:Microsoft.ExtendedReflection.Interpretation.FunctionFlags.Pure"/> must be set as well.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.FunctionFlags.Arithmetic">
            <summary>
            Whether the function is an arithmetic function.
            </summary>
            <remarks>
            When set, <see cref="F:Microsoft.ExtendedReflection.Interpretation.FunctionFlags.Pure"/> must be set as well.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.FunctionFlags.String">
            <summary>
            Whether the function is a string function.
            </summary>
            <remarks>
            When set, <see cref="F:Microsoft.ExtendedReflection.Interpretation.FunctionFlags.Pure"/> must be set as well.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.FunctionFlags.Reflection">
            <summary>
            Whether the function is an arithmetic function.
            </summary>
            <remarks>
            When set, <see cref="F:Microsoft.ExtendedReflection.Interpretation.FunctionFlags.Pure"/> must be set as well.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.IFunction">
            <summary>
            A method for terms describing invocations.
            </summary>
            <remarks>
            The TermManager allows the creation
            of terms that represent the invocation of methods,
            e.g., string.Concat(v, w), where v and w are terms themselves.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IFunction.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType@)">
            <summary>
            For pretty-printing purposes
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IFunction.IsProperStackBoolean(System.Boolean[])">
            <summary>
            Computes whether the application of this function yields zero or one in <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>.
            </summary>
            <param name="argumentsAreProperStackBooleans"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IFunction.GetPersistentHashCode">
            <summary>
            Gets a strong, persistent hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.IFunction.Flags">
            <summary>
            Gets flags indicating properties of this function.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.IFunction.IsStatic">
            <summary>
            For pretty-printing purposes
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.IFunction.ShortName">
            <summary>
            Name of this function
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.IFunction.FullName">
            <summary>
            Full name of this function
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.IFunction.ResultLayout">
            <summary>
            The result layout of an application of this function.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.IFunction.ParameterLayouts">
            <summary>
            Instance methods/constructors have the receiver as the first parameter.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.IFunction.Method">
            <summary>
            Optional; method which implements this function.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ITermMap">
            <summary>
            Mapping of terms to terms.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ITermMap.TryGetValue(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Attempts to retrieve the value associated with a key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ITermMap.ContainsKey(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks if the map contains a key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ITermMap.ContainsValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks if the map contains a particular value; may not be fast, in particular not for non-default values.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ITermMap.TryGetCommonValue(Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to get a common value.
            </summary>
            <param name="value">The common value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ITermMap.TryGetSingletonMaplet(Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Interpretation.ITermMap.Count"/> is one, the single maplet can be obtained with this method.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ITermMap.ContainsAllKeys(Microsoft.ExtendedReflection.Interpretation.ITermMap)">
            <summary>
            Checks whether this map contains all keys from the other map.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ITermMap.IsEmpty">
            <summary>
            Whether this map is empty.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ITermMap.AreKeysValues">
            <summary>
            Whether all keys are values.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ITermMap.KeysObjectCreationTime">
            <summary>
            When the keys were created.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ITermMap.ContainsValueThatSelectsIndex">
            <summary>
            Checks if the map contains a select value that select at the index at which the value is stored in the map.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ITermMap.Keys">
            <summary>
            Returns a list of all keys.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ITermMap.Maplets">
            <summary>
            Returns a list of all maplets.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ITermMap.Count">
            <summary>
            Gets the number of elements in this map.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter">
            <summary>
            Interpreter of instructions.
            </summary>
            <remarks>
            This interpreter defines the meaning of all instructions in
            terms of a terms and an abstract state.
            It provides facilities to build a dynamic call graph, path condition,
            and bound the execution.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase">
            <summary>
            Abstract implementation if execution monitor.
            </summary>
            <remarks>
            This abstract implementation compacts some redundancy in the instruction set.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor">
            <summary>
            An execution monitor that tracks a sequence of events.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Auxiliary function, called when a method is entered.
            </summary>
            <remarks>
            A call to this method must be followed by a <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.LeaveMethod"/>.
            If this method returns true, a sequence of <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Argument``1(System.Int32,``0)"/>/
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ArgumentByRef``1(System.Int32,``0@)"/>/<see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ArgumentPtr(System.Int32,System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)"/>/<see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ArgumentTypedReference(System.Int32,System.TypedReference)"/>/<see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ArgumentNotSupported(System.Int32)"/> calls
            must be made to deliver all argument values.
            </remarks>
            <param name="method">entered method</param>
            <returns>true if method arguments are requested</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.UnwindMethod(System.Object)">
            <summary>
            Auxiliary function, called when a method is left due to an unhandled exception.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.LeaveMethod">
            <summary>
            Auxiliary function, called when a method is left.
            </summary>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.TryGetCurrentMethod(Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to get current method.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ReceiverObjectArgument(System.Object)">
            <summary>
            Delivers receiver argument of class instance method.
            </summary>
            <param name="receiverObject"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Argument``1(System.Int32,``0)">
            <summary>
            Delivers next method argument.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ArgumentObject(System.Int32,System.Object)">
            <summary>
            Delivers next method argument.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ArgumentByRef``1(System.Int32,``0@)">
            <summary>
            Delivers next method argument.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ArgumentPtr(System.Int32,System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Delivers next method argument.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <param name="pointerType">pointer type</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ArgumentTypedReference(System.Int32,System.TypedReference)">
            <summary>
            Delivers next method argument.
            </summary>
            <param name="index">The index.</param>
            <param name="typedReference">value</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ArgumentNotSupported(System.Int32)">
            <summary>
            Delivers next method argument. 
            </summary>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ReturnArgument``1(System.Int32,``0)">
            <summary>
            Delivers next return method argument.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ReturnArgumentObject(System.Int32,System.Object)">
            <summary>
            Delivers next method argument.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ReturnArgumentByRef``1(System.Int32,``0@)">
            <summary>
            Delivers next method argument.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ReturnArgumentPtr(System.Int32,System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Delivers next return method argument.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <param name="pointerType">pointer type</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ReturnArgumentTypedReference(System.Int32,System.TypedReference)">
            <summary>
            Delivers next return method argument.
            </summary>
            <param name="index">The index.</param>
            <param name="typedReference">value</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ReturnArgumentNotSupported(System.Int32)">
            <summary>
            Delivers next return method argument. 
            </summary>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtBranchTarget(Microsoft.ExtendedReflection.Monitoring.BranchTargetKind)">
            <summary>
            This method is called
            when execution reaches a point that is a branch target.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtOffset(System.Int32)">
            <summary>
            This method is called when an offset is reached. The method is not called for all offsets.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtConditionalBranchFallthrough(System.Int32)">
            <summary>
            This method is called
            when a conditional branch falls through, i.e. the condition
            does not hold, it falls through.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtConditionalBranchTarget(System.Int32)">
            <summary>
            This method is called
            when a conditional branch is taken, i.e. the condition 
            does hold, it branches to the target.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtSwitchFallthrough(System.Int32)">
            <summary>
            This method is called
            when a switch selector is not in the range of the switch
            targets, the switch falls through
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtSwitchTarget(System.Int32,System.Int32)">
            <summary>
            This method is called
            when a switch selector is in the range of the switch
            targets, the switch branches to the target.
            </summary>
            <param name="index">switch selector value</param>
            <param name="codeLabel">The code label.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtDereferenceFallthrough(System.Int32)">
            <summary>
            This method is called
            when a null-dereference check does not cause an exception.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtDereferenceNullReferenceException(System.NullReferenceException,System.Int32)">
            <summary>
            This method is called
            when a null-dereference check causes an exception,
            or when a called method throws a <see cref="T:System.NullReferenceException"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.BeforeThrow(System.Object,System.Int32)">
            <summary>
            This method is called after the <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Throw"/> callback, but before the throw instruction actually fires.
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Throw"/> has an implicit null-derefence check,
            but it does not fall through when the check succeeds.
            This call enables the prediction of the behavior of <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Throw"/>.
            </summary>
            <param name="exceptionObject"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtIndexedAccessFallthrough(System.Int32)">
            <summary>
            This method is called
            when an index-out-of-bounds check does not cause an exception.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtIndexedAccessIndexOutOfRangeException(System.IndexOutOfRangeException,System.Int32)">
            <summary>
            This method is called
            when an index-out-of-bounds check causes an exception,
            or when a called method throws a <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtDivisionFallthrough(System.Int32)">
            <summary>
            This method is called
            when a division-by-zero check does not cause an exception.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtDivisionDivideByZeroException(System.DivideByZeroException,System.Int32)">
            <summary>
            This method is called
            when a division-by-zero check causes an exception,
            or when a called method throws a <see cref="T:System.DivideByZeroException"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtCastFallthrough(System.Int32)">
            <summary>
            This method is called
            when a type check does not cause an exception.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtCastInvalidCastException(System.InvalidCastException,System.Int32)">
            <summary>
            This method is called
            when a type check causes an exception,
            or when a called method throws a <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtCheckedOperationFallthrough(System.Int32)">
            <summary>
            This method is called
            when a checked operation does not cause an exception.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtCheckedOperationOverflowException(System.OverflowException,System.Int32)">
            <summary>
            This method is called
            when a checked operation causes an exception,
            or when a called method throws a <see cref="T:System.OverflowException"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtArrayDestructionFallthrough(System.Int32)">
            <summary>
            This method is called
            when a array destruction check does not cause an exception.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtArrayDestructionArrayTypeMismatchException(System.ArrayTypeMismatchException,System.Int32)">
            <summary>
            This method is called
            when a array destruction check causes an exception,
            or when a called method throws a <see cref="T:System.ArrayTypeMismatchException"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtArgumentOutOfRangeFallthrough(System.Int32)">
            <summary>
            This method is called
            when an argument-out-of range check does not cause an exception.
            </summary>
            <remarks>
            This handler is not triggered by instrumented code, but only as part of
            native method substitutions.
            </remarks>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtArgumentOutOfRangeException(System.ArgumentOutOfRangeException,System.Int32)">
            <summary>
            This method is called
            when an argument-out-of range check causes an exception.
            </summary>
            <remarks>
            This handler is not triggered by instrumented code, but only as part of
            native method substitutions.
            </remarks>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtArgumentNullFallthrough(System.Int32)">
            <summary>
            This method is called
            when an argument-null check does not cause an exception.
            </summary>
            <remarks>
            This handler is not triggered by instrumented code, but only as part of
            native method substitutions.
            </remarks>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtArgumentNullException(System.ArgumentNullException,System.Int32)">
            <summary>
            This method is called
            when an argument-null check causes an exception.
            </summary>
            <remarks>
            This handler is not triggered by instrumented code, but only as part of
            native method substitutions.
            </remarks>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.StartFinallyHandler(System.Int32)">
            <summary>
            This method is called when an finally handler
            is entered.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.StartFaultHandler(System.Int32)">
            <summary>
            This method is called when an exception fault handler
            is entered.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.StartFilter(System.Object,System.Int32)">
            <summary>
            This method is called when an exception filter handler
            is entered.
            </summary>
            <param name="exceptionObject"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.BeforeEndFilter(System.Int32)">
            <summary>
            This method is called before a filter finishes.
            </summary>
            <param name="verdict">0 means continue search, 1 means execute handler</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.StartExceptionHandler(System.Object,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            This method is called when an exception handler 
            is entered.
            </summary>
            <param name="exceptionObject"></param>
            <param name="type"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.MissedExceptionHandler(System.Object,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            This method is called when an exception handler 
            is not entered.
            </summary>
            <param name="exceptionObject"></param>
            <param name="type"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.CallResult``1(``0)">
            <summary>
            This method may be called to indicate the concrete result of a immediately preceding call.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.CallResultPtr(System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            This method may be called to indicate the concrete result of a immediately preceding call.
            </summary>
            <param name="value"></param>
            <param name="pointerType">can be a function pointer as well</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.CallResultTypedReference(System.TypedReference)">
            <summary>
            This method may be called to indicate the concrete result of a immediately preceding call.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.CallResultObject(System.Object)">
            <summary>
            This method may be called to indicate the concrete result of a immediately preceding call.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.CallResultByRef``1(``0@)">
            <summary>
            This method may be called to indicate the concrete result of a immediately preceding call.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.CallResultNotSupported">
            <summary>
            This method may be called to indicate the concrete result of a immediately preceding call.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtCallFallthrough(System.Int32)">
            <summary>
            This method is called when a call returns without an exception.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtCallException(System.Object,System.Int32)">
            <summary>
            This method is called when a call returns with an exception
            that is not caught by any of the more specialized exception handlers
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.StartExceptionHandler(System.Object,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)"/>, 
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtDereferenceNullReferenceException(System.NullReferenceException,System.Int32)"/>, 
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtIndexedAccessIndexOutOfRangeException(System.IndexOutOfRangeException,System.Int32)"/>,
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtDivisionDivideByZeroException(System.DivideByZeroException,System.Int32)"/>,
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtCastInvalidCastException(System.InvalidCastException,System.Int32)"/>,
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtCheckedOperationOverflowException(System.OverflowException,System.Int32)"/>,
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtArrayDestructionArrayTypeMismatchException(System.ArrayTypeMismatchException,System.Int32)"/>.
            </summary>
            <param name="exception">exception object (does not have to derive from <see cref="T:System.Exception"/>).</param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.BeforeAnyCall(System.Int32)">
            <summary>
            This method is called before a call, callvirt, calli, or newobj instruction.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.VarArgTypes(Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            This method is called just before a var-arg call to 
            indicate the sequence of additional var-arg argument types.
            </summary>
            <param name="varArgTypes"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.BeforeNewarr(System.UIntPtr,System.Int32)">
            <summary>
            This method is called just before a <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Newarr(Microsoft.ExtendedReflection.Metadata.TypeEx)"/>
            instruction.
            </summary>
            <param name="size">The size.</param>
            <param name="codeLabel">The code label.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.BeforeNewobj(System.Int32)">
            <summary>
            This method is called just before a <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Newobj(Microsoft.ExtendedReflection.Metadata.Method)"/>
            instruction.
            </summary>
            <param name="codeLabel">code label</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AfterNewobj``1(``0)">
            <summary>
            This method is called just after a <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Newobj(Microsoft.ExtendedReflection.Metadata.Method)"/>
            instruction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AfterNewobjObject(System.Object)">
            <summary>
            This method is called just after a <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Newobj(Microsoft.ExtendedReflection.Metadata.Method)"/>
            instruction.
            </summary>
            <param name="newObject">The new object.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AfterNewobjNotSupported">
            <summary>
            This method is called just after a <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Newobj(Microsoft.ExtendedReflection.Metadata.Method)"/>
            instruction.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AfterNewarr(System.Object)">
            <summary>
            This method is called just after a <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Newarr(Microsoft.ExtendedReflection.Metadata.TypeEx)"/>
            instruction.
            </summary>
            <param name="newArray">The new array.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.BeforeUnboxAny(System.Boolean,System.Int32)">
            <summary>
            This method is called just before an <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Unbox_Any(Microsoft.ExtendedReflection.Metadata.TypeEx)"/>
            instruction to check if the box is null.
            </summary>
            <param name="isBoxNull"></param>
            <param name="codeLabel">code label</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AfterBox(System.Boolean,System.Object,System.Int32)">
            <summary>
            This method is called just after a <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Box(Microsoft.ExtendedReflection.Metadata.TypeEx)"/>
            instruction.
            </summary>
            <param name="isBoxNull"></param>
            <param name="boxIfAvailable"></param>
            <param name="codeLabel">code label</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AtGuardedStoreFallthrough(System.Int32)">
            <summary>
            This method is called immediately after a guarded store
            falls through, i.e. does not throw an exception.
            </summary>
            <remarks>
            A store may be guarded when it is only executed after
            other conditions are checked, e.g. whether the receiver
            is not null.
            </remarks>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.BeforeLocAlloc(System.UIntPtr)">
            <summary>
            This method is called just before an <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Localloc"/>
            instruction.
            </summary>
            <param name="size">number of bytes to be allocated on stack</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.AfterLocAlloc(System.UIntPtr)">
            <summary>
            This method is called just after an <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Localloc"/>
            instruction.
            </summary>
            <param name="addr">actual memory address of allocated stack memory</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.LoadedValue``1(``0)">
            <summary>
            Delivers loaded value. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.LoadedValueObject(System.Object)">
            <summary>
            Delivers loaded value. 
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.LoadedValueByRef``1(``0@)">
            <summary>
            Delivers loaded value. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.LoadedValuePtr(System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Delivers loaded value. 
            </summary>
            <param name="value">value</param>
            <param name="pointerType">pointer type</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.LoadedValueTypedReference(System.TypedReference)">
            <summary>
            Delivers loaded value. 
            </summary>
            <param name="typedReference">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.LoadedValueNotSupported">
            <summary>
            Delivers loaded value. 
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.OriginalValue``1(``0)">
            <summary>
            Delivers Original value. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.OriginalValueObject(System.Object)">
            <summary>
            Delivers Original value. 
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.OriginalValueByRef``1(``0@)">
            <summary>
            Delivers Original value. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.OriginalValuePtr(System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Delivers Original value. 
            </summary>
            <param name="value">value</param>
            <param name="pointerType">pointer type</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.OriginalValueTypedReference(System.TypedReference)">
            <summary>
            Delivers Original value. 
            </summary>
            <param name="typedReference">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.OriginalValueNotSupported">
            <summary>
            Delivers Original value. 
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.StoredValue``1(``0)">
            <summary>
            Delivers Stored value. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.StoredValueObject(System.Object)">
            <summary>
            Delivers Stored value. 
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.StoredValueByRef``1(``0@)">
            <summary>
            Delivers Stored value. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.StoredValuePtr(System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Delivers Stored value. 
            </summary>
            <param name="value">value</param>
            <param name="pointerType">pointer type</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.StoredValueTypedReference(System.TypedReference)">
            <summary>
            Delivers Stored value. 
            </summary>
            <param name="typedReference">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.StoredValueNotSupported">
            <summary>
            Delivers Stored value. 
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Load(System.UIntPtr,System.UInt32,System.Int32,System.Boolean)">
            <summary>
            This method is called when a (non-local) memory location is loaded from.
            </summary>
            <param name="location">An identifier of the memory address.</param>
            <param name="size">The size of the data loaded.</param>
            <param name="codeLabel">code label</param>
            <param name="volatile">indicates if the access is volatile</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Store(System.UIntPtr,System.UInt32,System.Int32,System.Boolean)">
            <summary>
            This method is called when a (non-local) memory location is stored to.
            </summary>
            <param name="location">An identifier of the memory address.</param>
            <param name="size">The size of the data stored.</param>
            <param name="codeLabel">code label</param>
            <param name="volatile">indicates if the access is volatile</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Nop">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Nop"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Break">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Break"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldarg_0">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldarg_0"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldarg_1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldarg_1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldarg_2">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldarg_2"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldarg_3">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldarg_3"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldloc_0">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldloc_0"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldloc_1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldloc_1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldloc_2">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldloc_2"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldloc_3">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldloc_3"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stloc_0">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stloc_0"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stloc_1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stloc_1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stloc_2">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stloc_2"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stloc_3">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stloc_3"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldnull">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldnull"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldc_I4_M1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldc_I4_0">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_0"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldc_I4_1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldc_I4_2">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_2"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldc_I4_3">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_3"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldc_I4_4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldc_I4_5">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_5"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldc_I4_6">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_6"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldc_I4_7">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_7"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldc_I4_8">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_8"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldc_I4(System.Int32)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldc_I8(System.Int64)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldc_I8"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldc_R4(System.Single)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldc_R4"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldc_R8(System.Double)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldc_R8"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Dup">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Dup"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Pop">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Pop"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Jmp(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Jmp"/>
            </summary>
            <param name="method">jumpee</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Call(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Call"/>
            </summary>
            <param name="method">callee</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Calli(System.Int32)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Calli"/>
            </summary>
            <param name="signatureToken">metadata token of signature in declaring module of current method</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ret">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ret"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Br">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Br"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Brfalse">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Brfalse"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Brtrue">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Brtrue"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Beq">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Beq"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Bge">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Bge"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Bgt">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Bgt"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ble">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ble"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Blt">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Blt"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Bne_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Bne_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Bge_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Bge_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Bgt_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Bgt_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ble_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ble_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Blt_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Blt_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Switch(System.Int32)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Switch"/>
            </summary>
            <param name="targetsCount">number of switch targets</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldind_I1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldind_I1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldind_U1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldind_U1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldind_I2">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldind_I2"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldind_U2">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldind_U2"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldind_I4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldind_I4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldind_U4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldind_U4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldind_I8">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldind_I8"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldind_I">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldind_I"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldind_R4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldind_R4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldind_R8">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldind_R8"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldind_Ref">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldind_Ref"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stind_Ref">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stind_Ref"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stind_I1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stind_I1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stind_I2">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stind_I2"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stind_I4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stind_I4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stind_I8">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stind_I8"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stind_R4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stind_R4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stind_R8">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stind_R8"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Add">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Add"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Sub">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Sub"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Mul">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Mul"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Div">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Div"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Div_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Div_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Rem">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Rem"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Rem_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Rem_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.And">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.And"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Or">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Or"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Xor">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Xor"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Shl">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Shl"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Shr">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Shr"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Shr_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Shr_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Neg">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Neg"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Not">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Not"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_I1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_I1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_I2">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_I2"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_I4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_I4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_I8">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_I8"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_R4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_R4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_R8">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_R8"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_U4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_U4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_U8">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_U8"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Callvirt(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>
            </summary>
            <param name="method">callee before vtable lookup</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.CallvirtType(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            This method is called after <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Callvirt(Microsoft.ExtendedReflection.Metadata.Method)"/> to indicate the 
            actual type of the receiver object.
            </summary>
            <remarks>
            This method is only called when the receiver was not null,
            and an exception is thrown otherwise.
            When the receiver is a boxed value, 
            <paramref name="type"/> is the value type.
            When a constrained call is performed, 
            the type is the type pointed to by the receiver pointer.
            When the receiver is a remote object, <paramref name="type"/>
            might not be a class but an interface.
            </remarks>
            <param name="codeLabel">code label</param>
            <param name="type">actual receiver type</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.CallReceiver(System.Object)">
            <summary>
            This method is called after <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Call(Microsoft.ExtendedReflection.Metadata.Method)"/>, <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Callvirt(Microsoft.ExtendedReflection.Metadata.Method)"/> and then after <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.CallvirtType(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)"/>,
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Calli(System.Int32)"/> and <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Newobj(Microsoft.ExtendedReflection.Metadata.Method)"/> to indicate the
            actual receiver object.
            </summary>
            <remarks>
            When the receiver object is <code>null</code> for a <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Callvirt(Microsoft.ExtendedReflection.Metadata.Method)"/>,
            this method is not called.
            </remarks>
            <param name="receiver">not null</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.FieldReceiver(System.Object)">
            <summary>
            This method is called after <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldfld(Microsoft.ExtendedReflection.Metadata.Field)"/> and <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldflda(Microsoft.ExtendedReflection.Metadata.Field)"/> and <see cref="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stfld(Microsoft.ExtendedReflection.Metadata.Field)"/>
            to indicate the receiver object.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.ArrayIndex(System.Int32)">
            <summary>
            This method is called before array access instructions.  In case of multi-dim arrays, 
            a sequence of invocations of this method report the array indices in the increasing order of
            rank.
            </summary>
            <param name="index">An index used in the access.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Cpobj(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Cpobj"/>
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldobj(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldobj"/>
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldstr(System.String)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldstr"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Newobj(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Newobj"/>
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Castclass(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Castclass"/>
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Isinst(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Isinst"/>
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_R_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_R_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Unbox(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Unbox"/>
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Throw">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Throw"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldfld"/>
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldflda(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldflda"/>
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stfld"/>
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldsfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldsfld"/>
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldsflda(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldsflda"/>
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stsfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stsfld"/>
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stobj(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stobj"/>
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_I1_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_I2_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_I4_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_I8_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_U1_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_U2_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_U4_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_U8_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_I_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_U_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Box(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Box"/>
            </summary>
            <param name="type">type</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Newarr(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Newarr"/>
            </summary>
            <param name="type">type</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldlen">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldlen"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldelema(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldelema"/>
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldelem_I1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldelem_U1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldelem_I2">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I2"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldelem_U2">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldelem_I4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldelem_U4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldelem_I8">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I8"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldelem_I">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldelem_R4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_R4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldelem_R8">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_R8"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldelem_Ref">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldelem_Ref"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stelem_I">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stelem_I"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stelem_I1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stelem_I1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stelem_I2">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stelem_I2"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stelem_I4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stelem_I4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stelem_I8">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stelem_I8"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stelem_R4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stelem_R4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stelem_R8">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stelem_R8"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stelem_Ref">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stelem_Ref"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldelem(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldelem"/>
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stelem(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stelem"/>
            </summary>
            <param name="type">type</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Unbox_Any(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Unbox_Any"/>
            </summary>
            <param name="type">type</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_I1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_I2">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_I4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_I8">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_U1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_U2">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_U4">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_U8">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Refanyval(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Refanyval"/>
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ckfinite">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ckfinite"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Mkrefany(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Mkrefany"/>
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldtoken(Microsoft.ExtendedReflection.Metadata.MetadataEntity)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken"/>
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_U2">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_U2"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_U1">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_U1"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_I">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_I"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_I">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_Ovf_U">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Add_Ovf">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Add_Ovf"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Add_Ovf_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Mul_Ovf">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Mul_Ovf_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Sub_Ovf">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Sub_Ovf_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Endfinally">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Endfinally"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Leave">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Leave"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stind_I">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stind_I"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Conv_U">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Conv_U"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Arglist">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Arglist"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ceq">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ceq"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Cgt">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Cgt"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Cgt_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Cgt_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Clt">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Clt"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Clt_Un">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Clt_Un"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldftn(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldftn"/>
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldvirtftn(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldvirtftn"/>
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldarg(System.Int32)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldarg"/>
            </summary>
            <param name="argumentIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldarga(System.Int32)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldarga"/>
            </summary>
            <param name="argumentIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Starg(System.Int32)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Starg"/>
            </summary>
            <param name="argumentIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldloc(System.Int32)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldloc"/>
            </summary>
            <param name="localIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Ldloca(System.Int32)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Ldloca"/>
            </summary>
            <param name="localIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Stloc(System.Int32)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Stloc"/>
            </summary>
            <param name="localIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Localloc">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Localloc"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Endfilter">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Endfilter"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Unaligned(System.Int32)">
            <summary>
            Regular prefix; <see cref="F:System.Reflection.Emit.OpCodes.Unaligned"/>
            </summary>
            <param name="alignment"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Volatile">
            <summary>
            Regular prefix; <see cref="F:System.Reflection.Emit.OpCodes.Volatile"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Tailcall">
            <summary>
            Regular prefix; Turns a 
            <see cref="F:System.Reflection.Emit.OpCodes.Call"/>
            into a
            <see cref="F:System.Reflection.Emit.OpCodes.Tailcall"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Initobj(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Initobj"/>
            </summary>
            <param name="type">type</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Constrained(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular prefix; <see cref="F:System.Reflection.Emit.OpCodes.Constrained"/>
            </summary>
            <param name="type">type</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Cpblk">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Cpblk"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Initblk">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Initblk"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Rethrow">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Rethrow"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Sizeof(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Sizeof"/>
            </summary>
            <param name="type">type</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Refanytype">
            <summary>
            Regular instruction; <see cref="F:System.Reflection.Emit.OpCodes.Refanytype"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Readonly">
            <summary>
            Regular prefix; <see cref="F:System.Reflection.Emit.OpCodes.Readonly"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.V_Array_New(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Virtual instruction; create md-array.
            </summary>
            <param name="method">constructor of md-array</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.V_Array_Get(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Virtual instruction; get md-array element.
            </summary>
            <param name="method">md-array get element method</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.V_Array_Set(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Virtual instruction; set md-array element.
            </summary>
            <param name="method">md-array set element method</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.V_Array_Addr(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Virtual instruction; get md-array element adrress.
            </summary>
            <param name="method">md-array address element method</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Initarr(System.Array)">
            <summary>
            Substitution instruction; init array from concrete element values.
            </summary>
            <remarks>
            Stack transition: array, dummy -> 
            </remarks>
            <param name="elementValues"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Object_MemberwiseClone(System.Object)">
            <summary>
            Substitution instruction; clone object memberwise.
            </summary>
            <remarks>
            Stack transition: object -> object
            </remarks>
            <param name="object"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Array_GetLength(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Substitution instruction; get length of particular dimension
            </summary>
            <remarks>
            Stack transition: array, dimension -> length
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Array_get_LongLength(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Substitution instruction; get length of array
            </summary>
            <remarks>
            Stack transition: array -> I8-length
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Array_get_Length(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Substitution instruction; get length of array
            </summary>
            <remarks>
            Stack transition: array -> I4-length
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Array_GetLowerBound(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Substitution instruction; get lower bound of particular dimension
            </summary>
            <remarks>
            Stack transition: array, dimension -> lower-bound
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Array_GetUpperBound(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Substitution instruction; get upper bound of particular dimension
            </summary>
            <remarks>
            Stack transition: array, dimension -> lower-bound
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_Derive(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Shadow instruction; derives formula with respect to variable
            </summary>
            <param name="formulaType"></param>
            <returns></returns>
            <remarks>
            Stack transition: formula, variable : double -> double
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_ToString(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Boolean)">
            <summary>
            Shadow instruction; turns a value into a string
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="raw"></param>
            <returns></returns>
            <remarks>
            Stack transition: value -&gt; string
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_GetRelevantInputNames(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Shadow instruction; turns a value into an array of string
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns></returns>
            <remarks>
            Stack transition: value -&gt; string[]
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_IsSymbolic(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Shadow instruction; check whether a value has symbolic information attached to it
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns></returns>
            <remarks>
            Stack transition: value -&gt; bool
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_GetPathConditionString(System.Boolean)">
            <summary>
            Shadow instruction; pushes a textual representation of the path condition on the stack
            </summary>
            <returns></returns>
            <remarks>
            Stack transition: -> string
            </remarks>
            <param name="raw"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_Minimize">
            <summary>
            Shadow instruction; request a minimization of the I4/I8 value on the stack
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_IsInArray(System.IntPtr)">
            <summary>
            Shadow instruction; builds condition representing whether a value is contained in the range of a (fixed-size) array
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_WrapConcreteSymbolic``1(__Auxiliary.IConcreteSymbolicProcessor{``0},``0)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="data"></param>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_UnwrapConcreteSymbolic``1(__Auxiliary.IConcreteSymbolicProcessor{``0},System.Object)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="data"></param>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_IsTypedPointer(Microsoft.ExtendedReflection.Metadata.TypeEx,System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The Pointer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_TypedMalloc(Microsoft.ExtendedReflection.Metadata.TypeEx,System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The Pointer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_TypedFree(Microsoft.ExtendedReflection.Metadata.TypeEx,System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The Pointer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_IsAllocated(System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="ptr">The Pointer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Array_Copy(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Shadow instruction; copy content of one array into another.
            </summary>
            <remarks>
            Stack transition: array, index, array, index, count -> 
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Array_GetValue(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Shadow instruction; get array element and box
            </summary>
            <remarks>
            Stack transition: array, index -> (boxed) value
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Array_SetValue(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Shadow instruction; set array element, unbox value if necessary
            </summary>
            <remarks>
            Stack transition: array, value, index -> 
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Buffer_TryFastMemCopy">
            <summary>
            Shadow instruction; copy elements if possible
            </summary>
            <remarks>
            Stack transition: src, dest, len -> 
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Reflection_GetFieldValue(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Shadow instruction; get value of field
            </summary>
            <remarks>
            Stack transition: fieldInfo, obj -> (boxed) value
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Reflection_IsAssignableFrom">
            <summary>
            Shadow instruction; get value of field
            </summary>
            <remarks>
            Stack transition: packed targetType, packed sourceType -> bool
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Reflection_GetObjectType(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Shadow instruction; get the type of an object
            </summary>
            <remarks>
            Stack transition: object -> packed type
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Reflection_GetType(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Shadow instruction; converts a reflection type into a packed type
            </summary>
            <remarks>
            Stack transition: reflection type -> packed type
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Reflection_GetBoxValueType">
            <summary>
            Shadow instruction; given a box type, get the value type 
            </summary>
            <remarks>
            Stack transition: packed type -> packed type
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Reflection_SetFieldValue(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Shadow instruction; set value of field
            </summary>
            <remarks>
            Stack transition: fieldInfo, obj, (boxed) value -> 
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Reflection_SetTypedAndNamedFieldValue``1(System.Object,System.String,``0)">
            <summary>
            Shadow instruction; set value of field
            </summary>
            <remarks>
            Stack transition: object, name, value -> 
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_BeforeReflectionCall(Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Shadow instruction; prepares a reflection call
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Reflection_NextArgument">
            <summary>
            Shadow instruction; prepares a reflection call
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Reflection_NextByRefArgument">
            <summary>
            Shadow instruction; prepares a reflection call
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_ReflectionCall">
            <summary>
            Shadow instruction; reflection call
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_AfterReflectionCall(System.Object,System.Boolean)">
            <summary>
            Shadow instruction; prepares a reflection call
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_LoopVar(Microsoft.ExtendedReflection.Metadata.Layout,System.String)">
            <summary>
            Shadow instruction; creates symbol representing a loop variable
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Environment_get_TickCount">
            <summary>
            Substitution instruction; get (non-det.) time
            </summary>
            <remarks>
            Stack transition: -> time
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_String_get_Length">
            <summary>
            Substitution instruction; get string length
            </summary>
            <remarks>
            Stack transition: string -> length
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Interlocked_Exchange(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Substitution instruction; interlocked exchange
            </summary>
            <remarks>
            Stack transition: addr, value -> value
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Interlocked_CompareExchange(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Substitution instruction; interlocked compare exchange
            </summary>
            <remarks>
            Stack transition: addr, value, comparand -> value
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Interlocked_Increment(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Substitution instruction; interlocked increment
            </summary>
            <remarks>
            Stack transition: addr -> value
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Interlocked_Decrement(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Substitution instruction; interlocked decrement
            </summary>
            <remarks>
            Stack transition: addr -> value
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Interlocked_Read(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Substitution instruction; interlocked read
            </summary>
            <remarks>
            Stack transition: addr -> value
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Interlocked_Add(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Substitution instruction; interlocked add
            </summary>
            <remarks>
            Stack transition: addr value -> value
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_String_get_Chars">
            <summary>
            Substitution instruction; get string character
            </summary>
            <remarks>
            Stack transition: string, index -> char
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_String_ToCharArray">
            <summary>
            Substitution instruction; turn string into array of characters
            </summary>
            <remarks>
            Stack transition: string -> array
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_String_ToCharArray(System.Int32,System.Int32)">
            <summary>
            Substitution instruction; turn string into array of characters
            </summary>
            <param name="start"></param>
            <param name="length"></param>
            <remarks>
            Stack transition: string, start, length -> array
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_String_FromCharArray">
            <summary>
            Substitution instruction; turn array of characters into string
            </summary>
            <remarks>
            Stack transition: array -> string
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_String_FromCharArray(System.Int32,System.Int32)">
            <summary>
            Substitution instruction; creates a string
            </summary>
            <remarks>
            Stack transition: array, startIndex, length -> string
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_String_FromCharCount">
            <summary>
            Substitution instruction; creates a string
            </summary>
            <remarks>
            Stack transition: char, count -> string
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_String_IsNullOrEmpty(System.String)">
            <summary>
            Substitution instruction; checks whether string is null or empty.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Ldptr(System.IntPtr)">
            <summary>
            Substitution instruction; load pointer within a defined memory region
            </summary>
            <param name="value"></param>
            <remarks>
            Stack transition: dummy -> value
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_EvaluateInSnapshot``1(System.Object,System.Delegate)">
            <summary>
            Evaluates an expression in a state snapshot
            </summary>
            <typeparam name="T"></typeparam>
            <param name="snapshot">The snapshot.</param>
            <param name="expr">The expr.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.S_Auxiliary_Symbolic_Snapshot">
            <summary>
            Create a snapshot of the state for evaluating old expressions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.Destroy">
            <summary>
            Destroy this thread.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor.EnsureStack(System.Int32)">
            <summary>
            Make sure that there are at least <see>count</see> many free slots on the evaluation stack of the current frame,
            by possibly enlarging the stack.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.UnwindMethod(System.Object)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.LeaveMethod">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.TryGetCurrentMethod(Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to get current method.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ReceiverObjectArgument(System.Object)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="receiverObject"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Argument``1(System.Int32,``0)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ArgumentObject(System.Int32,System.Object)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ArgumentByRef``1(System.Int32,``0@)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ArgumentPtr(System.Int32,System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <param name="pointerType">can be a function pointer as well</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ArgumentTypedReference(System.Int32,System.TypedReference)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="typedReference">value</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ArgumentNotSupported(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index"></param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ReturnArgument``1(System.Int32,``0)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ReturnArgumentObject(System.Int32,System.Object)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ReturnArgumentByRef``1(System.Int32,``0@)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ReturnArgumentPtr(System.Int32,System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <param name="pointerType">can be a function pointer as well</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ReturnArgumentTypedReference(System.Int32,System.TypedReference)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="typedReference">value</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ReturnArgumentNotSupported(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index"></param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtBranchTarget(Microsoft.ExtendedReflection.Monitoring.BranchTargetKind)">
            <summary>
            This method is called
            when execution reaches a branch target.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtOffset(System.Int32)">
            <summary>
            This method is called when an offset is reached. The method is not called for all offsets.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtConditionalBranchFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtConditionalBranchTarget(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtSwitchFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtSwitchTarget(System.Int32,System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">switch selector value</param>
            <param name="codeLabel">The code label.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.RaiseException(System.Object,System.Int32)">
            <summary>
            This method is called when an exception occurs, either
            because it was thrown by a called method, or because it was trigged
            by some other instruction.
            </summary>
            <remarks>
            When an exception occurs, one of the following specific methods is called:
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.StartExceptionHandler(System.Object,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)"/>, 
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtDereferenceNullReferenceException(System.NullReferenceException,System.Int32)"/>, 
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtIndexedAccessIndexOutOfRangeException(System.IndexOutOfRangeException,System.Int32)"/>,
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtDivisionDivideByZeroException(System.DivideByZeroException,System.Int32)"/>,
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtCastInvalidCastException(System.InvalidCastException,System.Int32)"/>,
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtCheckedOperationOverflowException(System.OverflowException,System.Int32)"/>,
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtArrayDestructionArrayTypeMismatchException(System.ArrayTypeMismatchException,System.Int32)"/>,
            <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtCallException(System.Object,System.Int32)"/>.
            By default, they call this method.
            Because all auxiliary exception handlers introduced by the instrumentation
            rethrow the exception afterwards, the same exception might be reported
            more than once.
            </remarks>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtDereferenceFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtDereferenceNullReferenceException(System.NullReferenceException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.BeforeThrow(System.Object,System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exceptionObject"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtIndexedAccessFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtIndexedAccessIndexOutOfRangeException(System.IndexOutOfRangeException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtDivisionFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtDivisionDivideByZeroException(System.DivideByZeroException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtCastFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtCastInvalidCastException(System.InvalidCastException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtCheckedOperationFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtCheckedOperationOverflowException(System.OverflowException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtArrayDestructionFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtArrayDestructionArrayTypeMismatchException(System.ArrayTypeMismatchException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtArgumentOutOfRangeFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtArgumentOutOfRangeException(System.ArgumentOutOfRangeException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtArgumentNullFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtArgumentNullException(System.ArgumentNullException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.StartFinallyHandler(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.StartFaultHandler(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.StartFilter(System.Object,System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.BeforeEndFilter(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="verdict"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.StartExceptionHandler(System.Object,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exception"></param>
            <param name="type"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.MissedExceptionHandler(System.Object,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exception"></param>
            <param name="type"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.CallResult``1(``0)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.CallResultPtr(System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
            <param name="pointerType"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.CallResultTypedReference(System.TypedReference)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="typedReference"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.CallResultObject(System.Object)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.CallResultByRef``1(``0@)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.CallResultNotSupported">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtCallFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtCallException(System.Object,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.BeforeAnyCall(System.Int32)">
            <summary>
            This method is called before a call, callvirt, calli, or newobj instruction.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.VarArgTypes(Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="varArgTypes"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.BeforeNewarr(System.UIntPtr,System.Int32)">
            <summary>
            This method is called just before a <code>newarr</code>
            instruction.
            </summary>
            <param name="size"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.BeforeNewobj(System.Int32)">
            <summary>
            This method is called just before a <code>newobj</code>
            instruction.
            </summary>
            <param name="codeLabel">code label</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AfterNewobj``1(``0)">
            <summary>
            This method is called just after a <code>newobj</code>
            instruction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AfterNewobjObject(System.Object)">
            <summary>
            This method is called just after a <code>newobj</code>
            instruction.
            </summary>
            <param name="newObject">The new object.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AfterNewobjNotSupported">
            <summary>
            This method is called just after a <code>newobj</code>
            instruction.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AfterNewarr(System.Object)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="newArray">The new array.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.BeforeUnboxAny(System.Boolean,System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="isBoxNull"></param>
            <param name="codeLabel">code label</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AfterBox(System.Boolean,System.Object,System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="isBoxNull"></param>
            <param name="boxIfAvailable"></param>
            <param name="codeLabel">codeLabel</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AtGuardedStoreFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.BeforeLocAlloc(System.UIntPtr)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.AfterLocAlloc(System.UIntPtr)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="addr"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.LoadedValue``1(``0)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.LoadedValueObject(System.Object)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.LoadedValueByRef``1(``0@)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.LoadedValuePtr(System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
            <param name="pointerType">can be a function pointer as well</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.LoadedValueTypedReference(System.TypedReference)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="typedReference"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.LoadedValueNotSupported">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.OriginalValue``1(``0)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.OriginalValueObject(System.Object)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.OriginalValueByRef``1(``0@)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.OriginalValuePtr(System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
            <param name="pointerType">can be a function pointer as well</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.OriginalValueTypedReference(System.TypedReference)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="typedReference"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.OriginalValueNotSupported">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.StoredValue``1(``0)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.StoredValueObject(System.Object)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.StoredValueByRef``1(``0@)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.StoredValuePtr(System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
            <param name="pointerType">can be a function pointer as well</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.StoredValueTypedReference(System.TypedReference)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="typedReference"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.StoredValueNotSupported">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Load(System.UIntPtr,System.UInt32,System.Int32,System.Boolean)">
            <summary>
            This method is called when a (non-local) memory location is loaded from.
            </summary>
            <param name="location">An identifier of the memory address.</param>
            <param name="size">The size of the data loaded.</param>
            <param name="codeLabel">code label</param>
            <param name="volatile">indicates if the access is volatile</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Store(System.UIntPtr,System.UInt32,System.Int32,System.Boolean)">
            <summary>
            This method is called when a (non-local) memory location is stored to.
            </summary>
            <param name="location">An identifier of the memory address.</param>
            <param name="size">The size of the data stored.</param>
            <param name="codeLabel">code label</param>
            <param name="volatile">indicates if the access is volatile</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Break">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldnull">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldc_I4(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldc_I8(System.Int64)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldc_R4(System.Single)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldc_R8(System.Double)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Dup">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Pop">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Jmp(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Call(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Calli(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="signatureToken"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ret">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Br">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ConditionalBranch(System.Boolean)">
            <summary>
            Performs a conditional branch.
            </summary>
            <param name="sign">whether to branch</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ConditionalBranch(Microsoft.ExtendedReflection.Metadata.BinaryOperator,System.Boolean,System.Boolean)">
            <summary>
            Performs a branch based on the value of two arguments on the evaluation stack.
            </summary>
            <param name="binaryOperator">operator</param>
            <param name="swapped">whether to swap arguments</param>
            <param name="sign">whether condition is positive</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Switch(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="targetsCount"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldind(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Metadata.StackWidening)">
            <summary>
            Performs an indirect load.
            </summary>
            <param name="layout"></param>
            <param name="widening"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Stind(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Performs indirect store.
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Arithmetic(Microsoft.ExtendedReflection.Metadata.BinaryOperator)">
            <summary>
            Performs an arithmetic computation.
            </summary>
            <param name="binaryOperator"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ArithmeticWithDivisionCheck(Microsoft.ExtendedReflection.Metadata.BinaryOperator)">
            <summary>
            Performs a binary operation with division-by-zero check.
            (This includes the division, which may perform an overflow check.)
            </summary>
            <param name="binaryOperator"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Arithmetic(Microsoft.ExtendedReflection.Metadata.UnaryOperator)">
            <summary>
            Performs a unary operation.
            </summary>
            <param name="unaryOperator"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Callvirt(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.CallvirtType(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.CallReceiver(System.Object)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="receiver"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.FieldReceiver(System.Object)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="receiver"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ArrayIndex(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Cpobj(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldstr(System.String)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Newobj(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Castclass(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Isinst(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Unbox(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Throw">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldflda(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Stfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldsfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldsflda(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Stsfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ArithmeticWithOverflowCheck(Microsoft.ExtendedReflection.Metadata.UnaryOperator,System.Boolean)">
            <summary>
            Performs a unary operation with overflow check.
            </summary>
            <param name="unaryOperator"></param>
            <param name="sourceIsUnsigned"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Box(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Newarr(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type">type</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldlen">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldelema(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldelem(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Metadata.StackWidening)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="layout"></param>
            <param name="widening"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Stelem(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Performs a store-array-element operation.
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Stelem_Ref">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Stelem(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Unbox_Any(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Refanyval(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ckfinite">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Mkrefany(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldtoken(Microsoft.ExtendedReflection.Metadata.GenericMethod)">
            <summary>
            Loads a generic method token.
            </summary>
            <param name="genericMethod"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldtoken(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Loads a method token.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldtoken(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Loads a type definition.
            </summary>
            <param name="typeDefinition"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldtoken(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Loads a type token.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldtoken(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Loads a field token.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.ArithmeticWithOverflowCheck(Microsoft.ExtendedReflection.Metadata.BinaryOperator,System.Boolean)">
            <summary>
            Performs a binary operation with overflow check.
            (This does not include division.)
            </summary>
            <param name="binaryOperator"></param>
            <param name="unsignedOperands"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Endfinally">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Leave">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Arglist">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Compare(Microsoft.ExtendedReflection.Metadata.BinaryOperator,System.Boolean)">
            <summary>
            Compares two elements on the evaluation stack.
            </summary>
            <param name="binaryOperator"></param>
            <param name="swap"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldftn(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldvirtftn(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldarg(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="argumentIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldarga(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="argumentIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Starg(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="argumentIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldloc(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="localIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldloca(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="localIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Stloc(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="localIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Localloc">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Endfilter">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Unaligned(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="alignment"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Volatile">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Tailcall">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Initobj(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Constrained(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Cpblk">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Initblk">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Rethrow">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Refanytype">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Readonly">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Newarr(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32,System.Boolean)">
            <summary>
            Creates a new md-array.
            </summary>
            <param name="type">element type</param>
            <param name="rank"></param>
            <param name="lowerBoundsGiven"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldelem(Microsoft.ExtendedReflection.Metadata.Layout,System.Int32,Microsoft.ExtendedReflection.Metadata.StackWidening)">
            <summary>
            Loads an element of an md-array.
            </summary>
            <param name="layout"></param>
            <param name="rank"></param>
            <param name="widening"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Stelem(Microsoft.ExtendedReflection.Metadata.Layout,System.Int32)">
            <summary>
            Stores an element of an md-array.
            </summary>
            <param name="layout"></param>
            <param name="rank"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Ldelema(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Loads the address of an md-array element.
            </summary>
            <param name="type"></param>
            <param name="rank"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Initarr(System.Array)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="elementValues"></param>
            
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Object_MemberwiseClone(System.Object)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Array_get_LongLength(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Array_get_Length(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Array_GetLength(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Array_GetLowerBound(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Array_GetUpperBound(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Array_GetValue(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Array_SetValue(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Buffer_TryFastMemCopy">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Reflection_GetFieldValue(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Reflection_SetFieldValue(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Reflection_SetTypedAndNamedFieldValue``1(System.Object,System.String,``0)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Reflection_IsAssignableFrom">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Reflection_GetObjectType(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Reflection_GetType(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Reflection_GetBoxValueType">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_IsSymbolic(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns></returns>
            <remarks>
            Stack transition: value -&gt; string
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_Derive(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Shadow instruction; derives formula with respect to variable
            </summary>
            <param name="formulaType"></param>
            <returns></returns>
            <remarks>
            Stack transition: formula, variable: double -&gt; double
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_ToString(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Boolean)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="raw"></param>
            <returns></returns>
            <remarks>
            Stack transition: value -&gt; string
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_GetRelevantInputNames(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns></returns>
            <remarks>
            Stack transition: value -&gt; string[]
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_GetPathConditionString(System.Boolean)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <returns></returns>
            <remarks>
            Stack transition: -&gt; string
            </remarks>
            <param name="raw"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_IsInArray(System.IntPtr)">
            <summary>
            Shadow instruction; builds condition representing whether a value is contained in the range of a (fixed-size) array
            </summary>
            <remarks>
            Stack transition: value, array -&gt; bool
            </remarks>
            <param name="count">number of elements in array</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_WrapConcreteSymbolic``1(__Auxiliary.IConcreteSymbolicProcessor{``0},``0)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="data"></param>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_UnwrapConcreteSymbolic``1(__Auxiliary.IConcreteSymbolicProcessor{``0},System.Object)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="data"></param>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_IsTypedPointer(Microsoft.ExtendedReflection.Metadata.TypeEx,System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The PTR.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_IsAllocated(System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="ptr">The Pointer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_TypedMalloc(Microsoft.ExtendedReflection.Metadata.TypeEx,System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The Pointer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_TypedFree(Microsoft.ExtendedReflection.Metadata.TypeEx,System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The Pointer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_EvaluateInSnapshot``1(System.Object,System.Delegate)">
            <summary>
            Evaluates an expression in a state snapshot
            </summary>
            <typeparam name="T"></typeparam>
            <param name="snapshot">The snapshot.</param>
            <param name="expr">The expr.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_Snapshot">
            <summary>
            Create a snapshot of the state for evaluating old expressions.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Symbolic_Minimize">
            <summary>
            Shadow instruction; request a minimization of the value on the stack
            </summary>
            <remarks>
            Stack transition: value -> empty
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Array_Copy(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_BeforeReflectionCall(Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Reflection_NextArgument">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Auxiliary_Reflection_NextByRefArgument">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_ReflectionCall">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_AfterReflectionCall(System.Object,System.Boolean)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_LoopVar(Microsoft.ExtendedReflection.Metadata.Layout,System.String)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Environment_get_TickCount">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_String_get_Length">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Interlocked_Exchange(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Interlocked_CompareExchange(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Interlocked_Increment(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Interlocked_Decrement(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Interlocked_Read(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Interlocked_Add(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_String_get_Chars">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_String_ToCharArray">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_String_ToCharArray(System.Int32,System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_String_FromCharArray">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_String_FromCharArray(System.Int32,System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_String_FromCharCount">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_String_IsNullOrEmpty(System.String)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.S_Ldptr(System.IntPtr)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.Destroy">
            <summary>
            Destroy this thread.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase.EnsureStack(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IPathComponentElement">
            <summary>
            An element of a path component.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IPathComponentElement.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.State">
            <summary>
            State
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.PathConditionBuilder">
            <summary>
            Path condition builder
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.#ctor(Microsoft.ExtendedReflection.ComponentModel.IPathComponent,Microsoft.ExtendedReflection.Interpretation.States.IThread)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="host">The host.</param>
            <param name="thread">The thread.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.TryGetCurrentMethod(Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to get current method.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.ReceiverObjectArgument(System.Object)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="receiverObject"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Argument``1(System.Int32,``0)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.ArgumentObject(System.Int32,System.Object)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.ArgumentByRef``1(System.Int32,``0@)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.ArgumentPtr(System.Int32,System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <param name="pointerType">can be a function pointer as well</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.ArgumentTypedReference(System.Int32,System.TypedReference)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="typedReference">value</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.ArgumentNotSupported(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index"></param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtBranchTarget(Microsoft.ExtendedReflection.Monitoring.BranchTargetKind)">
            <summary>
            This method is called
            when execution reaches a branch target.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtOffset(System.Int32)">
            <summary>
            This method is called when an offset is reached. The method is not called for all offsets.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtConditionalBranchFallthrough(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtConditionalBranchTarget(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtSwitchFallthrough(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel">The code label.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtSwitchTarget(System.Int32,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="codeLabel">The code label.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.RaiseException(System.Object,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtDereferenceFallthrough(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtDereferenceNullReferenceException(System.NullReferenceException,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtIndexedAccessFallthrough(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtIndexedAccessIndexOutOfRangeException(System.IndexOutOfRangeException,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtDivisionFallthrough(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtDivisionDivideByZeroException(System.DivideByZeroException,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtCastFallthrough(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtCastInvalidCastException(System.InvalidCastException,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtCheckedOperationFallthrough(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtCheckedOperationOverflowException(System.OverflowException,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exception">overflow</param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtArrayDestructionFallthrough(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtArrayDestructionArrayTypeMismatchException(System.ArrayTypeMismatchException,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtArgumentOutOfRangeFallthrough(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtArgumentOutOfRangeException(System.ArgumentOutOfRangeException,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtArgumentNullFallthrough(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtArgumentNullException(System.ArgumentNullException,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.StartFinallyHandler(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.StartFaultHandler(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.StartFilter(System.Object,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exceptionObject"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.BeforeEndFilter(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="verdict"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.StartExceptionHandler(System.Object,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exceptionObject"></param>
            <param name="type"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.MissedExceptionHandler(System.Object,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exceptionObject"></param>
            <param name="type"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.CallResult``1(``0)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.CallResultPtr(System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
            <param name="pointerType"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.CallResultTypedReference(System.TypedReference)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="typedReference"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.CallResultObject(System.Object)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.CallResultByRef``1(``0@)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.CallResultNotSupported">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtCallFallthrough(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtCallException(System.Object,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exceptionObject"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.VarArgTypes(Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="varArgTypes"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.BeforeThrow(System.Object,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exceptionObject"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.BeforeNewobj(System.Int32)">
            <summary>
            This method is called just before a <code>newobj</code>
            instruction.
            </summary>
            <param name="codeLabel">code label</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AfterNewobj``1(``0)">
            <summary>
            This method is called just after a <code>newobj</code>
            instruction.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AfterNewobjObject(System.Object)">
            <summary>
            This method is called just after a <code>newobj</code>
            instruction.
            </summary>
            <param name="newObject">The new object.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AfterNewobjNotSupported">
            <summary>
            This method is called just after a <code>newobj</code>
            instruction.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.BeforeNewarr(System.UIntPtr,System.Int32)">
            <summary>
            This method is called just before a <code>newarr</code>
            instruction.
            </summary>
            <param name="size"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AfterNewarr(System.Object)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="newArray">The new array.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.BeforeUnboxAny(System.Boolean,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="isBoxNull">if set to <c>true</c> [is box null].</param>
            <param name="codeLabel">The code label.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AfterBox(System.Boolean,System.Object,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="isBoxNull"></param>
            <param name="boxIfAvailable"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AtGuardedStoreFallthrough(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.BeforeLocAlloc(System.UIntPtr)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.AfterLocAlloc(System.UIntPtr)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="addr"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.UnwindMethod(System.Object)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.LeaveMethod">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.LoadedValue``1(``0)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.LoadedValuePtr(System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
            <param name="pointerType"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.LoadedValueTypedReference(System.TypedReference)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="typedReference"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.LoadedValueObject(System.Object)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.LoadedValueByRef``1(``0@)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.LoadedValueNotSupported">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.OriginalValue``1(``0)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.OriginalValuePtr(System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
            <param name="pointerType"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.OriginalValueTypedReference(System.TypedReference)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="typedReference"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.OriginalValueObject(System.Object)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.OriginalValueByRef``1(``0@)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.OriginalValueNotSupported">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.StoredValue``1(``0)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.StoredValuePtr(System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
            <param name="pointerType"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.StoredValueTypedReference(System.TypedReference)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="typedReference"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.StoredValueObject(System.Object)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.StoredValueByRef``1(``0@)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.StoredValueNotSupported">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Break">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldnull">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldc_I4(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldc_I8(System.Int64)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldc_R4(System.Single)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldc_R8(System.Double)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Dup">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Pop">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Jmp(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Call(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Calli(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="signatureToken"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ret">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Br">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.MinimizeOnComparison(Microsoft.ExtendedReflection.Interpretation.Term,System.Boolean)">
            <summary>
            This is just a hack to take care of the common case where
            two integers are compared, as commonly happens to check loop bounds.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.ConditionalBranch(System.Boolean)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="sign"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.ConditionalBranch(Microsoft.ExtendedReflection.Metadata.BinaryOperator,System.Boolean,System.Boolean)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="operator"></param>
            <param name="swapped"></param>
            <param name="sign"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Switch(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="targetsCount"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldind(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Metadata.StackWidening)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="layout"></param>
            <param name="widening"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Stind(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Arithmetic(Microsoft.ExtendedReflection.Metadata.BinaryOperator)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="operator"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.ArithmeticWithDivisionCheck(Microsoft.ExtendedReflection.Metadata.BinaryOperator)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="operator"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Arithmetic(Microsoft.ExtendedReflection.Metadata.UnaryOperator)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="operator"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Callvirt(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.CallvirtType(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.CallReceiver(System.Object)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="receiver"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.FieldReceiver(System.Object)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="receiver"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.ArrayIndex(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Cpobj(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldstr(System.String)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Newobj(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Castclass(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Isinst(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Unbox(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Throw">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldflda(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Stfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldsfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldsflda(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Stsfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.ArithmeticWithOverflowCheck(Microsoft.ExtendedReflection.Metadata.UnaryOperator,System.Boolean)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="operator"></param>
            <param name="sourceIsUnsigned"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Box(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Newarr(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldlen">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldelema(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldelem(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Metadata.StackWidening)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="layout"></param>
            <param name="widening"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Stelem(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Stelem_Ref">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Stelem(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Unbox_Any(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Refanyval(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ckfinite">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Mkrefany(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldtoken(Microsoft.ExtendedReflection.Metadata.GenericMethod)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="genericMethod"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldtoken(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldtoken(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="typeDefinition"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldtoken(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldtoken(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.ArithmeticWithOverflowCheck(Microsoft.ExtendedReflection.Metadata.BinaryOperator,System.Boolean)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="operator"></param>
            <param name="unsignedOperands"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Endfinally">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Leave">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Arglist">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Compare(Microsoft.ExtendedReflection.Metadata.BinaryOperator,System.Boolean)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="operator"></param>
            <param name="swap"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldftn(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldvirtftn(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldarg(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldarga(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Starg(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldloc(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldloca(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Stloc(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Localloc">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Endfilter">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Unaligned(System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="alignment"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Volatile">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Tailcall">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Initobj(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Constrained(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Cpblk">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Initblk">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Rethrow">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Refanytype">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Readonly">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Newarr(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32,System.Boolean)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="type"></param>
            <param name="rank"></param>
            <param name="lowerBoundsGiven"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldelem(Microsoft.ExtendedReflection.Metadata.Layout,System.Int32,Microsoft.ExtendedReflection.Metadata.StackWidening)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="layout"></param>
            <param name="rank"></param>
            <param name="widening"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Ldelema(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="type"></param>
            <param name="rank"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Stelem(Microsoft.ExtendedReflection.Metadata.Layout,System.Int32)">
            <summary>
            Overrides a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="layout"></param>
            <param name="rank"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Initarr(System.Array)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="elementValues"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Object_MemberwiseClone(System.Object)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Array_get_LongLength(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Array_get_Length(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Array_GetLength(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Array_GetLowerBound(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Array_GetUpperBound(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Array_GetValue(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Array_SetValue(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Buffer_TryFastMemCopy">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Reflection_GetFieldValue(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Reflection_SetFieldValue(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Reflection_SetTypedAndNamedFieldValue``1(System.Object,System.String,``0)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Reflection_IsAssignableFrom">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Reflection_GetObjectType(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Reflection_GetBoxValueType">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Reflection_GetType(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Array_Copy(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_Derive(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Shadow instruction; turns a value into a string
            </summary>
            <param name="formulaType"></param>
            <returns></returns>
            <remarks>
            Stack transition: value -&gt; string
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_GetRelevantInputNames(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_ToString(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Boolean)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_IsSymbolic(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_GetPathConditionString(System.Boolean)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="raw"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_Minimize">
            <summary>
            Shadow instruction; request a minimization of the I4/I8 value on the stack
            </summary>
            <remarks>
            Stack transition: value -&gt; empty
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_IsInArray(System.IntPtr)">
            <summary>
            Shadow instruction; builds condition representing whether a value is contained in the range of a (fixed-size) array
            </summary>
            <param name="count">number of elements in array</param>
            <remarks>
            Stack transition: value, array -&gt; bool
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_WrapConcreteSymbolic``1(__Auxiliary.IConcreteSymbolicProcessor{``0},``0)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="data"></param>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_UnwrapConcreteSymbolic``1(__Auxiliary.IConcreteSymbolicProcessor{``0},System.Object)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="data"></param>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_IsTypedPointer(Microsoft.ExtendedReflection.Metadata.TypeEx,System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The ptr.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_IsAllocated(System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="ptr">The Pointer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_TypedMalloc(Microsoft.ExtendedReflection.Metadata.TypeEx,System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The Pointer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_TypedFree(Microsoft.ExtendedReflection.Metadata.TypeEx,System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The PTR.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_EvaluateInSnapshot``1(System.Object,System.Delegate)">
            <summary>
            Evaluates an expression in a state snapshot
            </summary>
            <typeparam name="T"></typeparam>
            <param name="snapshot">The snapshot.</param>
            <param name="expr">The expr.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Symbolic_Snapshot">
            <summary>
            Create a snapshot of the state for evaluating old expressions.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_BeforeReflectionCall(Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Reflection_NextArgument">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Auxiliary_Reflection_NextByRefArgument">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_ReflectionCall">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_AfterReflectionCall(System.Object,System.Boolean)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_LoopVar(Microsoft.ExtendedReflection.Metadata.Layout,System.String)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Environment_get_TickCount">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_String_get_Length">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Interlocked_Increment(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Interlocked_Decrement(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Interlocked_Add(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Interlocked_Read(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Interlocked_Exchange(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Interlocked_CompareExchange(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_String_get_Chars">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_String_ToCharArray">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_String_ToCharArray(System.Int32,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_String_FromCharArray">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_String_FromCharArray(System.Int32,System.Int32)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_String_FromCharCount">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_String_IsNullOrEmpty(System.String)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.S_Ldptr(System.IntPtr)">
            <summary>
            Implements a method in <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Stop">
            <summary>
            Monitoring should not gather any more information.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Destroy">
            <summary>
            Destroy this thread.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.EnsureStack(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Compress">
            <summary>
            Compresses this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.CallStackTrace">
            <summary>
            The current call stack trace.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.CurrentFrame">
            <summary>
            The current stack frame; evolves as method calls begin and end.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.ICompressedInterpreter">
            <summary>
            Compressed interpreter
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.ICompressedInterpreter.Uncompress(Microsoft.ExtendedReflection.ComponentModel.IPathComponent,Microsoft.ExtendedReflection.Interpretation.States.IThread)">
            <summary>
            Uncompresses this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.IObjectId">
            <summary>
            Interface that describes an object identifier.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IObjectId.GetPersistentHashCode">
            <summary>
            Gets a strong, persistent hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.IObjectId.Description">
            <summary>
            Textual description of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.IObjectId.TrackFieldAccesses">
            <summary>
            Whether field access to this object should be tracked
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.IObjectId.CreationTime">
            <summary>
            When the object was created
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.IObjectId.IsFullyDefined">
            <summary>
            Whether all properties of this object can be considered as fully defined.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.NullId">
            <summary>
            Class that describes the object identifier of the unique null object reference.
            </summary>
            <remarks>
            Use <see cref="F:Microsoft.ExtendedReflection.Interpretation.NullId.Instance"/> to obtain the singleton-instance of this type.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.NullId.Instance">
            <summary>
            Singleton-instance of <see cref="T:Microsoft.ExtendedReflection.Interpretation.NullId"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.NullId.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ByRefHolderObjectId">
            <summary>
            Class that describes the object indentifier of a byref holder instance
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ByRefHolderObjectId.#ctor(Microsoft.ExtendedReflection.Metadata.Parameter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.ByRefHolderObjectId"/> class.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ByRefHolderObjectId.GetPersistentHashCode">
            <summary>
            Gets a strong, persistent hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ByRefHolderObjectId.Parameter">
            <summary>
            The parameter
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ByRefHolderObjectId.Description">
            <summary>
            Textual description of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ByRefHolderObjectId.TrackFieldAccesses">
            <summary>
            Whether field access to this object should be tracked
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ByRefHolderObjectId.CreationTime">
            <summary>
            When the object was created
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ByRefHolderObjectId.IsFullyDefined">
            <summary>
            Whether all properties of this object can be considered as fully defined.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.TermBuilder">
            <summary>
            Class to build a term lazily
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermBuilder.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="termManager"></param>
            <param name="initialValue"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermBuilder.ToTerm">
            <summary>
            Creates an term.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermBuilder.Clone">
            <summary>
            Clones this instance, conceptually deeply
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermBuilder.ToString">
            <summary>
            Gets a string representation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermBuilder.IsEqualTo(Microsoft.ExtendedReflection.Interpretation.TermBuilder)">
            <summary>
            Checks if the value built by this builder is equal to the value built by another builder
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermBuilder.Substitute(Microsoft.ExtendedReflection.Interpretation.ISubstitution)">
            <summary>
            Substitutes the specified substitution.
            </summary>
            <param name="substitution">The substitution.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermBuilder.Item(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Gets or sets an element of this uniform compound.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermBuilder.IsValid">
            <summary>
            Checks whether this term builder has been initialized to a value.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermBuilder.Layout">
            <summary>
            Layout of term
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.ICallInterpreter">
            <summary>
            A call handler of a <see cref="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpreter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.ICallInterpreter.SetReceiver(System.Object)">
            <summary>
            Sets the receiver object, if available.
            </summary>
            <param name="receiver">The receiver object.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.ICallInterpreter.TryGetNormalResult(System.Boolean,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            After a method returns, this call handler may define the 
            semantics of the called method.
            </summary>
            <param name="hasBeenInterpreted">whether a symbolic representation of the result value derived from the interpretation of the method body is already available</param>
            <param name="abstractResultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.ICallInterpreter.ExceptionRaised(System.Object,System.Boolean)">
            <summary>
            When a method throws an exception, 
            this call handler may add the reason for the exception to the path condition.
            </summary>
            <param name="exception">the actually thrown exception object (not <code>null</code>)</param>
            <param name="hasBeenInterpreted">whether a symbolic representation of the result value derived from the interpretation of the method body is already available</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpreter">
            <summary>
            A method interpreter defines the behavior of a method.
            This is particularly useful if a method is not interpreted.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpreter.OnCall(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Returns a <see cref="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.ICallInterpreter"/> if
            this interpreter handles the given method.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpreter.Substitute(Microsoft.ExtendedReflection.Interpretation.ISubstitution)">
            <summary>
            Applies the specified substitution on all cached values.
            </summary>
            <param name="substitution">The substitution.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpretationProvider">
            <summary>
            Provides methods interpreters
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpretationProvider.Initialize(Microsoft.ExtendedReflection.Interpretation.States.IState)">
            <summary>
            Each provider is initialized once at the beginning of 
            an execution of a program path.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpretationProvider.TryGetMethodInterpreter(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpreter@)">
            <summary>
            Tries to get an interpreter for a given method.
            </summary>
            <param name="method"></param>
            <param name="methodInterpreter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpretationProvider.TryGetDelegatedReceiver(System.Int32,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.Term,System.Boolean,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            The state calls this method when an instance method is invoked through a delegate.
            This method should try to substitute the given delegate receiver object reference
            with the actual target object reference.
            </summary>
            <param name="threadId">The thread id.</param>
            <param name="handler">The handler.</param>
            <param name="delegateObjectReference">The delegate object reference.</param>
            <param name="tryHard">Whether this function should try its best and ignore the current context..</param>
            <param name="actualTargetObjectReference">The actual target object reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpretationProvider.Substitute(Microsoft.ExtendedReflection.Interpretation.ISubstitution)">
            <summary>
            Applies the specified substitution on all cached values.
            </summary>
            <param name="substitution">The substitution.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderMultiplexer">
            <summary>
            A collection of <see cref="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpretationProvider"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentBase">
            <summary>
            A base class for exploration components.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponent">
            <summary>
            Services available for the execution of a multiple paths
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponent.Log">
            <summary>
            Gets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponent.ExplorationServices">
            <summary>
            Gets the exploration services.
            </summary>
            <value>The exploration services.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentElement">
            <summary>
            An element of an exploration component
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentElement.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentBase.Log">
            <summary>
            Gets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentBase.ExplorationServices">
            <summary>
            Gets the exploration services.
            </summary>
            <value>The exploration services.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpretationManager">
            <summary>
            A manager of a set of method interpretation providers
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpretationManager.Add(Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpretationProvider)">
            <summary>
            Adds the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderMultiplexer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderMultiplexer"/> class.
            </summary>
            <param name="addStandardProviders">if set to <c>true</c> [add standard providers].</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderMultiplexer.Initialize">
            <summary>
            Initializes this instance. Will be called exactly once.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderMultiplexer.Add(Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpretationProvider)">
            <summary>
            Adds an interpreter.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderMultiplexer.AddStandardProviders">
            <summary>
            Adds the standard interpreter providers that come with the ExtendedReflection library.
            </summary>
            <remarks>
            TODO: Make configurable, with configuration file or options???
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.IObjectCreator`1">
            <summary>
            Interface to create abstract objects of different kinds of types.
            </summary>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IObjectCreator`1.Null">
            <summary>
            Creates a representation of the null references.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IObjectCreator`1.CreateSzArray(Microsoft.ExtendedReflection.Metadata.TypeEx,System.IntPtr)">
            <summary>
            Creates a representation of a new sz-array reference.
            </summary>
            <param name="arrayType">sz-array type</param>
            <param name="length">length of array</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IObjectCreator`1.CreateMdArray(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32[],System.Int32[])">
            <summary>
            Creates a representation of a new md-array reference.
            </summary>
            <param name="arrayType">md-array type</param>
            <param name="lengths">lengths of dimensions</param>
            <param name="lowerBounds">lower bounds of dimensions</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IObjectCreator`1.CreateString(System.Char[])">
            <summary>
            Creates a representation of a new string reference.
            </summary>
            <param name="chars">characters of string</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IObjectCreator`1.CreatePrimitiveImmutable(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Object)">
            <summary>
            Creates a representation of a primitive immutable value.
            </summary>
            <param name="primitiveImmutableType">type of value</param>
            <param name="primitiveImmutableObject">value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IObjectCreator`1.CreateObject(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Creates a representation of a new proper object reference.
            </summary>
            <param name="objectType">type of object</param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.Interpretation.ObjectCreationException">if an instance of this type cannot be created</exception>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.INameCreator">
            <summary>
            A creator of names for types
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.INameCreator.CreateAny(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Creates a name for any type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.NameCreator">
            <summary>
            Class that creates new names for new objects.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.NameCreator.CreateAny(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Creates a name for any type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.DefaultObjectCreator">
            <summary>
            Class that creates new concrete objects for different kinds of types.
            </summary>
            <remarks>
            Use <see cref="F:Microsoft.ExtendedReflection.Interpretation.DefaultObjectCreator.Instance"/> to obtain an instance of this class.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.DefaultObjectCreator.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.DefaultObjectCreator.Instance">
            <summary>
            Singleton instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.DefaultObjectCreator.Null">
            <summary>
            Implements a method of IObjectCreator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.DefaultObjectCreator.CreateSzArray(Microsoft.ExtendedReflection.Metadata.TypeEx,System.IntPtr)">
            <summary>
            Implements a method of IObjectCreator.
            </summary>
            <param name="arrayType"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.DefaultObjectCreator.CreateMdArray(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32[],System.Int32[])">
            <summary>
            Implements a method of IObjectCreator.
            </summary>
            <param name="arrayType"></param>
            <param name="lengths"></param>
            <param name="lowerBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.DefaultObjectCreator.CreateString(System.Char[])">
            <summary>
            Implements a method of IObjectCreator.
            </summary>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.DefaultObjectCreator.CreatePrimitiveImmutable(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Object)">
            <summary>
            Implements a method of IObjectCreator.
            </summary>
            <param name="primitiveImmutableType"></param>
            <param name="primitiveImmutableObject"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.DefaultObjectCreator.CreateObject(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Creates a representation of a new proper object reference.
            </summary>
            <param name="objectType">type of object</param>
            <returns></returns>
            <exception cref="T:Microsoft.ExtendedReflection.Interpretation.ObjectCreationException">if an instance of this type cannot be created</exception>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ObjectCreationException">
            <summary>
            Exception that indicates that an object could not be created.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectCreationException.#ctor">
            <summary>
            Creates an instance of this type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectCreationException.#ctor(System.String)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ReflectionObjectCreationException">
            <summary>
            Exception that indicates that an object could not be created because of a problem that originates in a reflection call.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ReflectionObjectCreationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.ReflectionObjectCreationException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ReflectionObjectCreationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.ReflectionObjectCreationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ReflectionObjectCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.ReflectionObjectCreationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ReflectionObjectCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.ReflectionObjectCreationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder">
            <summary>
            Abstract class to build the abstract path condition along 
            an executed path.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.PathComponentBase">
            <summary>
            A base class for path components.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IPathComponent">
            <summary>
            Services available for the execution of a single path
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IPathComponent.PathServices">
            <summary>
            Gets the path services.
            </summary>
            <value>The path services.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.PathComponentBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.PathComponentBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.PathComponentBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.PathComponentBase.PathServices">
            <summary>
            Gets the path services.
            </summary>
            <value>The path services.</value>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.CodeLabelReusedFlag">
            <summary>
            If this flag is set, the code label has been reused and does
            not indicate a unique hit.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.Initialize">
            <summary>
            Initializes this instance. Will be called exactly once.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.MonitorEnterFrame(Microsoft.ExtendedReflection.Interpretation.States.IFrame)">
            <summary>
            Raises a monitor event.
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.MonitorLeaveFrame(Microsoft.ExtendedReflection.Interpretation.States.IFrame)">
            <summary>
            Raises a monitor event.
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.MonitorReached(Microsoft.ExtendedReflection.Metadata.Method,System.Int32)">
            <summary>
            Raises a monitor event.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.MonitorNextNode(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Raises a monitor event.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.TryGetMonitor(Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderMonitor@)">
            <summary>
            Tries to get the current monitor
            </summary>
            <param name="monitor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.TryCompressPathConditionBuilder(Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.CompressedPathConditionBuilder@)">
            <summary>
            Tries to compress this path condition builder.
            </summary>
            <param name="compressedPathConditionBuilder">The compressed path condition builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.EnterFrame(Microsoft.ExtendedReflection.Interpretation.States.IFrame)">
            <summary>
            Enters a frame; always followed by <see cref="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.LeaveFrame(Microsoft.ExtendedReflection.Interpretation.States.IFrame)"/>.
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.LeaveFrame(Microsoft.ExtendedReflection.Interpretation.States.IFrame)">
            <summary>
            Leaves a frame.
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.Reached(System.Int32)">
            <summary>
            A code position has been reached, but there is no further condition attached to the position.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.Add(Microsoft.ExtendedReflection.Metadata.ICallStackTrace,System.Int32,System.Boolean,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Adds a path condition
            </summary>
            <param name="callStackTrace">The call stack trace.</param>
            <param name="codeLabel">position in method</param>
            <param name="sign">whether the positive form of the condition is to be added</param>
            <param name="term">value that has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.Inconsistent(System.Int32)">
            <summary>
            Indicates that this path is infeasible.
            </summary>
            <param name="codeLabel">position in method</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.AnnounceRelevantCondition(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            The given condition, in its positive or negative form, is about to be tested by the program.
            </summary>
            <remarks>
            This gives the infrastructure an opportunity to inspect the condition for patterns, and possibly refine the test inputs before proceedings
            </remarks>
            <param name="term"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.NullableBoxed(Microsoft.ExtendedReflection.Metadata.ICallStackTrace,System.Int32,System.Boolean,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Whether boxing a nullable value resulted in null.
            </summary>
            <param name="callStackTrace">The call stack trace.</param>
            <param name="codeLabel">The code label.</param>
            <param name="isBoxNull">if set to <c>true</c> [is box null].</param>
            <param name="boxedValue">The boxed value.</param>
            <param name="nullableType">Type of the nullable.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.NullableUnboxed(Microsoft.ExtendedReflection.Metadata.ICallStackTrace,System.Int32,System.Boolean,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Whether unboxing a nullable null value.
            </summary>
            <param name="callStackTrace">The call stack trace.</param>
            <param name="codeLabel">The code label.</param>
            <param name="isBoxNull">if set to <c>true</c> [is box null].</param>
            <param name="boxedValue">The boxed value.</param>
            <param name="nullableType">Type of the nullable.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.VirtualCall(Microsoft.ExtendedReflection.Metadata.ICallStackTrace,System.Int32,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            The target of a virtual call.
            </summary>
            <param name="callStackTrace">The call stack trace.</param>
            <param name="codeLabel">The code label.</param>
            <param name="receiver">The receiver.</param>
            <param name="virtualMethod">Method of the virtual.</param>
            <param name="actualMethod">Method of the actual.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.SwitchCase(Microsoft.ExtendedReflection.Metadata.ICallStackTrace,System.Int32,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32)">
            <summary>
            The case taken by a switch statement.
            </summary>
            <param name="callStackTrace">The call stack trace.</param>
            <param name="codeLabel">The code label.</param>
            <param name="selector">The selector.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.SwitchDefault(Microsoft.ExtendedReflection.Metadata.ICallStackTrace,System.Int32,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32)">
            <summary>
            The default case of a switch statement.
            </summary>
            <param name="callStackTrace">The call stack trace.</param>
            <param name="codeLabel">The code label.</param>
            <param name="selector">The selector.</param>
            <param name="targetsCount">The targets count.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.ConditionalBranch(Microsoft.ExtendedReflection.Metadata.ICallStackTrace,System.Int32,Microsoft.ExtendedReflection.Interpretation.Term,System.Boolean)">
            <summary>
            A conditional branch.
            </summary>
            <param name="callStackTrace">The call stack trace.</param>
            <param name="codeLabel">The code label.</param>
            <param name="condition">The condition.</param>
            <param name="branchTaken">if set to <c>true</c> [branch taken].</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.CallFinished(System.Int32)">
            <summary>
            A normal termination of a call.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.Stored(System.Int32)">
            <summary>
            A conditional store.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.ExceptionHandler(Microsoft.ExtendedReflection.Metadata.ICallStackTrace,System.Int32,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Boolean)">
            <summary>
            An exception handler.
            </summary>
            <param name="callStackTrace">The call stack trace.</param>
            <param name="codeLabel">The code label.</param>
            <param name="exception">The exception.</param>
            <param name="type">The type.</param>
            <param name="taken">if set to <c>true</c> [taken].</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.EndFilter(Microsoft.ExtendedReflection.Metadata.ICallStackTrace,System.Int32,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32)">
            <summary>
            A filter verdict.
            </summary>
            <param name="callStackTrace">The call stack trace.</param>
            <param name="codeLabel">The code label.</param>
            <param name="abstractVerdict">The abstract verdict.</param>
            <param name="concreteVerdict">The concrete verdict.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.UninstrumentedCall(System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            An uninstrumented call terminated normally.
            </summary>
            <param name="codeLabel">The code label.</param>
            <param name="signature">The signature.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.Stop">
            <summary>
            The path condition builder should not gather any more information.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.Minimize(System.Int32,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Adds a request to minimize a I4/I8 value.
            </summary>
            <param name="codeLabel">The code label.</param>
            <param name="number">The number.</param>
            <returns>boolean that indicates whether this is the first time that the minimization request was encountered</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.IsLikelyLoopBound(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks whether a value is likely to be a loop bound.
            </summary>
            <param name="number">The number.</param>
            <returns>boolean that indicates whether this number is likely to be a loop bound.</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.TryGetCurrentPathConditionInfo(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.PathConditionInfo@)">
            <summary>
            Tries to the get current path condition info.
            </summary>
            <param name="info">The info.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.Reduce(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Reduces the given value, taking into account the path condition.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.CanMonitorEnterFrame">
            <summary>
            Checks if a monitor event has a handler
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.CanMonitorLeaveFrame">
            <summary>
            Checks if a monitor event has a handler
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.CanMonitorReached">
            <summary>
            Checks if a monitor event has a handler
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.CanMonitorNextNode">
            <summary>
            Checks if a monitor event has a handler
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.TermManager">
            <summary>
            The term manager.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.IsTainted">
            <summary>
            Is path condition currently tainted?
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.CompressedPathConditionBuilder">
            <summary>
            Compressed path condition builder
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.CompressedPathConditionBuilder.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.CompressedPathConditionBuilder"/> class.
            </summary>
            <param name="pathConditionBuilder">The path condition builder.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder.CompressedPathConditionBuilder.Uncompress(Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder)">
            <summary>
            Uncompresses the specified path condition builder.
            </summary>
            <param name="pathConditionBuilder">The path condition builder.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyKind">
            <summary>
            Kinds of <see cref="T:Microsoft.ExtendedReflection.Interpretation.ObjectProperty"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyKind.ObjectType">
            <summary>
            Type of an object reference.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyKind.StringLength">
            <summary>
            Length of a string.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyKind.StringChars">
            <summary>
            Characters of a string.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyKind.SzArrayLength">
            <summary>
            Length of a zero-based, single-dimensional array.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyKind.MdArrayDimensionLength">
            <summary>
            Length of a dimension of a multi-dimensional array.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyKind.MdArrayDimensionLowerBound">
            <summary>
            Lower bound of a dimension of a multi-dimensional array.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyKind.CreationTime">
            <summary>
            Time when the object was born.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ObjectProperty">
            <summary>
            A property of an object.
            </summary>
            <remarks>
            Each object has a set of readonly properties.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.GlobalIndex">
            <summary>
            Unique positive integer that identifies this object property
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.Layout">
            <summary>
            The layout of the values that can be associated with this object property.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.Kind">
            <summary>
            The kind of this property.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.GetHashCode">
            <summary>
            Returns a hash value for this object property.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.ToString">
            <summary>
            The name of this object property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.IsValidValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks if a term is a valid value for an object property.
            </summary>
            <param name="term">The term.</param>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.Type">
            <summary>
            The object property representing the type of an object.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.SzArrayLength">
            <summary>
            The object property representing the length of an sz-array.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.GetMdArrayLength(System.Int32)">
            <summary>
            The object property representing the length of a dimension of an md-array.
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.GetMdArrayLowerBound(System.Int32)">
            <summary>
            The object property representing the lower bound of a dimension of an md-array.
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.StringLength">
            <summary>
            The object property representing the length of a string.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.StringChars">
            <summary>
            The object property representing the sequence of characters of a string.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.CreationTime">
            <summary>
            The object property representing the sequence of characters of a string.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.Dimension">
            <summary>
            Dimension of a property of a multi-dimensional array.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.Name">
            <summary>
            The name of this object property.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ObjectProperty.IsNotNegative">
            <summary>
            Checks if this property cannot have negative values.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection">
            <summary>
            A collection of the readonly properties of an object.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.IFiniteMap`2">
            <summary>
            An immutable table (finite)
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.IMap`2">
            <summary>
            An immutable dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.IMap`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IMap`2.Comparer">
            <summary>
            Gets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.ICopyable`1">
            <summary>
            An enumeration that can be copied to an array.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.ICountable`1">
            <summary>
            An enumeration with count.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.ICountable`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.ICopyable`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.IIndexable`1">
            <summary>
            An immutable and indexable collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IIndexable`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.Object(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection"/> for a general object.
            </summary>
            <param name="typeValue">The type value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.String(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection"/> for a string.
            </summary>
            <param name="typeValue">The type value.</param>
            <param name="stringLengthValue">The string length value.</param>
            <param name="stringCharsValue">The string chars value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.PrimitiveImmutable(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection"/> for a primitive immutable object.
            </summary>
            <param name="typeValue">The type value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.SzArray(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection"/> for an sz-array.
            </summary>
            <param name="typeValue">The type value.</param>
            <param name="arrayLengthValue">The array length value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.MdArray(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[],Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Creates an instance of <see cref="T:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection"/> for an md-array.
            </summary>
            <param name="typeValue">The type value.</param>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="lengths">The lengths.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.TryGetValue(Microsoft.ExtendedReflection.Interpretation.ObjectProperty,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Attempts to obtain the value of a property stored in this collection.
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.GetEnumerator">
            <summary>
            Retrieves an enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.GetHashCode">
            <summary>
            The hashcode of this property collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.Equals(System.Object)">
            <summary>
            Checks whether an object is equal to this property collection.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.Equals(Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection)">
            <summary>
            Checks whether two object property collections are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.IsValid">
            <summary>
            Checks if all values are valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.op_Equality(Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection)">
            <summary>
            Checks whether two object property collections are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.op_Inequality(Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection)">
            <summary>
            Checks whether two object property collections are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.CopyTo(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{Microsoft.ExtendedReflection.Interpretation.ObjectProperty,Microsoft.ExtendedReflection.Interpretation.Term}[],System.Int32)">
            <summary>
            Copies to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.Keys">
            <summary>
            Retrieves the properties of this collection.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.Item(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer">
            <summary>
            Tries to reduce term terms to simpler equivalent ones.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceArrayElementType(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an array-element-type term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceBoxValueType(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an box-value-type term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceBinary(Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce a binary term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceFunctionApplication(Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[],Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an invocation term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceIfThenElse(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an if-then-else.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceIsAssignable(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an is-assignable term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceObject(Microsoft.ExtendedReflection.Interpretation.IObjectId,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an object term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceObjectProperty(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ObjectProperty,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an object-property term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceSelect(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce a select term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceUnary(Microsoft.ExtendedReflection.Metadata.UnaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce a unary term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceFill(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce a fill.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceFuse(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce the fusion of two compounds.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceMove(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce moving a map by an offset.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceUpdate(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermMap,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an updated compound term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReduceVTableMethod(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce a vtable-method term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer.TryReducePointerToElement(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce a pointer to an element.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer">
            <summary>
            This class provides methods to simplify terms.
            </summary>
            <remarks>
            Use <see cref="P:Microsoft.ExtendedReflection.Interpretation.TermManager.Reducer"/> to obtain
            an instance of this class.
            For logical operations, BDDs are constructed according to
            [Efficient Implementation of a BDD package, Brace/Rudell/Bryant].
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.termManager">
            <summary></summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.constructorFailAndDefault">
            <summary></summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.destructorFailAndDefault">
            <summary></summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.ranges">
            <summary></summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.ExpI4(System.Int32,System.UInt32)">
            <summary>
            Internal helper function.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.ExpI8(System.Int64,System.UInt64)">
            <summary>
            Internal helper function.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceObject(Microsoft.ExtendedReflection.Interpretation.IObjectId,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an object term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceFill(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce a fill.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceFuse(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce the fusion of two compounds.
            </summary>
            <param name="leftCompound"></param>
            <param name="offset"></param>
            <param name="rightCompound"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceMove(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce moving a map by an offset.
            </summary>
            <param name="compound"></param>
            <param name="offset"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceUpdate(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermMap,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an updated compound term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceSelect(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce a select term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceIfThenElse(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an if-then-else.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceIsAssignable(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an is-assignable term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceArrayElementType(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an array-element-type term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceBoxValueType(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an box-value-type term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceObjectProperty(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ObjectProperty,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an object-property term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceVTableMethod(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce a vtable-method term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceBinary(Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce a binary term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceUnary(Microsoft.ExtendedReflection.Metadata.UnaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce a unary term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReduceFunctionApplication(Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[],Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce an invocation term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer.TryReducePointerToElement(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Try to reduce a pointer to an element.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Effects.IEffect">
            <summary>
            Interface describing an effect.
            </summary>
            <remarks>
            Effects are tracked by the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Effects.IEffectsTracker"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Effects.IEffect.ChangesState">
            <summary>
            Whether this effect implies a state change.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.#ctor(System.Converter{Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer})">
            <summary>
            Constructor.
            </summary>
            <param name="customReducerFactory">The optional custom reducer factory.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.GetInitialTypeOfMap(System.Int32)">
            <summary>
            Retrieve initial typeOf map.
            </summary>
            <param name="typeLevel">The type level.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.GetGlobalIndexOf(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets the global index symbol for a particular type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.GetInitialInstanceFieldMap(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Retrieve initial object field map.
            </summary>
            <param name="instanceField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.GetInitialMemoryMap(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Retrieve initial memory map.
            </summary>
            <param name="elementLayout">The element layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.TermMap(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Creates a term map with one entry.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.TermMap(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}})">
            <summary>
            Creates a term map with a set of assignments.
            </summary>
            <param name="assignments"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Default(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Retrieves the default value for a given layout, i.e. the value which corresponds to a bit-pattern of all zeros.
            </summary>
            <param name="layout"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.PointerToNowhere(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            The constant managed pointer value that represents 'null'.
            </summary>
            <param name="elementLayout">layout of pointed to value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Type(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            The constant abstract type value that represents a type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.ArrayElementType(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents the element type
            of the given array type.
            </summary>
            <param name="arrayType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.BoxValueType(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents the value type
            of the given box type.
            </summary>
            <param name="boxType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.ObjectProperty(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ObjectProperty)">
            <summary>
            Returns the term that represents the given object property
            for the given object reference.
            </summary>
            <param name="reference"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.IsAssignable(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents
            whether a value of the source type is assignable to a location
            whose formal type is the target type.
            The result is a propert stack boolean.
            </summary>
            <param name="sourceType"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.IfThenElse(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents
            a case distinction; it evaluates to the <paramref name="then"/> value
            when the condition is true, and to <paramref name="else"/> otherwise.
            </summary>
            <param name="condition">condition of <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/></param>
            <param name="then">value with same layout as <paramref name="else"/></param>
            <param name="else"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.String(System.String)">
            <summary>
            Returns a term that represents the given string value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.PrimitiveImmutable(System.Object)">
            <summary>
            Returns a term that represents the given concrete value,
            whose type <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsPrimitiveImmutable"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.TryGetObject(Microsoft.ExtendedReflection.Interpretation.Term,System.Object@)">
            <summary>
            Tries to query the object.
            </summary>
            <param name="objectTerm">The object term.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.PointerToArgument(System.Int32,System.Int32,System.Int32,Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Pointer to argument.
            </summary>
            <param name="thread">The thread.</param>
            <param name="frame">The frame.</param>
            <param name="index">The index.</param>
            <param name="layout">The layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.PointerToLocal(System.Int32,System.Int32,System.Int32,Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Pointer to local.
            </summary>
            <param name="thread">The thread.</param>
            <param name="frame">The frame.</param>
            <param name="index">The index.</param>
            <param name="layout">The layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.PointerToStackTop(System.Int32,System.Int32,Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Returns a term that represents
            a pointer to the topmost value on the evaluation stack of a particular stack frame.
            </summary>
            <param name="thread"></param>
            <param name="frame"></param>
            <param name="layout">layout of value that the pointer points to</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Method(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            The constant abstract method value that represents the given method.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.VTableMethod(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Returns a term that represents the method
            that the vtable of the given object reference's type contains
            for the given method.
            </summary>
            <param name="reference"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Unary(Microsoft.ExtendedReflection.Metadata.UnaryOperator,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Unaries the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.PointerToInstanceFieldMap(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Returns a term that represents
            a pointer to a reference types' instance field's field map.
            </summary>
            <param name="field">instance field</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.PointerToValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            A managed pointer value to an immutable value.
            </summary>
            <param name="value">immutable value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.PointerToBoundedIUniform(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            A managed pointer value to an indexed uniform compound with a maximum valid length
            </summary>
            <param name="compound">compound</param>
            <param name="length">length</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.PointerToStaticField(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Returns a term that represents
            a pointer to a static field.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.StructField(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            The constant term that represents a struct's instance field.
            </summary>
            <param name="field">instance field of struct</param>
            <returns></returns>
            <remarks>
            Intuitively, the returned value can be thought of as the offset
            of the struct field in the struct value.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Symbol(Microsoft.ExtendedReflection.Interpretation.ISymbolId)">
            <summary>
            Symbols the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Undef(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            The constant abstract object reference value that represents
            an undefined value.
            </summary>
            <param name="layout"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.PointerToElement(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents
            a pointer to an element of a compound value.
            </summary>
            <param name="baseAddress">base address of compound value</param>
            <param name="index">index into compound value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Select(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Selects an element of a compound value.
            </summary>
            <param name="compound"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Fill(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Creates a uniform compound whose values are equal to <paramref name="elementValue"/>
            </summary>
            <param name="indexLayout"></param>
            <param name="elementValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Update(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermMap)">
            <summary>
            Updates the specified compound.
            </summary>
            <param name="compound">The compound.</param>
            <param name="updates">The updates.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Override(Microsoft.ExtendedReflection.Interpretation.ITermMap,Microsoft.ExtendedReflection.Interpretation.ITermMap)">
            <summary>
            Creates a new map that contains the mapping of the first map overriden by the second.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Ac1WithoutOffset(Microsoft.ExtendedReflection.Interpretation.ITermAc1Set)">
            <summary>
            Gets value that represents the associative, commutative operation with unit, however without the offset.
            </summary>
            <param name="ac1Set">The ac1 set.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.AreEqualWithoutOffsets(Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Whether two ac1 sets are equal, not taking into account their offsets.
            </summary>
            <param name="operator">The @operator.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
            <remarks>
            This method may return <code>false</code> even if the are actually equal.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.GetBaseAndOffset(Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Gets the base and offset.
            </summary>
            <param name="operator">The @operator.</param>
            <param name="value">The value.</param>
            <param name="base">The @base.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Ac1(Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Builds an associative, commutative operation with unit.
            </summary>
            <param name="operator">The operator.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Ac1(Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Metadata.LayoutKind,System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Interpretation.Term})">
            <summary>
            Builds an associative, commutative operation with unit.
            </summary>
            <param name="operator">The operator.</param>
            <param name="layoutKind">Kind of the layout.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.I1(System.Byte)">
            <summary>
            Returns constant term that represents an integer value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I1"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.I2(System.Int16)">
            <summary>
            Returns constant term that represents an integer value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I2"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.I4(System.Int32)">
            <summary>
            Returns constant term that represents an integer value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.I8(System.Int64)">
            <summary>
            Returns constant term that represents an integer value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.R4(System.Single)">
            <summary>
            Returns constant term that represents a floating-point value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R4"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.R8(System.Double)">
            <summary>
            Returns constant term that represents a floating-point value.
            The result has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Object(Microsoft.ExtendedReflection.Interpretation.IObjectId,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection)">
            <summary>
            Returns the constant abstract object reference value that represents
            the object with the given identifier and properties.
            </summary>
            <param name="id"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.FunctionApplication(Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Returns a term that represents the invocation
            of a method with arguments at a particular time.
            </summary>
            <param name="function"></param>
            <param name="time"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.MdIndex(Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Builds a term representing an <see cref="T:Microsoft.ExtendedReflection.Metadata.Layout.MdIndex"/>.
            </summary>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.GetTerm(System.UInt32)">
            <summary>
            Gets the term.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.DumpStatistics(System.IO.TextWriter)">
            <summary>
            Dumps some statistics into a text writer.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.GetStatistics">
            <summary>
            Gets statistics that could be plotted over time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.TryGetAc1Aggressive(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermAc1Set@)">
            <summary>
            Tries to obtain the constituents of an associative, commutative operation with unit
            that a term represents.
            Also considers If-Then-Else terms that represent logical expressions.
            </summary>
            <param name="term">supposed associative operation</param>
            <param name="operandSet"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.TryGetLogicalAnd(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to obtain the constituents of a logical conjunction.
            </summary>
            <param name="term">supposed conjunction</param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.TryGetLogicalOr(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to obtain the constituents of a logical disjunction.
            </summary>
            <param name="term">supposed conjunction</param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.AddUser(Microsoft.ExtendedReflection.Interpretation.ITermUser,System.Boolean)">
            <summary>
            Registers the term user.
            </summary>
            <param name="user">The user.</param>
            <param name="weak">Whether only the client should be referenced weakly.</param>
            <remarks>
            Every client that stores references to terms must register itself
            before <see cref="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.CollectDeadTerms(System.Boolean)"/> is called.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.RemoveUser(Microsoft.ExtendedReflection.Interpretation.ITermUser,System.Boolean)">
            <summary>
            Unregisters the term user.
            </summary>
            <param name="user">The user.</param>
            <param name="weak">Whether the client was added weakly.</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.AddUser(Microsoft.ExtendedReflection.Interpretation.ITermUser,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.CollectDeadTerms(System.Boolean)">
            <summary>
            This method renders all previously produced abstract
            values invalid unless they are held and reported
            by a currently registered <see cref="T:Microsoft.ExtendedReflection.Interpretation.ITermUser"/>.
            </summary>
            <param name="force">Whether to force a collection.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.EmptyTermMap">
            <summary>
            The empty term map.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.False">
            <summary>
            The logical value 'false' in <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.True">
            <summary>
            The logical value 'true' in <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Impl.InternalizingTermManager.Null">
            <summary>
            The constant abstract object reference value that represents 'null'.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ITermAc1Set">
            <summary>
            A set of terms to which an associative, commutative operator with a unit is applied.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ITermAc1Set.TryGetOffset(Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Gets the constant offset, if any.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ITermAc1Set.TryGetSingleton(Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Gets a singleton value, if any, excluding the offset.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ITermAc1Set.Operator">
            <summary>
            The Ac1 operator.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ITermAc1Set.Layout">
            <summary>
            The layout of the operands.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ITermAc1Set.Values">
            <summary>
            Gets the values excluding the offset.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ITermAc1Set.AreAllAc1OperandsShifts">
            <summary>
            Property to support a little hack
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ITermAc1Set.AreAllAc1OperandsProperStackBooleans">
            <summary>
            Whether all operands are proper stack booleans.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager">
            <summary>
            Normalizes terms
            </summary>
            <remarks>
            Use the term manager factory to create an instance of this term manager.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.#ctor(System.Converter{Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Interpretation.Reduction.IReducer})">
            <summary>
            Constructor uses default reducer.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.Object(Microsoft.ExtendedReflection.Interpretation.IObjectId,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection)">
            <summary>
            Returns the constant abstract object reference value that represents
            the object with the given identifier and properties.
            </summary>
            <param name="id"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.Fill(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Creates a uniform compound whose values are equal to <paramref name="elementValue"/>
            </summary>
            <param name="indexLayout"></param>
            <param name="elementValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.Fuse(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            forall a,b,i,j. fuse(a,i,b)[j] = ite(clt_un(i,j), a[i], b[i])
            </summary>
            <param name="leftCompound">The left compound.</param>
            <param name="offset">The offset.</param>
            <param name="rightCompound">The right compound.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.Move(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Moves all indices of a map by an offset.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.Update(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermMap)">
            <summary>
            Updates the specified compound.
            </summary>
            <param name="compound">The compound.</param>
            <param name="updates">The updates.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.Select(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Selects an element of a compound value.
            </summary>
            <param name="compound"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.IfThenElse(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents
            a case distinction; it evaluates to the <paramref name="then"/> value
            when the condition is true, and to <paramref name="else"/> otherwise.
            </summary>
            <param name="condition">condition of <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/></param>
            <param name="then">value with same layout as <paramref name="else"/></param>
            <param name="else"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.IsAssignable(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents
            whether a value of the source type is assignable to a location
            whose formal type is the target type.
            </summary>
            <param name="sourceType"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.ArrayElementType(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents the element type
            of the given array type.
            </summary>
            <param name="arrayType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.BoxValueType(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents the value type
            of the given box type.
            </summary>
            <param name="boxType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.ObjectProperty(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ObjectProperty)">
            <summary>
            Returns the term that represents the given object property
            for the given object reference.
            </summary>
            <param name="reference"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.VTableMethod(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Returns a term that represents the method
            that the vtable of the given object reference's type contains
            for the given method.
            </summary>
            <param name="reference"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.Unary(Microsoft.ExtendedReflection.Metadata.UnaryOperator,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Unaries the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.Binary(Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Binaries the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.FunctionApplication(Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Returns a term that represents the invocation
            of a method with arguments at a particular time.
            </summary>
            <param name="function"></param>
            <param name="time"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Impl.NormalizingTermManager.PointerToElement(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a term that represents
            a pointer to an element of a compound value.
            </summary>
            <param name="baseAddress">base address of compound value</param>
            <param name="index">index into compound value</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.SubstitutionBuilder">
            <summary>
            This class represents a mutable substitution of terms to terms.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.SubstitutionBuilder.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="termManager"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.SubstitutionBuilder.#ctor(Microsoft.ExtendedReflection.Interpretation.ISubstitution)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="substitution"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.SubstitutionBuilder.Add(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Adds a mapping to the substitution.
            </summary>
            <param name="symbol"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.SubstitutionBuilder.Apply(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Apply the substitution to an term.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.SubstitutionBuilder.Apply(Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Apply the substitution to a list of terms.
            </summary>
            <param name="terms"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.SubstitutionBuilder.Clone">
            <summary>
            Clones this substitution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.SubstitutionBuilder.ToSubstitution">
            <summary>
            Returns an (immutable) substitution.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.SubstitutionBuilder.TermManager">
            <summary>
            The term manager associated with this substitution.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.SubstitutionBuilder.Domain">
            <summary>
            Retrieves all terms in the domain of this substitution.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.SubstitutionBuilder.Resolver">
            <summary>
            Retrieves the resolver associated with this substitution.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2">
            <summary>
            Abstract class that provides visitor pattern for terms.
            </summary>
            <remarks>
            This abstract class implements the main dispatch method of the visitor pattern;
            it implements all individual visitor methods by means of a default visitor method.
            However, it does not implement this default visitor method.
            </remarks>
            <typeparam name="TResult">type of visiting result</typeparam>
            <typeparam name="TParameter">type of a parameter that is threaded through</typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager)">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitI1(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Byte)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitI2(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int16)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitI4(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitI8(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int64)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitR4(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Single)">
            <summary>
            Visitor for a floating-point constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitR8(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Double)">
            <summary>
            Visitor for a floating-point constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitObject(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IObjectId,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection)">
            <summary>
            Visitor for an object reference constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="id">id of object</param>
            <param name="properties">properties of object</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitStructField(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Visitor for a struct-field constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="instanceField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitMethod(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Visitor for a constant representing a method.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitType(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Visitor for a constant representing a type.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitUndef(`1,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a constant that represents an undefined value.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitSymbol(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ISymbolId)">
            <summary>
            Visitor for a symbol.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="key">identifier of symbol</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitDefaultStruct(`1,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for an empty compound, i.e. the compound whose elements are default values.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitFill(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a map whose element are all mapped to <paramref name="elementValue"/>.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="indexLayout"></param>
            <param name="elementValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitPointerToNowhere(`1,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an illegal address.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitPointerToValue(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an immutable value.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitPointerToBoundedIUniform(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to a uniform compound indexed over <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I"/>, where indices range from zero to the given maximum length
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="compound">uniform compound</param>
            <param name="length">maximum length</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitPointerToStaticField(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Visitor for a pointer to a static field.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="staticField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitPointerToInstanceFieldMap(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Visitor for a pointer to an instance-field of an object.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="instanceField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitPointerToArgument(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to an argument of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <param name="argumentIndex">index of argument in stack-frame</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitPointerToLocal(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to a local variable of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <param name="localIndex">index of local variable in stack-frame</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitPointerToElement(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an element in a compound value.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="baseAddress">address of compound value</param>
            <param name="index">index into compound value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitPointerToStackTop(`1,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to the topmost element of the evaluation stack of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitVTableMethod(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Visitor for a vtable-lookup.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="reference">object reference</param>
            <param name="method">virtual method</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitArrayElementType(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for array-element type.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="arrayType">type of an array</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitBoxValueType(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for box-value type.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="boxType">type of a box</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitObjectProperty(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ObjectProperty)">
            <summary>
            Visitor for an object property.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="reference">object reference</param>
            <param name="property">object property</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitFuse(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a fused compound.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="leftCompound">The left compound.</param>
            <param name="offset">The offset.</param>
            <param name="rightCompound">The right compound.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitMove(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a moved compound.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="compound">The compound.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitUpdate(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermMap)">
            <summary>
            Visitor for an updated compound.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="baseCompound">compound value</param>
            <param name="updates">set of updates</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitSelect(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a selection.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="compound">compound value</param>
            <param name="index">index into compound</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitUnary(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.UnaryOperator,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a unary operation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operator">unary operator</param>
            <param name="operand">operand value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitBinary(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a binary operation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operator">binary operator</param>
            <param name="left">left operand value</param>
            <param name="right">right operand value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitAc1(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermAc1Set)">
            <summary>
            Visitor for an associative, commutative operation with a unit.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operandSet"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitIsAssignable(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a subtype test.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="sourceType">source type</param>
            <param name="targetType">target type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitIfThenElse(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for an if-then-else value, that evaluates to the <paramref name="then"/> value if the condition holds, and to <paramref name="else"/> otherwise.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="condition">condition of <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/></param>
            <param name="then">value with same layout as <paramref name="else"/></param>
            <param name="else">value with same layout as <paramref name="then"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitFunctionApplication(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Visitor for an invocation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="function">function</param>
            <param name="time">value that represents the invocation time</param>
            <param name="arguments">method arguments</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.VisitMdIndex(`1,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Visitor for a multi-dimensional array index.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="indices">list of indices</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermVisitorWithDefault`2.Default(`1,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Provides a default result for all individual visitor-methods that are not overridden by subtypes.
            </summary>
            <param name="parameter"></param>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ObjectNamer">
            <summary>
            Delegate that assigns names to terms that represent object references.
            </summary>
            <param name="reference">object reference</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.TermWriterBase">
            <summary>
            Abstract class that extends the <see cref="T:System.IO.TextWriter"/> class 
            my facilities to write terms.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.TermWriterBase.ObjectNamer">
            <summary>
            Delegate that assigns names to terms that represent object references.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.TermWriterBase.PrettifyLogicalIfThenElses">
            <summary>
            Whether to pretty-print if-then-else expressions that represent logical connectors
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermWriterBase.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,System.Boolean)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="termManager"></param>
            <param name="abbreviateUpdates">Whether nested updates should shortened to '*'</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermWriterBase.BeginApplication(System.Boolean)">
            <summary>
            Marks the beginning of a function application with at least one argument; the first argument is the applied function.
            </summary>
            <param name="infixSuggested">Whether the operator, i.e. the first argument, should be displaced as an infix operator</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermWriterBase.NextArgument">
            <summary>
            Marks the completion of the previous argument, and the beginning of the next.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermWriterBase.EndApplication">
            <summary>
            Marks the end of a function application.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermWriterBase.Write(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Writes an term.
            </summary>
            <param name="term"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermWriterBase.WriteQuotedChar(System.Char)">
            <summary>
            Writes a character in quotation marks.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermWriterBase.WriteQuotedString(System.String)">
            <summary>
            Writes a string in quotation marks.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermWriterBase.Visitor">
            <summary>
            Gets the visitor that writes terms.
            </summary>
            <value>The visitor.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.TermWriterBase.Void">
            <summary>
            Void type
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.TermSExpWriter">
            <summary>
            An S-expression writer of terms.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermSExpWriter.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="termManager">The term manager.</param>
            <param name="indent">if set to <c>true</c> [indent].</param>
            <param name="abbreviateUpdates">Whether nested updates should shortened to '*'</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermSExpWriter.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,System.IO.TextWriter,System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="termManager">The term manager.</param>
            <param name="writer">the underlying output stream</param>
            <param name="indent">if set to <c>true</c> [indent].</param>
            <param name="abbreviateUpdates">Whether nested updates should shortened to '*'</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermSExpWriter.UpdateTextWriter(System.IO.TextWriter)">
            <summary>
            Installs a new writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermSExpWriter.BeginApplication(System.Boolean)">
            <summary>
            Marks the beginning of a function application with at least one argument; the first argument is the applied function.
            </summary>
            <param name="infix">Whether the operator, i.e. the first argument, should be displaced as an infix operator</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermSExpWriter.NextArgument">
            <summary>
            Marks the completion of the previous argument, and the beginning of the next.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermSExpWriter.EndApplication">
            <summary>
            Marks the end of a function application.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermSExpWriter.Write(System.Char)">
            <summary>
            Writes a character to the stream.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermSExpWriter.Encoding">
            <summary>
            Retrieves the encoding of the stream.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.State">
            <summary>
            Reference implementation of IState{Term}
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.IState">
            <summary>
            A mutable state which associates memory locates with terms.
            </summary>
            <remarks>
            The locations of a state consists of the static fields of the program,
            the instance fields of the objects, and the local variables and 
            evaluation stack content that belong to each stack frame
            and each thread of the state.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.AddThread(System.Int32)">
            <summary>
            Add a thread with the given index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.RemoveThread(System.Int32)">
            <summary>
            Remove a thread with the given index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.GetThread(System.Int32)">
            <summary>
            Gets an existing thread with the given index.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.Box(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Boxes an term.
            </summary>
            <param name="value">term of given type</param>
            <param name="type">type that <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasBoxType"/></param>
            <returns>reference to boxed value</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.GetValidAddressCondition(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Interpreter.IValidAddressConditionDescriptor@)">
            <summary>
            Computes the condition under which it is guaranteed that the given memory address
            points to a value of the given layout.
            </summary>
            <param name="layout">layout of value that is being read</param>
            <param name="address">address that points to value being read</param>
            <param name="description">The description of the problem, if any.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.Read(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Reads a value from an address.
            </summary>
            <remarks>
            The address must be a (managed or unmanaged) pointer to a value of the given layout.
            </remarks>
            <param name="layout">layout of value that is being read</param>
            <param name="address">address that points to value being read</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.ReadSzArrayElement(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Reads an element value from a single-dimensional, zero-based array at an index.
            </summary>
            <remarks>
            The element layout must match the element layout of the array type, and the index must match the index layout of the array type.
            </remarks>
            <param name="elementLayout">layout of element</param>
            <param name="array">reference to array</param>
            <param name="index">index into array</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.ReadMdArrayElement(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Reads an element value from a multi-dimensional array at an index.
            </summary>
            <remarks>
            The element layout must match the element layout of the array type, and the indices must match the index layout of the array type.
            </remarks>
            <param name="elementLayout">layout of element</param>
            <param name="array">reference to array</param>
            <param name="indices">indices into array</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.ReadBoxValueField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Reads the value stored in a box.
            </summary>
            <param name="box">reference to box</param>
            <param name="type">type of value stored in box</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.ReadObjectField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Reads the value stored in an instace field of an object.
            </summary>
            <param name="object">reference to an object</param>
            <param name="field">field of object</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.ReadStaticField(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Reads the value stored in a static field.
            </summary>
            <param name="field">static field</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.ReadStructField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Reads the value of a struct-field.
            </summary>
            <param name="address">address of a struct-value</param>
            <param name="field">instance field of the struct-type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.Store(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Stores a value of a given layout at a given address.
            </summary>
            <param name="layout">layout of value being stored</param>
            <param name="address">address where value is to be stored</param>
            <param name="value">value to be stored</param>
            <remarks>
            The address must be a (managed or unmanaged) pointer to a location with the given layout.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.StoreStaticField(Microsoft.ExtendedReflection.Metadata.Field,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Stores a value in a static field.
            </summary>
            <param name="field">static field</param>
            <param name="value">value with layout of the static field</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.StoreStructField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Stores a value in a struct.
            </summary>
            <param name="address">address of struct-value</param>
            <param name="field">instance field of struct-type</param>
            <param name="value">value with layout of instance field</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.StoreObjectField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Stores a value in an object's instance field.
            </summary>
            <param name="object">reference to object</param>
            <param name="field">instance-field of object</param>
            <param name="value">value with layout of instance field</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.Symbol(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Creates a unique symbol with the given layout.
            </summary>
            <param name="layout">layout of requested symbol</param>
            <remarks>
            The symbols returned by this method are unique only relative to this state.
            This allows two states to share symbols.
            This allows maximal sharing of terms between similar states.
            </remarks>
            <returns>symbol unique in this state</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.FunctionApplication(Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Creates a term that represents the invocation of a method.
            </summary>
            <param name="function">function</param>
            <param name="arguments">arguments with layouts of method parameters</param>
            <remarks>
            Each term that represents an invocation embeds a 'time-stamp' that 
            represents the state of the system at the time the invocation happened.
            The state inserts an appropriate time stamp into the returned invocation.
            </remarks>
            <returns>term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.NewObject(System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection)">
            <summary>
            Creates a new object with the given properties.
            </summary>
            <param name="track">whether field accesses on this object should be tracked</param>
            <param name="updateFieldsToDefaultValues">whether all instance fields of the new object should be updated to default values; if not, the instance fields' values are undefined</param>
            <param name="properties">a collection of object properties</param>
            <remarks>
            The returned object reference is only unique relative to this state.
            This allows two states to share object references.
            This allows maximal sharing of terms between similar states.
            </remarks>
            <returns>a reference to a new object</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.MemberwiseClone(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Creates a new object whose fields are initialized with the field values of a given object.
            </summary>
            <param name="object">object reference</param>
            <param name="hintType">type of object, if known</param>
            <returns>object reference</returns>
            <remarks>
            TODO. As is, this method is not reliable, as it relies on hints.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.TryGetEffectsTracker(Microsoft.ExtendedReflection.Interpretation.Effects.IEffectsTracker@)">
            <summary>
            Tries to retrieve the currently active effects tracker.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.StartTrackingEffects(Microsoft.ExtendedReflection.Interpretation.Effects.IEffectsTracker)">
            <summary>
            Starts tracking of effects.
            </summary>
            <remarks>
            No effects tracker may be active when this method is called.
            </remarks>
            <param name="effectsTracker"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.EndTrackingEffects">
            <summary>
            Ends tracking of effects.
            </summary>
            <remarks>
            An effect tracker must have been set with <see cref="M:Microsoft.ExtendedReflection.Interpretation.States.IState.StartTrackingEffects(Microsoft.ExtendedReflection.Interpretation.Effects.IEffectsTracker)"/> before.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.TryGetCorrectStackTrace(System.Object,Microsoft.ExtendedReflection.Symbols.StackTraceName@)">
            <summary>
            Gets the original stacktrace from the exception before
            any rethrow happens
            </summary>
            <param name="exception">The exception.</param>
            <param name="trace">The trace.</param>
            <returns></returns>
            <remarks>
            When an exception is rethrown, the rethrow site becomes the originating throw site.
            This is ok in most situations but since pex injects rethrows at each method,
            the stack trace becomes totally bogus.
            Therefore, Pex keeps track of the 'orignal' stack traces before being rethrow.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.IsTrue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the specified condition is true.
            </summary>
            <remarks>
            The result is false if the state cannot decide whether the condition evaluates to true.
            </remarks>
            <param name="condition">proper stack boolean</param>
            <returns>
            	<c>true</c> if the specified condition is true; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.Dump(Microsoft.ExtendedReflection.Logging.DumpTreeWriter,System.Int32)">
            <summary>
            Dumps a textual representation of the state.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="level">The level: 1 - pretty print, 2 - pretty print and raw</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.IsTypedPointer(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether a pointer can be typed as some type.
            </summary>
            <param name="type">The type.</param>
            <param name="pointer">The pointer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.Substitute(Microsoft.ExtendedReflection.Interpretation.ISubstitution)">
            <summary>
            Applies the specified substitution on all values.
            </summary>
            <param name="substitution">The substitution.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.TryGetConcreteObject(Microsoft.ExtendedReflection.Interpretation.Term,System.Object@)">
            <summary>
            Get the concrete object represented by an abstract object, if any.
            </summary>
            <param name="abstractObject">The abstract object.</param>
            <param name="concreteObject">The concrete object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.AddConcreteObject(Microsoft.ExtendedReflection.Interpretation.Term,System.Object,System.Boolean)">
            <summary>
            Adds a concrete object, indicating how it maps to an abstract object.
            </summary>
            <param name="abstractObject">The abstract object.</param>
            <param name="concreteObject">The concrete object.</param>
            <param name="slurpFields">Whether all fields of the concrete object should be tracked symbolically.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.IsAllocated(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether a pointer is allocated.
            </summary>
            <param name="pointer">The pointer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.TypedMalloc(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Creates a new symbolic pointer that results from malloc and update typeOf function
            </summary>
            <param name="type">The type.</param>
            <param name="pointer">The pointer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IState.TypedFree(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Frees the pointer.
            </summary>
            <param name="type">The type.</param>
            <param name="pointer">The pointer.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IState.TermConstructor">
            <summary>
            A constructor of terms from concrete values.
            </summary>
            <remarks>
            Contrary to the constructor provided by the TermManager, this constructor can suck mutable concrete objects into the abstract state.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IState.TermDestructor">
            <summary>
            A destructor of terms into concrete values.
            </summary>
            <remarks>
            Contrary to the destructor provided by the TermManager, this destructor can deal with terms obtained from mutable concrete objects.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IState.UniqueId">
            <summary>
            Gets or sets a unique id
            that is used as part of the identity of all created objects and symbols.        
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.SupportUnsafeTestInputs">
            <summary>
            Whether operations involving unsafe pointers should be treated with utmost precision
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.threads">
            <summary>
            mapping of thread index to thread
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.State._memoryMaps">
            <summary>
            memory map for primitive layouts
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.StaticFields">
            <summary>
            Static fields, indexed by their global index; <code>null</code> indicates that field was never accessed before
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.ObjectFieldMaps">
            <summary>
            Object field maps, indexed by their global index; <code>null</code> indicates that field was never accessed before
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.Initialize">
            <summary>
            Initializes this instance. Will be called exactly once.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.TryCompressState(Microsoft.ExtendedReflection.Interpretation.States.Impl.State.CompressedState@)">
            <summary>
            Tries to compress this state.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.AddConcreteObject(Microsoft.ExtendedReflection.Interpretation.Term,System.Object,System.Boolean)">
            <summary>
            Adds the object.
            </summary>
            <param name="abstractObject">The abstract object.</param>
            <param name="concreteObject">The concrete object.</param>
            <param name="slurpFields">Whether all fields of the concrete object should be tracked symbolically.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.TryGetConcreteObject(Microsoft.ExtendedReflection.Interpretation.Term,System.Object@)">
            <summary>
            Get the concrete object represented by an abstract object, if any.
            </summary>
            <param name="abstractObject">The abstract object.</param>
            <param name="concreteObject">The concrete object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.TryGetAbstractObject(System.Object,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Get the abstract object that represents a concrete object, if any.
            </summary>
            <param name="concreteObject">The concrete object.</param>
            <param name="abstractObject">The abstract object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.Substitute(Microsoft.ExtendedReflection.Interpretation.ISubstitution)">
            <summary>
            Applies the specified substitution on all cached values.
            </summary>
            <param name="substitution">The substitution.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.AddThread(System.Int32)">
            <summary>
            Add a thread with the given index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.CreateThread(System.Int32)">
            <summary>
            Create a new thread with the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.RemoveThread(System.Int32)">
            <summary>
            Remove a thread with the given index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.GetThread(System.Int32)">
            <summary>
            Gets an existing thread with the given index.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.Store(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Stores a value of a given layout at a given address.
            </summary>
            <param name="layout">layout of value being stored</param>
            <param name="address">address where value is to be stored</param>
            <param name="value">value to be stored</param>
            <remarks>
            The address must be a (managed or unmanaged) pointer to a location with the given layout.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.StoreObjectField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Stores a value in an object's instance field.
            </summary>
            <param name="object"></param>
            <param name="field">instance-field of object</param>
            <param name="value">value with layout of instance field</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.StoreStructField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.StoreStaticField(Microsoft.ExtendedReflection.Metadata.Field,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Stores a value in a static field.
            </summary>
            <param name="field">static field</param>
            <param name="value">value with layout of the static field</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.GetCurrentMethod">
            <summary>
            Retrieves the current method; only used for effect tracking purposes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.Symbol(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Creates a unique symbol with the given layout.
            </summary>
            <param name="layout">layout of requested symbol</param>
            <returns>symbol unique in this state</returns>
            <remarks>
            The symbols returned by this method are unique only relative to this state.
            This allows two states to share symbols.
            This allows maximal sharing of terms between similar states.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.FunctionApplication(Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Creates a term that represents the invocation of a method.
            </summary>
            <param name="function">function</param>
            <param name="arguments">arguments with layouts of method parameters</param>
            <returns>term</returns>
            <remarks>
            Each term that represents an invocation embeds a 'time-stamp' that
            represents the state of the system at the time the invocation happened.
            The state inserts an appropriate time stamp into the returned invocation.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.NewObject(System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Interpretation.ObjectPropertyCollection)">
            <summary>
            News the object.
            </summary>
            <param name="zeroFields">if set to <c>true</c> [zero fields].</param>
            <param name="track">if set to <c>true</c> [track].</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.MemberwiseClone(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Creates a new object whose fields are initialized with the field values of a given object.
            </summary>
            <param name="object">object reference</param>
            <param name="hintType">type of object, if known</param>
            <returns>object reference</returns>
            <remarks>
            TODO. As is, this method is not reliable, as it relies on hints.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.GetValidAddressCondition(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Interpreter.IValidAddressConditionDescriptor@)">
            <summary>
            Computes the condition under which it is guaranteed that the given memory address
            points to a value of the given layout.
            </summary>
            <param name="layout">layout of value that is being read</param>
            <param name="address">address that points to value being read</param>
            <param name="description">The description of the problem, if any.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.Read(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Reads a value from an address.
            </summary>
            <param name="layout">layout of value that is being read</param>
            <param name="address">address that points to value being read</param>
            <returns></returns>
            <remarks>
            The address must be a (managed or unmanaged) pointer to a value of the given layout.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.ReadObjectField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Reads the value stored in an instace field of an object.
            </summary>
            <param name="object"></param>
            <param name="field">field of object</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.ReadStaticField(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Reads the static field.
            </summary>
            <param name="staticField">The static field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.ReadObjectFieldMap(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Reads the object field map.
            </summary>
            <param name="instanceField">The instance field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.ReadStructField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Reads the value of a struct-field.
            </summary>
            <param name="address">address of a struct-value</param>
            <param name="field">instance field of the struct-type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.ReadSzArrayElement(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Reads an element value from a single-dimensional, zero-based array at an index.
            </summary>
            <param name="elementLayout">layout of element</param>
            <param name="array">reference to array</param>
            <param name="index">index into array</param>
            <returns></returns>
            <remarks>
            The element layout must match the element layout of the array type, and the index must match the index layout of the array type.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.ReadMdArrayElement(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Reads an element value from a multi-dimensional array at an index.
            </summary>
            <param name="elementLayout">layout of element</param>
            <param name="array">reference to array</param>
            <param name="indices">indices into array</param>
            <returns></returns>
            <remarks>
            The element layout must match the element layout of the array type, and the indices must match the index layout of the array type.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.Box(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Boxes an term.
            </summary>
            <param name="value">term of given type</param>
            <param name="type">type that <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasBoxType"/></param>
            <returns>reference to boxed value</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.ReadBoxValueField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Reads the box value field.
            </summary>
            <param name="box">The box.</param>
            <param name="valueType">Type of the value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.TryGetInitialMemoryMap(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to get an initial value for the memory map.
            </summary>
            <param name="elementLayout">The element layout.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.SetMemoryValue(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.TermBuilder)">
            <summary>
            Sets the memory value.
            </summary>
            <param name="address">The address.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.SetMemoryValueSplitOld(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.TermBuilder)">
            <summary>
            Sets the memory value (in a split way).
            </summary>
            <param name="address">The address.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.SetMemoryValueSplit(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.TermBuilder)">
            <summary>
            Sets the memory value (in a split way).
            </summary>
            <param name="address">The address.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.SetMemoryValueNoSplit(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.TermBuilder)">
            <summary>
            Sets the memory value without splitting
            </summary>
            <param name="address">The address.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.TryGetMemoryValue(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.TermBuilder@)">
            <summary>
            Tries to query the memory value.
            </summary>
            <param name="address">The address.</param>
            <param name="elementLayout">The element layout.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.AddCorrectStackTrace(System.Object)">
            <summary>
            </summary>
            <param name="exception"></param>
            <remarks>This method expects to be at least 4 frames away from the user code</remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.TryGetCorrectStackTrace(System.Object,Microsoft.ExtendedReflection.Symbols.StackTraceName@)">
            <summary>
            Gets the original stacktrace from the exception before
            any rethrow happens
            </summary>
            <param name="exception">The exception.</param>
            <param name="trace">The trace.</param>
            <returns></returns>
            <remarks>
            When an exception is rethrown, the rethrow site becomes the originating throw site.
            This is ok in most situations but since pex injects rethrows at each method,
            the stack trace becomes totally bogus.
            Therefore, Pex keeps track of the 'orignal' stack traces before being rethrow.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.IsTrue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the specified condition is true.
            </summary>
            <param name="condition">proper stack boolean</param>
            <returns>
            	<c>true</c> if the specified condition is true; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The result is false if the state cannot decide whether the condition evaluates to true.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.Dump(Microsoft.ExtendedReflection.Logging.DumpTreeWriter,System.Int32)">
            <summary>
            Dumps a textual representation of the state.
            </summary>
            <param name="dump">The dump.</param>
            <param name="level">The level: 1 - pretty print, 2 - pretty print and raw</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.IsTypedPointer(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether a pointer can be typed as some type.
            </summary>
            <param name="type">The type.</param>
            <param name="pointer">The pointer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.IsAllocated(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether a pointer is allocated.
            </summary>
            <param name="pointer">The pointer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.TypedMalloc(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Creates a new symbolic pointer that results from malloc and update typeOf function
            </summary>
            <param name="type">The type.</param>
            <param name="pointer">The pointer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.TypedFree(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Frees the pointer.
            </summary>
            <param name="type">The type.</param>
            <param name="pointer">The pointer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.TermManager">
            <summary>
            The value manager used with this state.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.TermConstructor">
            <summary>
            A constructor of terms from concrete values.
            </summary>
            <value></value>
            <remarks>
            Contrary to the constructor provided by the TermManager, this constructor can suck mutable concrete objects into the abstract state.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.TermDestructor">
            <summary>
            A destructor of terms into concrete values.
            </summary>
            <value></value>
            <remarks>
            Contrary to the destructor provided by the TermManager, this destructor can deal with terms obtained from mutable concrete objects.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.CompressedState">
            <summary>
            Compressed state
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.CompressedState.#ctor(Microsoft.ExtendedReflection.Interpretation.States.Impl.State)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.CompressedState"/> class.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.CompressedState.Uncompress(Microsoft.ExtendedReflection.Interpretation.States.Impl.State)">
            <summary>
            Uncompresses this state.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.CompressedState.CollectLiveTerms(Microsoft.ExtendedReflection.Interpretation.ITermCollector)">
            <summary>
            Collects a list of all currently referenced terms.
            </summary>
            <param name="collection">callback to announce referenced terms</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.CompressedState.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.Destructor">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.UnsafeAwareVisitor`2">
            <summary>
            Unsafe aware visitor
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.UnsafeAwareVisitor`2.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Interpretation.States.Impl.State)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.IndirectReader">
            <summary>
            Indirect reader
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.IndirectReader.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Interpretation.States.Impl.State)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.IValidAddressConditionDescriptor">
            <summary>
            Call ToString to get a textual description.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.IValidAddressConditionDescriptor.ToString">
            <summary>
            Creates a textual description.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.IndirectStorer">
            <summary>
            Indirect storer
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.IndirectStorer.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Interpretation.States.Impl.State)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.Void">
            <summary>
            Void
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.State.Constructor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame">
            <summary>
            Stripped-down frame
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.IFrame">
            <summary>
            Interface that enables manipulation of locations within a stack frame.
            </summary>
            <remarks>
            The locations of a stack frame consist of the arguments, the local variables,
            and the content of the evaluation stack.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.ReadArgument(System.Int32)">
            <summary>
            Retrieves an argument value.
            </summary>
            <param name="argumentIndex">between 0 and (<see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.ArgumentTypes"/>.Count-1)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.ReadLocal(System.Int32)">
            <summary>
            Retrieves current value stored in a local variables.
            </summary>
            <param name="localIndex">between 0 and (<see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.LocalTypes"/>.Count-1)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.ReadStackTop">
            <summary>
            Retrieves the topmost element on the evaluation stack.
            </summary>
            <remarks>
            The evaluation stack must not be empty.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.StackTop(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Updates the current stack top with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.StoreArgument(System.Int32,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Overrides an argument value.
            </summary>
            <param name="argumentIndex">between 0 and (<see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.ArgumentTypes"/>.Count-1)</param>
            <param name="value">value of matching layout</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.StoreLocal(System.Int32,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Sets the value stored in a local variable.
            </summary>
            <param name="localIndex">between 0 and (<see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.LocalTypes"/>.Count-1)</param>
            <param name="value">value of matching layout</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.StoreStackTop(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Overrides the topmost element on the evaluation stack.
            </summary>
            <remarks>
            The evaluation stack must not be empty.
            </remarks>
            <param name="value">value with same layout as topmost element on evaluation stack</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.EnsureStack(System.Int32)">
            <summary>
            Make sure that there are at least <see>count</see> many free slots on the evaluation stack,
            by possibly enlarging the stack.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.Push(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Pushes a value onto the evaluation stack.
            </summary>
            <param name="value">any term</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.Pop">
            <summary>
            Pops topmost value off the evaluation stack.
            </summary>
            <remarks>
            The evaluation stack must not be empty.
            </remarks>
            <returns>popped term</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.Pop(System.Int32)">
            <summary>
            Pops <paramref name="count"/> many values off the evaluation stack.
            </summary>
            <param name="count">how many elements to pop</param>
            <remarks>
            The evaluation stack must hold at least <paramref name="count"/> many elements.
            </remarks>
            <returns>popped terms</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.PopAll">
            <summary>
            Pops all values off the evaluation stack.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.BeginCall(System.Int32,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Indicates that a call is about to happen.
            </summary>
            <param name="offset">The MSIL offset in the current method where this call was initiated.</param>
            <param name="newObject">newly created object reference</param>
            <param name="constructor">called constructor</param>
            <param name="varArgTypes">types of optional variable arguments</param>
            <remarks>
            This version initiates that a call to an object constructor method.
            Afterwards, <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsCallInProgress"/> returns <code>true</code>.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.BeginCall(System.Int32,System.Boolean,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Indicates that this frame is about to call another method
            Afterwards, <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsCallInProgress"/> returns <code>true</code>.
            </summary>
            <param name="offset">The MSIL offset in the current method where this call was initiated.</param>
            <param name="indirectRefReceiver">whether the first argument is an address to the actual receiver object reference</param>
            <param name="signature">signature of called method</param>
            <param name="varArgTypes">types of optional variable arguments</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.SetCallMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Updates the target signature of the call for a virtual method call
            after the target method has been resolved.
            </summary>
            <param name="target">updated method signature</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.SetCallReceiver(System.Object)">
            <summary>
            Sets the target receiver of the call for a method call.
            </summary>
            <param name="receiver">receiver object</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.CallResult(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Sets the result of the current call.
            </summary>
            <remarks>
            Only allowed if <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsCallInProgress"/>.
            Should only be called if <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsCallResultRequested"/>.
            Layout of result must be consistent with <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.CallResultType"/>,
            but in stack form.
            </remarks>
            <param name="result">result</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.SetCallResult(System.Boolean,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Sets the result of the current call.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.EndCall(System.Int32,Microsoft.ExtendedReflection.Interpretation.States.EndCallKind)">
            <summary>
            Indicates that a call has finished.
            Afterwards, <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsCallInProgress"/> returns <code>false</code>.
            </summary>
            <param name="codeLabel">The code label.</param>
            <param name="kind">How the call ended</param>
            <remarks>
            Only allowed if <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsCallInProgress"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.SetResult(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Sets the result of this stack frame.
            </summary>
            <param name="result">result with layout of result layout of <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.Method"/></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.TryGetResult(Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Attempts to obtain result of this stack frame.
            </summary>
            <param name="result">result</param>
            <returns>whether result could be obtained</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.AddLocalMemoryRegion(System.UIntPtr)">
            <summary>
            Registers a memory region whose lifetime is restricted to this stack frame.
            </summary>
            <param name="baseAddress">starting address of memory region</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.GotException(System.Object)">
            <summary>
            Called whenever an exception is witnessed during the processing of a frame.
            (This call is used to record the correct stack trace, if not cached yet.)
            </summary>
            <param name="exceptionObject">The exception.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.MarkExceptionAsExpected(System.Object)">
            <summary>
            When an exception is witnessed, and it is not marked as an expected exception,
            then the exception probably indicates an error in the program.
            </summary>
            <param name="exceptionObject"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.Compress">
            <summary>
            Compresses this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.Thread">
            <summary>
            The thread that this frame belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.Method">
            <summary>
            Method that is executed in this frame.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.ProgramCounter">
            <summary>
            An abstract program counter; does not have to correspond to actual program counter, but must be precise enough to distinguish different call stacks.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.NextInstructionOffset">
            <summary>
            The offset of the next instruction to execute, or -1 if unavailable.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.CallerFrame">
            <summary>
            CallerFrame stack frame, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.FrameIndex">
            <summary>
            Index of this stack frame; can be used with <see cref="M:Microsoft.ExtendedReflection.Interpretation.States.IThread.GetStackFrame(System.Int32)"/>.
            </summary>
            <remarks>
            This index represents the depth of the stack frame starting with 0.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.LocalTypes">
            <summary>
            Retrieves formal types of all declared local variables.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.ArgumentTypes">
            <summary>
            Retrieves formal parameter types of all declared arguments.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsStackTopRequested">
            <summary>
            Checks whether the current stack top should be updated.
            </summary>
            <remarks>
            The evaluation stack must not be empty.
            </remarks>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsCallInProgress">
            <summary>
            Returns <code>true</code> when a method called from this frame is being executed
            In other words, it returns <code>true</code> after a BeginCall is called, for which
            the corresponding EndCall() is has not been executed so far.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsCallResultRequested">
            <summary>
            Checks whether a call to <see cref="M:Microsoft.ExtendedReflection.Interpretation.States.IFrame.CallResult(Microsoft.ExtendedReflection.Interpretation.Term)"/> is requested.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.HasCallResultBeenProvided">
            <summary>
            Checks whether a call result has been provided externally (e.g. because <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsCallResultRequested"/>).
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.CallResultType">
            <summary>
            Retrieves the expected result type of the current call.
            </summary>
            <remarks>
            Only allowed if <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsCallInProgress"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.CallVarArgTypes">
            <summary>
            Retrieves the vararg types of the current call.
            </summary>
            <remarks>
            Only allowed if <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsCallInProgress"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.CallSignature">
            <summary>
            Retrieves the signature of the current call.
            May be <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.Method"/> if available.
            </summary>
            <remarks>
            Only allowed if <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsCallInProgress"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.CallMethod">
            <summary>
            Retrieves the target method of the current call.
            May be <code>null</code> if the target method is not known, e.g. when doing an indirect call.
            </summary>
            <remarks>
            Only allowed if <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsCallInProgress"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.CallArguments">
            <summary>
            Retrieves the arguments of the current call.
            Note: arguments refer to the arguments of the callee, 
            not for the call that this frame represents.
            Only allowed if <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsCallInProgress"/> return <code>true</code>
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.CallReceiver">
            <summary>
            Receiver instance of the last method call. Null for static/struct call.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IFrame.IsValid">
            <summary>
            Whether this stack frame is activated and has not been popped yet.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.TermManager">
            <summary> 
            The term manager.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.Thread">
            <summary>
            The thread this frame belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CallerFrame">
            <summary>
            The stack frame onto which this stack frame was pushed.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.FrameIndex">
            <summary>
            The index of this stack frame into the list of frames in the thread.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.Method">
            <summary>
            The method which this stack frame belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.ArgumentTypes">
            <summary>
            Equals Method.ParameterTypes, possible extended with the types of varargs arguments.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.Arguments">
            <summary>
            The arguments passed to the <see cref="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.Method"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.LocalTypes">
            <summary>
            Equals <see cref="P:Microsoft.ExtendedReflection.Metadata.MethodBodyEx.LocalTypes"/> of Method.Body.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.Locals">
            <summary>
            The values of all local variables; <code>null</code> represents the default value
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.OperandStack">
            <summary>
            The operand stack; this array has as many elements as indicated in <see cref="P:Microsoft.ExtendedReflection.Metadata.MethodBodyEx.MaxStackSize"/> of Method.Body.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.OperandStackSize">
            <summary>
            The number of elements currently on the operand stack.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame._localMemoryRegions">
            <summary>
            All unsafe local memory regions, e.g. memory allocated with localloc.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.frameResult">
            <summary>
            The result value of this stack frame.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.hasFrameResult">
            <summary>
            Whether this stack frame has a result value.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.ProgramCounter">
            <summary>
            The program counter, or an abstraction of it.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.NextInstructionOffset">
            <summary>
            The offset of the next instruction to execute, or -1 if unavailable.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CallMethodSignature">
            <summary>
            After a call from this stack frame has initiated,
            the signature of the target method.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CallVarArgTypes">
            <summary>
            After a call from this stack frame has initiated,
            the vararg types of the target method.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CallArguments">
            <summary>
            After a call from this stack frame has initiated,
            the arguments passed to target method.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CallResultType">
            <summary>
            After a call from this stack frame has initiated and finished,
            the result of the call to the target method.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CallExecuted">
            <summary>
            After a call from this stack frame has initiated,
            whether the call was executed.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.HasCallResultBeenProvided">
            <summary>
            Whether a call result was provided externally.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.isInvalid">
            <summary>
            Whether this stack frame is activate and has not been popped yet.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.callReceiver">
            <summary>
            After a call from this stack frame has initiated,
            the concrete receiver object.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.isCallback">
            <summary>
            Whether this frame could not be associated with a call from the previous frame.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.callInterpreter">
            <summary>
            Call interpreter
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.#ctor(Microsoft.ExtendedReflection.Interpretation.States.IThread,Microsoft.ExtendedReflection.Interpretation.States.IFrame,System.Int32,Microsoft.ExtendedReflection.Metadata.Method,System.Boolean@)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.#ctor(Microsoft.ExtendedReflection.Interpretation.States.IThread,Microsoft.ExtendedReflection.Interpretation.States.IFrame,System.Int32,Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CompressedFrame)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.TryConvertArguments(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.Term[],Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term[]@)">
            <summary>
            Tries to match arguments of a call, possibly doing more than defined in ECMA standard.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.TryConvertArgumentsEcmaStyle(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.Term[],System.Int32,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term[]@)">
            <summary>
            Tries to match/convert parameter values as defined in the ECMA standard.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.TryConvertArgumentEcmaStyle(System.Int32,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to match/convert parameter values as defined in the ECMA standard.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.TraceSymbol(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.Trace(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.BeginCall(System.Int32,System.Boolean,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Indicates that a call is about to happen.
            Afterwards, IsCallInProgress returns <code>true</code>.
            </summary>
            <param name="offset">The MSIL offset in the current method where this call was initiated.</param>
            <param name="indirectRefReceiver">whether the first argument is an address to the actual receiver object reference</param>
            <param name="signature">signature of called method</param>
            <param name="varArgTypes">types of optional variable arguments</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.BeginCall(System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Begins the call.
            </summary>
            <param name="offset">The offset.</param>
            <param name="signature">The signature.</param>
            <param name="varArgTypes">The var arg types.</param>
            <param name="callArguments">The call arguments.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.BeginCall(System.Int32,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Indicates that a call is about to happen.
            </summary>
            <param name="offset">The MSIL offset in the current method where this call was initiated.</param>
            <param name="newObject">newly created object reference</param>
            <param name="constructor">called constructor</param>
            <param name="varArgTypes">types of optional variable arguments</param>
            <remarks>
            This version initiates that a call to an object constructor method.
            Afterwards, IsCallInProgress returns <code>true</code>.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.SetCallMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Updated target method on a virtual call.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CallResult(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Sets the result of the current call.
            </summary>
            <param name="result">result</param>
            <remarks>
            Only allowed if IsCallInProgress.
            Should only be called if <see cref="P:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.IsCallResultRequested"/>.
            Layout of result must be consistent with CallResultType,
            but in stack form.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.StackTop(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Updates the current stack top with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.EndCall(System.Int32,Microsoft.ExtendedReflection.Interpretation.States.EndCallKind)">
            <summary>
            Indicates that a call has finished.
            Afterwards, IsCallInprocess returns <code>false</code>.
            </summary>
            <param name="codeLabel">The code label.</param>
            <param name="kind">End call kind</param>
            <remarks>
            Only allowed if IsCallInprocess.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.EndCallProcessFunctionApplication(Microsoft.ExtendedReflection.Interpretation.States.EndCallKind)">
            <summary>
            Ends a call, injecting a function application term as the result value, if appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.EndCallProcessCallInterpreter(Microsoft.ExtendedReflection.Interpretation.States.EndCallKind)">
            <summary>
            Ends a call, injecting a value computed by a call interpreter, if any.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.SetResult(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Sets the result of this stack frame.
            </summary>
            <param name="result">result with layout of result layout of <see cref="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.Method"/></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.EnsureStack(System.Int32)">
            <summary>
            Make sure that there are at least <see>count</see> many free slots on the evaluation stack,
            by possibly enlarging the stack.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.Push(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Pushes the specified term.
            </summary>
            <param name="term">The term.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.Pop">
            <summary>
            Pops topmost value off the evaluation stack.
            </summary>
            <returns>popped term</returns>
            <remarks>
            The evaluation stack must not be empty.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.Pop(System.Int32)">
            <summary>
            Pops the specified n.
            </summary>
            <param name="n">The n.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.ReadArgument(System.Int32)">
            <summary>
            Retrieves an argument value.
            </summary>
            <param name="argumentIndex">between 0 and (ArgumentTypes.Count-1)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.ReadStackTop">
            <summary>
            Retrieves the topmost element on the evaluation stack.
            </summary>
            <returns></returns>
            <remarks>
            The evaluation stack must not be empty.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.StoreArgument(System.Int32,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Overrides an argument value.
            </summary>
            <param name="argumentIndex">between 0 and (ArgumentTypes.Count-1)</param>
            <param name="value">value of matching layout</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.StoreLocal(System.Int32,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Sets the value stored in a local variable.
            </summary>
            <param name="localIndex">between 0 and (LocalTypes.Count-1)</param>
            <param name="value">value of matching layout</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.StoreStackTop(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Overrides the topmost element on the evaluation stack.
            </summary>
            <param name="value">value with same layout as topmost element on evaluation stack</param>
            <remarks>
            The evaluation stack must not be empty.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.GotException(System.Object)">
            <summary>
            Called whenever an exception is witnessed during the processing of a frame.
            (This call is used to record the correct stack trace, if not cached yet.)
            </summary>
            <param name="exceptionObject">The exception.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.MarkExceptionAsExpected(System.Object)">
            <summary>
            When an exception is witnessed, and it is not marked as an expected exception,
            then the exception probably indicates an error in the program.
            </summary>
            <param name="exceptionObject"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.Compress">
            <summary>
            Compresses this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.tryRewriteResult(Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Rewrite result of call. May use 'callArguments' to refer to arguments of call.
            </summary>
            <param name="newResult"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.LogObservedCallMismatch">
            <summary>
            Whether to log observed call mismatches
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.IsStackTopRequested">
            <summary>
            Checks whether the current stack top should be updated.
            </summary>
            <remarks>
            The evaluation stack must not be empty.
            </remarks>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.IsCallResultRequested">
            <summary>
            Checks whether a call to <see cref="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CallResult(Microsoft.ExtendedReflection.Interpretation.Term)"/> is requested.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.IsValid">
            <summary>
            Whether this stack frame is activated and has not been popped yet.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CompressedFrame">
            <summary>
            Compressed frame
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.ICompressedFrame">
            <summary>
            Compressed frame
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.ICompressedFrame.Uncompress(Microsoft.ExtendedReflection.Interpretation.States.IThread,Microsoft.ExtendedReflection.Interpretation.States.IFrame,System.Int32)">
            <summary>
            Uncompresses this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CompressedFrame.#ctor(Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CompressedFrame"/> class.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CompressedFrame.Uncompress(Microsoft.ExtendedReflection.Interpretation.States.IThread,Microsoft.ExtendedReflection.Interpretation.States.IFrame,System.Int32)">
            <summary>
            Uncompresses this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CompressedFrame.CollectLiveTerms(Microsoft.ExtendedReflection.Interpretation.ITermCollector)">
            <summary>
            Collects a list of all currently referenced terms.
            </summary>
            <param name="collection">callback to announce referenced terms</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Frame.CompressedFrame.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.EndCallKind">
            <summary>
            Different ways how a call can be ended
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.EndCallKind.Normal">
            <summary>
            Call ended normally
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.EndCallKind.InvalidCallVirt">
            <summary>
            Call ended normally, but receiver type of virtual call couldn't be determined,
            because of an exception such as NullReferenceException on the receiver value
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.EndCallKind.Canceled">
            <summary>
            Call was canceled (happens as part of reflection calls)
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.IThread">
            <summary>
            Interface that enables manipulation of thread-location locations
            of a particular thread of a <see cref="T:Microsoft.ExtendedReflection.Interpretation.States.IState"/>.
            </summary>
            <remarks>
            A thread manages a stack of frames.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IThread.GetStackFrame(System.Int32)">
            <summary>
            Retrieves an existing stack frame.
            </summary>
            <param name="frameIndex">index of existing stack frame</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IThread.SetMainResultTypeAndArguments(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Before the first stack frame is pushed in this thread,
            the arguments of the upcoming first method call can be specified 
            with this method.
            </summary>
            <param name="resultType">expected result type of first method call</param>
            <param name="arguments">arguments provided to first method call</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IThread.PushStackFrame(Microsoft.ExtendedReflection.Metadata.Method,System.Boolean@)">
            <summary>
            Pushed a new stack frame.
            </summary>
            <param name="method">method to which the pushed frame belong</param>
            <param name="needArguments">whether the arguments for this frame could not be determined from the previous stack frame</param>
            <remarks>
            <paramref name="&gt;needArguments"/> can be set to true if <see cref="M:Microsoft.ExtendedReflection.Interpretation.States.IThread.SetMainResultTypeAndArguments(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Interpretation.Term[])"/> was not called before the first 
            <see cref="M:Microsoft.ExtendedReflection.Interpretation.States.IThread.PushStackFrame(Microsoft.ExtendedReflection.Metadata.Method,System.Boolean@)"/>, or it can be set to true if the evaluation stack of the previous stack frame does not contain values that match
            the parameter types of the given <paramref name="method"/>.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IThread.PopStackFrame">
            <summary>
            Pops the current stack frame.
            </summary>
            <remarks>
            The current stack frame is not automatically disposed;
            this must be done by the caller.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IThread.SetCurrentFrameResult(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Sets the result value of the current stack frame, or the main result value if no frame has been pushed.
            </summary>
            <param name="result">result</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IThread.GetCurrentFrameArguments">
            <summary>
            Gets the argument values of the current stack frame, or the main arguments if no frame has been pushed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IThread.SetMainResult(System.Boolean,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Sets the result of the thread's main method
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IThread.TryGetMainResult(Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain the result value of the main stack frame.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IThread.Join">
            <summary>
            Indicates that execution in this thread has reached a join-point.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.IThread.Compress">
            <summary>
            Compresses this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IThread.InstructionInterpreter">
            <summary>
            Gets the instruction interpreter associated with this thread.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IThread.State">
            <summary>
            Retrieves the state associated with the thread.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IThread.ThreadId">
            <summary>
            Retrieves identifier of this thread.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IThread.CurrentFrame">
            <summary>
            Get current frame
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IThread.MainArguments">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IThread.IsStackEmpty">
            <summary>
            Checks if there is no stack frame.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.IThread.HasMainExecuted">
            <summary>
            Whether a first stack frame has been pushed yet.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.ICompressedThread">
            <summary>
            Compressed thread.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.ICompressedThread.Uncompress(Microsoft.ExtendedReflection.ComponentModel.IPathComponent,System.Int32)">
            <summary>
            Uncompresses the compressed thread.
            </summary>
            <param name="host">The host.</param>
            <param name="threadId">The thread id.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread">
            <summary>
            Default implementation of <see cref="T:Microsoft.ExtendedReflection.Interpretation.States.IThread"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.State">
            <summary>
            The state to which this thread belongs.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.ThreadId">
            <summary>
            The id of this thread.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.Frames">
            <summary>
            The stack of frames that currently exist in this thread.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.mainArguments">
            <summary>
            The arguments passed to the entry point of the thread.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.mainResultType">
            <summary>
            The type of the result of the entry point of the thread.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.hasMainExecuted">
            <summary>
            Whether the thread has been executed.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.mainResult">
            <summary>
            The result of the entry point of the thread.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.hasMainResult">
            <summary>
            Whether the entry point of the thread has run and returned a result.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.interpreter">
            <summary>
            The instruction interpreter associated with this thread.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.TermManager">
            <summary>
            The term manager.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.#ctor(Microsoft.ExtendedReflection.Interpretation.States.IState,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="state">The state.</param>
            <param name="threadId">The thread id.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.#ctor(Microsoft.ExtendedReflection.ComponentModel.IPathComponent,System.Int32,Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.CompressedThread)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="threadId">The thread id.</param>
            <param name="compressedThread">The compressed thread.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.CreateInterpreter">
            <summary>
            Creates the instruction interpreter associated with this thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.CreateFrame(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.States.IFrame,System.Int32,System.Boolean@)">
            <summary>
            Creates a new stack frame that is going to be pushed on the stack.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.Join">
            <summary>
            Called when execution of this thread has reached a join point.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.Compress">
            <summary>
            Compresses this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.InstructionInterpreter">
            <summary>
            Gets the instruction interpreter associated with this thread.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.CompressedThread">
            <summary>
            Compressed thread
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.CompressedThread.#ctor(Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.CompressedThread"/> class.
            </summary>
            <param name="thread">The thread.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.CompressedThread.CollectLiveTerms(Microsoft.ExtendedReflection.Interpretation.ITermCollector)">
            <summary>
            Collects a list of all currently referenced terms.
            </summary>
            <param name="collection">callback to announce referenced terms</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.CompressedThread.Uncompress(Microsoft.ExtendedReflection.ComponentModel.IPathComponent,System.Int32)">
            <summary>
            Uncompresses the compressed thread.
            </summary>
            <param name="host">The host.</param>
            <param name="threadId">The thread id.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.States.Impl.Thread.CompressedThread.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.IEventLog">
            <summary>
            An event logger
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.AddEventFilter(Microsoft.ExtendedReflection.Logging.ILogEventFilter)">
            <summary>
            Adds an event filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.Close">
            <summary>
            Closes the log
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.Flush">
            <summary>
            Flushes pending log operations
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.WorkerThreadAsForeground(System.Threading.Thread)">
            <summary>
            Creates a context during which the worker thread is treaded as foreground thread.
            </summary>
            <param name="thread">The thread.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.IsIgnored(Microsoft.ExtendedReflection.Logging.LogLevel,System.String,System.String,System.String,System.Exception,Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Determines whether the specified level is ignored.
            </summary>
            <param name="level">The level.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="targetName">Name of the target (may be null).</param>
            <returns>
            	<c>true</c> if the specified level is ignored; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogUnfiltered(Microsoft.ExtendedReflection.Logging.LogEventArgs)">
            <summary>
            Logs event without applying filters
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.Log(Microsoft.ExtendedReflection.Logging.LogLevel,System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Exception,Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Logs at the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
            <param name="caughtException">The caught exception.</param>
            <param name="targetName">Name of the target (may be null).</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogNoisy(System.String,System.String)">
            <summary>
            Logs a very verbose message
            </summary>
            <param name="category"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogNoisy(System.String,System.String,System.Object[])">
            <summary>
            Logs a very verbose message
            </summary>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogVerbose(System.String,System.String)">
            <summary>
            Logs a verbose event
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogVerbose(System.String,System.String,System.Object[])">
            <summary>
            Logs a verbose event
            </summary>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogMessage(System.String,System.String)">
            <summary>
            Logs an informational event
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogMessage(System.String,System.String,System.Object[])">
            <summary>
            Logs an informational event
            </summary>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogWarning(System.String,System.String,System.String)">
            <summary>
            Logs an warning event; warnings usually give feedback about suboptimal user input.
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogWarning(System.String,System.String,System.String,System.Object[])">
            <summary>
            Logs an warning event; warnings usually give feedback about suboptimal user input.
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogWarning(System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String)">
            <summary>
            Logs an warning event; warnings usually give feedback about suboptimal user input.
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogWarning(System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Object[])">
            <summary>
            Logs an warning event; warnings usually give feedback about suboptimal user input.
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogWarningFromException(System.Exception,System.String,System.String,System.String)">
            <summary>
            Logs an warning event; warnings usually give feedback about suboptimal user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogWarningFromException(System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Logs an warning event; warnings usually give feedback about suboptimal user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogWarningFromException(System.Exception,System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String)">
            <summary>
            Logs an warning event; warnings usually give feedback about suboptimal user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogWarningFromException(System.Exception,System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Object[])">
            <summary>
            Logs an warning event; warnings usually give feedback about suboptimal user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogError(System.String,System.String,System.String)">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogError(System.String,System.String,System.String,System.Object[])">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogErrorFromException(System.Exception,System.String,System.String,System.String)">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogErrorFromException(System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogError(System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String)">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogError(System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Object[])">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogErrorFromException(System.Exception,System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String)">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogErrorFromException(System.Exception,System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Object[])">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogCriticalFromException(System.Exception,System.String,System.String,System.String)">
            <summary>
            Logs a critical error event; critical errors are internal errors and should never happen regardless of user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.LogCriticalFromException(System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Logs a critical error event; critical errors are internal errors and should never happen regardless of user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.Dump(System.String,System.String,System.String)">
            <summary>
            Dumps information
            </summary>
            <param name="category">The category.</param>
            <param name="title">The title.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.Dump(System.String,Microsoft.ExtendedReflection.Logging.DumpTree)">
            <summary>
            Dumps information
            </summary>
            <param name="category">The category.</param>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.CreateDumpWriter(System.String,System.String)">
            <summary>
            Opens a dump writer to build a dump tree
            </summary>
            <param name="category">The category.</param>
            <param name="title">The title.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.ReflectionError(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String)">
            <summary>
            Log a reflection error.
            </summary>
            <param name="targetName">Name of the target.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.ReflectionError(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Object[])">
            <summary>
            Log a reflection error.
            </summary>
            <param name="targetName">Name of the target.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.ReflectionErrorFromException(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.String,System.Exception)">
            <summary>
            Log a reflection error.
            </summary>
            <param name="targetName">Name of the target.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.ReflectionWarning(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String)">
            <summary>
            Log a reflection warning.
            </summary>
            <param name="targetName">Name of the target.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.ReflectionWarning(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Object[])">
            <summary>
            Log a reflection warning.
            </summary>
            <param name="targetName">Name of the target.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.ReflectionWarningFromException(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.String,System.Exception)">
            <summary>
            Log a reflection warning.
            </summary>
            <param name="targetName">Name of the target.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.ReflectionEvent(Microsoft.ExtendedReflection.Logging.ReflectionEventEventArgs)">
            <summary>
            Log a reflection event.
            </summary>
            <param name="e">The <see cref="T:Microsoft.ExtendedReflection.Logging.ReflectionEventEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.Hyperlink(System.String,System.String)">
            <summary>
            Logs a linked document
            </summary>
            <param name="title"></param>
            <param name="url"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IEventLog.Hyperlink(Microsoft.ExtendedReflection.Logging.HyperlinkEventArgs)">
            <summary>
            Logs a linked document
            </summary>
            <param name="hyperlink"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.IEventLog.WarningCount">
            <summary>
            Gets the warning count.
            </summary>
            <value>The warning count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.IEventLog.ErrorCount">
            <summary>
            Gets the error count.
            </summary>
            <value>The error count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.IEventLog.CriticalCount">
            <summary>
            Gets the critical count.
            </summary>
            <value>The critical count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.IEventLog.ReflectionErrorCount">
            <summary>
            Gets the reflection error count.
            </summary>
            <value>The reflection error count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.IEventLog.ReflectionWarningCount">
            <summary>
            Gets the reflection warning count.
            </summary>
            <value>The reflection warning count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.IEventLog.EventFilters">
            <summary>
            Gets the event filters.
            </summary>
            <value>The event filters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.IEventLog.Verbosity">
            <summary>
            Gets or sets the minimum level. Noisier levels
            will be trashed away
            </summary>
            <value>The minimum level.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ILogEventFilter">
            <summary>
            A filter for logging events
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ILogEventFilter.Ignore(Microsoft.ExtendedReflection.Logging.LogEventArgs)">
            <summary>
            Gets a value indicating wheter the particular event should
            be ignored
            </summary>
            <param name="e">The <see cref="T:Microsoft.ExtendedReflection.Logging.LogEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.LogEventFilterCollection">
            <summary>
            A collection of <see cref="T:Microsoft.ExtendedReflection.Logging.ILogEventFilter"/>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeList`1">
            <summary>
            A safe replacement for list.
            </summary>
            <remarks>
            Safe here means that this class will not be instrumented.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Collections.SafeList`1._items">
            <summary>
            _items
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Collections.SafeList`1._size">
            <summary>
            _size
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.#ctor(`0[])">
            <summary>
            Constructs a List, copying the contents of the given collection. The
            size and capacity of the new list will both be equal to the size of the
            given collection.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs a List, copying the contents of the given collection. The
            size and capacity of the new list will both be equal to the size of the
            given collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.AddRange(`0[])">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="item"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.BinarySearch(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.CopyTo(`0[])">
            <summary>
            
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="array"></param>
            <param name="arrayIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Exists(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Find(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.FindAll(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.FindIndex(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="startIndex"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.FindLast(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="startIndex"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.ForEach(Microsoft.ExtendedReflection.Utilities.Safe.SafeAction{`0})">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <internalonly/>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.IndexOf(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="collection"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.LastIndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Reverse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Sort">
            <summary>
            Sorts the elements in this list.  Uses the default comparer and 
            SafeArray.Sort.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in this list.  Uses SafeArray.Sort with the
            provided comparison
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Sort(System.Int32,System.Int32,System.Comparison{`0})">
            <summary>
            Sorts the elements in a section of this list. The sort compares the
            elements to each other using the given IComparer interface. If
            comparer is null, the elements are compared to each other using
            the IComparable interface, which in that case must be implemented by all
            elements of the list.
            This method uses the SafeArray.Sort method to sort the elements.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a section of this list. The sort compares the
            elements to each other using the given IComparer interface. If
            comparer is null, the elements are compared to each other using
            the IComparable interface, which in that case must be implemented by all
            elements of the list.
            
            This method uses the SafeArray.Sort method to sort the elements.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.SortRanked">
            <summary>
            Sorts the elements of the list using the RankedComparer comparer
            that sorts element according to the IRanked interface.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.ToIndexable">
            <summary>
            returns a new Object array containing the contents 
            of the List. Wrapped as a safe enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.TrimExcess">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeList`1.Capacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeList`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeList`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeList`1.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`1.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeList`1.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.LogLevel">
            <summary>
            Levels of importance of log messages
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogLevel.Critical">
            <summary>
            Internal error level
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogLevel.Error">
            <summary>
            Error level
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogLevel.Warning">
            <summary>
            Warning message
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogLevel.Message">
            <summary>
            Informational message
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogLevel.Verbose">
            <summary>
            Verbose output
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogLevel.Noisy">
            <summary>
            Very very verbose output
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.LogEventArgs">
            <summary>
            Log event message
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.RemoteEventArgs">
            <summary>
            Empty rematable event
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.RemoteEventArgs.Empty">
            <summary>
            Gets the empty event singleton
            </summary>
            <value>The empty.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.IPartiallySerializable">
            <summary>
            Interface that defines types that lazily serialize themselfves
            and require a particular method to be called to cached
            serailized output,
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IPartiallySerializable.PrepareForSerialization(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Prepares for serialization.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.IHelpSource">
            <summary>
            Provides help topic information
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.IHelpSource.WikiTopic">
            <summary>
            Gets the help topic.
            </summary>
            <value>The help topic.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.ICaughtExceptionSource">
            <summary>
            Instance that can hold a caught exception
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.IStackTraceSource">
            <summary>
            Instance that may contain a stack trace
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IStackTraceSource.TryGetStackTrace(Microsoft.ExtendedReflection.Symbols.StackTraceName@)">
            <summary>
            Gets the stack trace (might be null)
            </summary>
            <param name="trace">The trace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.ICaughtExceptionSource.TryGetCaughtException(Microsoft.ExtendedReflection.Logging.RemoteException@)">
            <summary>
            Gets the caught exception.
            </summary>
            <value>The caught exception.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.ICodeUpdateSource">
            <summary>
            A source of code update
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.ICodeUpdateSource.TryGetCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get the code updates.
            </summary>
            <value>The code updates.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.IDescriptionSource">
            <summary>
            A self-describing instance
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IDescriptionSource.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets a slightly longer description (language specific if code is involved); usually used for tool-tips.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IDescriptionSource.TryWriteLongDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage},System.IO.TextWriter)">
            <summary>
            Write a long description, possibly involving line breaks, to a text writer.
            </summary>
            <param name="languageFactory">The language factory.</param>
            <param name="writer">writer</param>
            <returns>whether anything was written</returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.IDescriptionSource.ImageKey">
            <summary>
            Gets the image key to be fetched from
            an imagelist
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.IDescriptionSource.Title">
            <summary>
            Gets the (short) title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.ITargetNameSource">
            <summary>
            Provides a target metadata name for the instnace
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.ITargetNameSource.TryGetTargetName(Microsoft.ExtendedReflection.Metadata.Names.Name@)">
            <summary>
            Gets the name of the target.
            </summary>
            <param name="targetName">Name of the target.</param>
            <returns></returns>
            <value>The name of the target.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.IInternalizable">
            <summary>
            An instance that can internalize itself
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.IInternalizable.Internalize">
            <summary>
            Gets an internalized instance of the object. The instance might be internalized
            as a whole or sub-parts of it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LogEventArgs.PrepareForSerialization(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Prepares for serialization.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LogEventArgs.#ctor(Microsoft.ExtendedReflection.Logging.LogLevel,System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Exception,System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.LogEventArgs"/> class.
            </summary>
            <param name="level">The level.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
            <param name="caughtException">The caught exception.</param>
            <param name="background">if set to <c>true</c> [background].</param>
            <param name="targetName">Name of the target (may be null).</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LogEventArgs.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Reads LogEventArgs from xml.
            </summary>
            <param name="logNavigator">The log navigator.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LogEventArgs.ToString">
            <summary>
            Gets a string repsentation of the event
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LogEventArgs.TryGetCaughtException(Microsoft.ExtendedReflection.Logging.RemoteException@)">
            <summary>
            Tries to get the caught exception if any
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LogEventArgs.TryGetCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Gets the code updates.
            </summary>
            <value>The code updates.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LogEventArgs.TryGetTargetName(Microsoft.ExtendedReflection.Metadata.Names.Name@)">
            <summary>
            Tries to get the name of the target of this event.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LogEventArgs.Equals(Microsoft.ExtendedReflection.Logging.LogEventArgs)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LogEventArgs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LogEventArgs.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LogEventArgs.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.LogEventArgs.Level">
            <summary>
            Gets the level.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.LogEventArgs.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.LogEventArgs.WikiTopic">
            <summary>
            Gets the wiki topic.
            </summary>
            <value>The wiki topic.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.LogEventArgs.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.LogEventArgs.CaughtException">
            <summary>
            Gets the caught exception in case of an error
            </summary>
            <value>The caughtexception.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.LogEventArgs.RemoteCaughtException">
            <summary>
            Gets the remotable caught exception.
            </summary>
            <value>The remotable caught exception.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.LogEventArgs.Background">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.ExtendedReflection.Logging.LogEventArgs"/> is background.
            </summary>
            <value><c>true</c> if background; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Field">
            <summary>
            Abstract class describing the meta-data of a static or instance field of a type.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Member">
            <summary>
            A meta data member reference.
            </summary>
            <remarks>
            Meta data member references are references to members in a class, but not types themselves.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataEntity">
            <summary>
            A meta data entity.
            </summary>
            <remarks>
            Meta data entities are encoded in tokens in the runtime.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx">
            <summary>
            Interface to query custom attributes.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx.IsDefined(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Whether an attribute is defined.
            </summary>
            <param name="attributeBaseType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx.GetAttributes(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Queries all matching attributes.
            </summary>
            <param name="attributeBaseType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx.DeclaredAttributes">
            <summary>
            Gets all declared attributes.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx.SerializableName">
            <summary>
            The name of the metadata element which this custom attribute provider represents.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MetadataEntity.Kind">
            <summary>
            MetadataEntity kind for fast switches
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MetadataEntity.globalIndex">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataEntity.ToString">
            <summary>
            Displays the full name instead of the type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataEntity.IsDefined(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Whether an attribute is defined.
            </summary>
            <param name="attributeBaseType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataEntity.GetAttributes(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Queries all matching attributes.
            </summary>
            <param name="attributeBaseType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataEntity.IsVisible(Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Whether this metadata entity is visible in the target context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataEntity.ShortName">
            <summary>
            Name of this meta data entity
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataEntity.FullName">
            <summary>
            Full name of this meta data entity
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataEntity.IsSpecialName">
            <summary>
            Whether this meta data entity is marked as having a "special name"
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataEntity.DeclaredAttributes">
            <summary>
            Gets all declared attributes.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataEntity.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IMember">
            <summary>
            Member of a member container
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.IMember.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType@)">
            <summary>
            Tries to get the declaring type.
            </summary>
            <param name="declaringType">Type of the declaring.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMember.Kind">
            <summary>
            Kind value for fast switching.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMember.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Member.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.TypeEx@)">
            <summary>
            Tries to get the type this metadata member reference is declared in;
            may return false if this is a module-level reference.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Member.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IField">
            <summary>
            Interface describing the meta-data of a field specification;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) field, but can be a field under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IField.Definition">
            <summary>
            Gets the definition.
            </summary>
            <value>The definition.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IField.Type">
            <summary>
            Field type
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IField.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Field.GetHashCode">
            <summary>
            Returns a unique identifier for this member.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Field.GetValue(System.Object)">
            <summary>
            Gets the value of this field.
            </summary>
            <param name="reference">null iff this field is static</param>
            <exception cref="T:System.InvalidOperationException">if the value cannot be retrieved</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Field.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of this field.
            </summary>
            <param name="reference">null iff this field is static</param>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">if the value cannot be set</exception>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.NoFields">
            <summary>
            Empty array of fields.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.GlobalIndex">
            <summary>
            A unique global index of this member.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices"/> provides more information about global indices.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.IsStatic">
            <summary>
            Whether this field is static.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.Definition">
            <summary>
            Retrieves metadata information about the definition of this field, which abstracts from generic instantiations.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.Offset">
            <summary>
            Gets the offset of this instance field relative to the object or struct, or the absolute address for static fields.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.LocalIndex">
            <summary>
            An index that is unique regarding the declaring and its base types.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.IsInitOnly">
            <summary>
            Whether this field can be only initialized once in the constructor.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.IsLiteral">
            <summary>
            Whether this field's definition has a literal.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.Type">
            <summary>
            The type of values that are stored in this field.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.InstanceFieldMapType">
            <summary>
            The type of a map of object reference to field values, if this field is not static.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.FieldKind">
            <summary>
            Whether this field is a special field.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.RuntimeField">
            <summary>
            Retrieves the reflection field info of this field.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.RuntimeFieldHandle">
            <summary>
            Retrieves the runtime field handle of this field.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.ReadValueMethod">
            <summary>
            Retrieves a static method that reads this field.
            </summary>
            <remarks>
            The return type of the method is the type of this field.
            If this field is static, the method has not parameters; otherwise, it has one parameter of type object.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Field.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.FieldDefinition">
            <summary>
            Abstract class describing the meta-data of a static or instance field of a type.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataDefinitionWithVisibility">
            <summary>
            A metadata definition with visibility information.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataDefinition">
            <summary>
            A meta data definition.
            </summary>
            <remarks>
            Meta data definitions belong to a module.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition">
            <summary>
            Interface describing the meta-data of a member definition;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) member, but can be a member under construction.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberReference">
            <summary>
            Interface describing the meta-data of a member reference;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) member, but can be a member under construction.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberReference.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference@)">
            <summary>
            Tries to get the enclosing declaring type, if any.
            </summary>
            <param name="declaringType">Type of the declaring.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberReference.Kind">
            <summary>
            Kind value for fast switching.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberReference.Assembly">
            <summary>
            Gets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberReference.ShortName">
            <summary>
            Name of this member definition
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition@)">
            <summary>
            Gets the enclosing declaring type, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition.Documentation">
            <summary>
            Gets the documentation comments.
            </summary>
            <value>The documentation.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition.Module">
            <summary>
            Gets the module in which this member is defined.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition.IsSpecialName">
            <summary>
            Gets a value indicating whether this instance has a special name.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition.CustomAttributes">
            <summary>
            Gets the custom attributes.
            </summary>
            <value>The custom attributes.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataDefinition.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.TypeDefinition@)">
            <summary>
            Gets the type in which this definition is declared, if any.
            </summary>
            <param name="declaringType">Type of the declaring.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataDefinition.Module">
            <summary>
            The module this definition is declared in.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataDefinition.MetadataToken">
            <summary>
            The metadata token that represents this definition.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinitionWithVisibility">
            <summary>
            A <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition"/> with visibility information.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinitionWithVisibility.IsVisible(Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Determines whether this definition is visible in the given context.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinitionWithVisibility.DeclaredVisibility">
            <summary>
            Gets the declared visibility.
            </summary>
            <value>The declared visibility.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinitionWithVisibility.IsExported">
            <summary>
            Whether this definition is exported.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataDefinitionWithVisibility.IsVisible(Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Whether this metadata entity is visible in the target context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataDefinitionWithVisibility.DeclaredVisibility">
            <summary>
            Gets the visibility of this metadata definition relative to its declaring/outer type, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataDefinitionWithVisibility.IsExported">
            <summary>
            Whether this definition is exported.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IFieldDefinition">
            <summary>
            Interface describing the meta-data of a field definition;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) field, but can be a field under construction.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IFieldReference">
            <summary>
            Interface describing the meta-data of a field reference;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) type, but can be a type under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IFieldReference.Type">
            <summary>
            Gets the field type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IFieldReference.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IFieldReference.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IFieldDefinition.IsStatic">
            <summary>
            Whether this field is static.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IFieldDefinition.IsInitOnly">
            <summary>
            Whether this field is init-only.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IFieldDefinition.Literal">
            <summary>
            Gets the constant value of the field, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IFieldDefinition.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.FieldDefinition.GetHashCode">
            <summary>
            Returns a unique identifier for this member.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.FieldDefinition.Instantiate(Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Retrieves an instantiation of this field.
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.FieldDefinition.NoFieldDefinitions">
            <summary>
            Empty array of field definitions.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.FieldDefinition.GlobalIndex">
            <summary>
            A unique global index of this member.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices"/> provides more information about global indices.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.FieldDefinition.LocalIndex">
            <summary>
            An index that is unique regarding the declaring and its base types.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.FieldDefinition.IsInitOnly">
            <summary>
            Whether this field only only be initialized once in the constructor.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.FieldDefinition.IsStatic">
            <summary>
            Whether this field is static.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.FieldDefinition.Type">
            <summary>
            The field type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.FieldDefinition.Literal">
            <summary>
            Gets the constant value of the field, if any. Implies <see cref="P:Microsoft.ExtendedReflection.Metadata.FieldDefinition.IsStatic"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.FieldDefinition.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.FieldDefinition.RuntimeField">
            <summary>
            Retrieves the reflection field info of this field definition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.FieldDefinition.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.TypeDefinition">
            <summary>
            Abstract class describing the meta-data of a (possibly generic) type definition.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition">
            <summary>
            Interface describing the meta-data of a type definition;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) type, but can be a type under construction.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference">
            <summary>
            Interface describing the meta-data of a type reference;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) type, but can be a type under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference.GenericTypeParametersCount">
            <summary>
            Gets the number of generic type parameters.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference.GenericTypeParameterNames">
            <summary>
            Gets the names of the generic type parameters
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference.Namespace">
            <summary>
            The namespace in which this type is declared, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinitionContainer">
            <summary>
            Interface describing the meta-data of a member definition container;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) container, but can be a container under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinitionContainer.MemberDefinitions">
            <summary>
            Gets the member definitions.
            </summary>
            <value>The member definitions.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.GenericTypeParameters">
            <summary>
            Gets the generic type parameters.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.IsAbstract">
            <summary>
            Whether this type is abstract.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.IsInterface">
            <summary>
            Whether this type is an interface.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.IsSealed">
            <summary>
            Whether this type is sealed.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.IsEnumType">
            <summary>
            Whether this type is a subtype of SystemTypes.Enum.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.EnumUnderlyingType">
            <summary>
            The integral type on which an enum is based; only possible if<see cref="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.IsEnumType"/>, and if <code>GenericTypeParameters.Count</code> is zero.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.EnumValues">
            <summary>
            The collection of enum values; only possible if<see cref="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.IsEnumType"/>, and if <code>GenericTypeParameters.Count</code> is zero.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.IsValueType">
            <summary>
            Whether this type is a subtype of SystemTypes.ValueType.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.LayoutKind">
            <summary>
            The kind of <see cref="T:Microsoft.ExtendedReflection.Metadata.Layout"/> this type represents.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.TypeKind">
            <summary>
            The kind of this type
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.BaseType">
            <summary>
            The base type, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.DeclaredInterfaces">
            <summary>
            Declared implemented interfaces.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.Overrides">
            <summary>
            Gets the overrides.
            </summary>
            <value>The overrides.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeDefinition.GetHashCode">
            <summary>
            Returns a unique identifier for this member.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeDefinition.IsBasedOn(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Checks if this type is equal or derived via a chain of <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.BaseType"/> from another type definition.
            </summary>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeDefinition.GetDeclaredField(System.Int32)">
            <summary>
            Retrieves a field definition from the meta data token that defines it.
            </summary>
            <param name="metadataToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeDefinition.GetDeclaredMethod(System.Int32)">
            <summary>
            Retrieves a method definition from the meta data token that defines it.
            </summary>
            <param name="metadataToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeDefinition.GetDeclaredProperty(System.Int32)">
            <summary>
            Retrieves a property definition from the meta data token that defines it.
            </summary>
            <param name="metadataToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeDefinition.GetDeclaredEvent(System.Int32)">
            <summary>
            Retrieves a event definition from the meta data token that defines it.
            </summary>
            <param name="metadataToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeDefinition.Instantiate(Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Retrieves an instantiation of this type definition.
            </summary>
            <param name="arguments">generic type arguments, if any</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.NoTypeDefinitions">
            <summary>
            Empty array of type definitions.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.GlobalIndex">
            <summary>
            A unique global index of this member.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices"/> provides more information about global indices.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.IsUncatchableExceptionType">
            <summary>
            Whether this type or any of its base types is tagged with the UncatchableAttribute.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.ShortNameWithNesting">
            <summary>
            The short name of this type definition including '+'-separate nested declaring types.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.IsAbstract">
            <summary>
            Whether this type is abstract.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.IsInterface">
            <summary>
            Whether this type is an interface.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.IsSealed">
            <summary>
            Whether this type is sealed.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.IsEnumType">
            <summary>
            Whether this type is an enum type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.EnumUnderlyingType">
            <summary>
            The integral type on which an enum is based; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.IsEnumType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.EnumValues">
            <summary>
            The collection of enum values; only possible if<see cref="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.IsEnumType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.IsValueType">
            <summary>
            Whether this type is a subtype of <see cref="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.ValueType"/>
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.GenericTypeParameters">
            <summary>
            Gets the generic type parameters.
            </summary>
            <value>The generic type parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.GenericTypeParametersCount">
            <summary>
            Gets the number of generic type parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.BaseType">
            <summary>
            The base type, if any.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.BaseTypeDefinition">
            <summary>
            Gets the base type definition, if any.
            </summary>
            <value>The base type definition.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.DeclaredInterfaces">
            <summary>
            Gets the declared instances.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.DeclaredInstanceFields">
            <summary>
            All instance fields declared in this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.DeclaredStaticFields">
            <summary>
            All static fields declared in this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.InstanceFields">
            <summary>
            All instance fields declared in this type and inherited from base types.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.DeclaredProperties">
            <summary>
            All properties declared in this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.DeclaredEvents">
            <summary>
            All events declared in this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.DeclaredInstanceMethods">
            <summary>
            All instance methods declared in this type.
            Note that this includes constructors.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.DeclaredStaticMethods">
            <summary>
            All static methods declared in this type.
            Note that this includes constructors.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.DeclaredInstanceConstructors">
            <summary>
            All instance constructors declared in this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.DeclaredStaticConstructor">
            <summary>
            The static constructor declared in this type, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.InstanceMethods">
            <summary>
            All instance methods declared in this type and inherited from base type.
            Note that this includes constructors.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.DeclaredNestedTypes">
            <summary>
            All nested types declared in this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.Namespace">
            <summary>
            Gets the namespace; can be <code>null</code>!
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.PreciseFullNameInAssembly">
            <summary>
            Gets a precise name of this type in this assembly; can be loaded with Type.GetType.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.LayoutKind">
            <summary>
            Retrieves the layout kind of this type definition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.TypeKind">
            <summary>
            Retrieves the type kind of this type definition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.RuntimeType">
            <summary>
            The reflection type that represents this type definition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.RuntimeTypeHandle">
            <summary>
            Retrieves the runtime type handle of this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.Overrides">
            <summary>
            Gets the overrides.
            </summary>
            <value>The overrides.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeDefinition.Microsoft#ExtendedReflection#Metadata#Interfaces#ITypeDefinition#Overrides">
            <summary>
            Gets the overrides.
            </summary>
            <value>The overrides.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.ModuleEx">
            <summary>
            Abstract class describing the meta-data of a module.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IModuleDefinition">
            <summary>
            A module definition
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IModuleReference">
            <summary>
            A module reference
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IModuleReference.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IModuleReference.Assembly">
            <summary>
            Gets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IModuleReference.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IModuleDefinition.CustomAttributes">
            <summary>
            Gets the custom attributes.
            </summary>
            <value>The custom attributes.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ModuleEx.GetMethodDefinition(System.Int32)">
            <summary>
            Retrieves a method definition from a module and a meta data token which it defines.
            </summary>
            <param name="metadataToken">token defined in module</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ModuleEx.GetTypeDefinition(System.Int32)">
            <summary>
            Retrieves a type definition from a module and a meta data token which it defines.
            </summary>
            <param name="metadataToken">token defined in module</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ModuleEx.GetFieldDefinition(System.Int32)">
            <summary>
            Retrieves a field definition from a module and a meta data token which it defines.
            </summary>
            <param name="metadataToken">token defined in module</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ModuleEx.GetMethodSignature(System.Int32,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Retrieves a signature from a token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ModuleEx.GetString(System.Int32)">
            <summary>
            Retrieves a string form a token.
            </summary>
            <param name="token">string token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ModuleEx.IsDefined(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Whether an attribute is defined.
            </summary>
            <param name="attributeBaseType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ModuleEx.GetAttributes(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Queries all matching attributes.
            </summary>
            <param name="attributeBaseType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ModuleEx.NoModules">
            <summary>
            Empty array of modules.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ModuleEx.Name">
            <summary>
            Name of this module entity
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ModuleEx.RuntimeModule">
            <summary>
            The reflection module that represents this module.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ModuleEx.Assembly">
            <summary>
            The assembly to which this module belongs.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ModuleEx.ModuleVersionId">
            <summary>
            Gets the module version id.
            </summary>
            <value>The module version id.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ModuleEx.BaseLoadAddress">
            <summary>
            Gets the module base load address. Only defined if not <see cref="P:Microsoft.ExtendedReflection.Metadata.ModuleEx.IsDynamic"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ModuleEx.IsDynamic">
            <summary>
            Whether this module was created dynamically.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ModuleEx.DeclaredTypes">
            <summary>
            Gets a list of all top-level types.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ModuleEx.DeclaredMethods">
            <summary>
            Gets a list of all module-level methods.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ModuleEx.DeclaredFields">
            <summary>
            Gets a list of all module-level fields.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ModuleEx.RuntimeModuleHandle">
            <summary>
            Retrieves the runtime module handle of this module.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ModuleEx.DeclaredAttributes">
            <summary>
            Gets all declared attributes.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ModuleEx.SerializableName">
            <summary>
            The name of the metadata element which this custom attribute provider represents.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Method">
            <summary>
            Abstract class  describing the meta-data of a (fully instantiated) method.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.IMethodSignature">
            <summary>
            Interface describing the signature of a method.
            </summary>
            <remarks>
            This interface is needed e.g. to describe the meta-data associated with an indirect call.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.IMethodSignature.ResultType">
            <summary>
            The result type of the call represented by this signature.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.IMethodSignature.ParameterTypes">
            <summary>
            Instance methods/constructors have the receiver as the first parameter.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod">
            <summary>
            Interface describing the meta-data of a method specification;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) method , but can be a method under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod.Definition">
            <summary>
            Gets the definition.
            </summary>
            <value>The definition.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod.ParameterTypes">
            <summary>
            Instance methods/constructors have the receiver as the first parameter.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod.ResultType">
            <summary>
            The result type of the call represented by this signature.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod.GenericMethodArguments">
            <summary>
            Retrieves the type arguments of method type, 
            if this method is the instantiation of a generic type definition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Method.InstanceConstructorName">
            <summary>
            Short name of instance constructor methods.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Method.StaticConstructorName">
            <summary>
            Short name of static constructor methods.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Method.GetHashCode">
            <summary>
            Returns a unique identifier for this member.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Method.TryGetFieldReadValueMethod(Microsoft.ExtendedReflection.Metadata.Field@)">
            <summary>
            Checks whether this method is returned from <see cref="P:Microsoft.ExtendedReflection.Metadata.Field.ReadValueMethod"/> for some type and number of elements.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Method.TryGetBody(Microsoft.ExtendedReflection.Metadata.MethodBodyEx@)">
            <summary>
            Tries to get information about the method body.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Method.TryReverseVTableLookup(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to find the method in the given type which this method overrides or implements.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="sourceMethod">The source method.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.NoMethods">
            <summary>
            Empty array of methods.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.GlobalIndex">
            <summary>
            A unique global index of this member.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices"/> provides more information about global indices.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.IsStatic">
            <summary>
            Whether this method is static.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.IsRefTypeInstanceMethod">
            <returns>If this is an instance method of a reference type.</returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.Signature">
            <summary>
            Method signature of the form: Type.method(ParamType,ParamType)
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.Definition">
            <summary>
            Retrieves metadata information about the definition of this method, which abstracts from generic instantiations.
            </summary>
            <remarks>
            The definition may be <code>null</code> for some array methods.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.IsGenericInstance">
            <summary>
            Whether this method has been constructed from a generic method definition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.GenericMethodArguments">
            <summary>
            Retrieves the type arguments of this method,
            if this method is the instantiation of a generic method definition.
            </summary>
            <value></value>
            <remarks>
            Look at the <see cref="M:Microsoft.ExtendedReflection.Metadata.Member.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.TypeEx@)"/> for type arguments of the declaring type.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.IsVirtual">
            <summary>
            Whether this method is virtual.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.IsConstructor">
            <summary>
            Whether this method represents a constructor.
            </summary>
            <remarks>
            Constructors have a receiver argument.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.ResultParameter">
            <summary>
            A parameter that wraps the result information. <code>null</code> if <see cref="P:Microsoft.ExtendedReflection.Metadata.Method.IsConstructor"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.Parameters">
            <summary>
            Instance methods/constructors have the receiver as the first parameter.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.RuntimeMethod">
            <summary>
            Retrieves the reflection method base of this method.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.RuntimeMethodHandle">
            <summary>
            Retrieves the runtime method handle of this method.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.ResultType">
            <summary>
            The result type of this method.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.ParameterTypes">
            <summary>
            Instance methods/constructors have the receiver as the first parameter.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.ResultLayout">
            <summary>
            The result layout of this method.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.ParameterLayouts">
            <summary>
            Instance methods/constructors have the receiver as the first parameter.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.FunctionFlags">
            <summary>
            Gets flags indicating properties of this function.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Method.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.IInternalizableValue`1">
            <summary>
            Internalizable value
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.IInternalizableValue`1.Equals(`0)">
            <summary>
            Checks whether this value is equal to the given key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IInternalizableValue`1.Key">
            <summary>
            Gets the key.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MethodBodyEx">
            <summary>
            Abstract class describing a method body.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodBodyEx.TryGetInstruction(System.Int32,Microsoft.ExtendedReflection.Metadata.Instruction@)">
            <summary>
            Try to retrieve an instruction at a particular offset.
            </summary>
            <remarks>
            The offset must be a legal instruction start offset in the sequence of instructions.
            If no instruction is available at offset 0, this indicates
            that no instructions available at all.
            </remarks>
            <param name="offset"></param>
            <param name="instruction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodBodyEx.TryGetInstructionSkipNop(System.Int32,Microsoft.ExtendedReflection.Metadata.Instruction@)">
            <summary>
            Try to retrieve an instruction at a particular offset, and skips
            any occurence of the nop instruction.
            </summary>
            <remarks>
            The offset must be a legal instruction start offset in the sequence of instructions.
            If no instruction is available at offset 0, this indicates
            that no instructions available at all.
            </remarks>
            <param name="offset"></param>
            <param name="instruction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodBodyEx.TryGetExceptionHandlingClause(System.Int32,Microsoft.ExtendedReflection.Metadata.ExceptionHandlingClauseEx@)">
            <summary>
            Try to retrieve an exception handler clause that 
            is responsible for a particular code offset.
            </summary>
            <param name="offset"></param>
            <param name="clause"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodBodyEx.TryGetExceptionHandlerClause(System.Int32,Microsoft.ExtendedReflection.Metadata.ExceptionHandlingClauseEx@)">
            <summary>
            Try to retrieve an exception handler clause that
            defines a handler which contains a particular code offset.
            </summary>
            <param name="offset"></param>
            <param name="clause"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodBodyEx.Method">
            <summary>
            The method this body belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodBodyEx.MaxStackSize">
            <summary>
            The maximum depth of the evaluation stack used by this method.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodBodyEx.LocalTypes">
            <summary>
            The types of local variables.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodBodyEx.HasInstructions">
            <summary>
            Whether instructions are available for this method body.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodBodyEx.ExceptionHandlingClauses">
            <summary>
            Gets a list that includes all the exception-handling clauses in the method body. 
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Parameter">
            <summary>
            Abstract class describing the meta-data of a parameter of a method.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter">
            <summary>
            Interface describing the meta-data of a parameter;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) variable , but can be a variable under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter.Definition">
            <summary>
            Gets the definition.
            </summary>
            <value>The definition.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter.DeclaringMember">
            <summary>
            Gets the declaring member: A method or a property.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter.Name">
            <summary>
            Name, if available, or <code>null</code>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter.IsThis">
            <summary>
            Whether this parameter is the first argument of an instance method.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter.Index">
            <summary>
            The index of this parameter in the list of parameters of the method.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter.GenericMethodArguments">
            <summary>
            Retrieves the type arguments of method type, 
            if this method is the instantiation of a generic type definition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Parameter.NoParameters">
            <summary>
            Empty array of parameters.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Parameter.Definition">
            <summary>
            Gets the definition.
            </summary>
            <value>The definition.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Parameter.DeclaringMember">
            <summary>
            The method this parameter belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Parameter.Index">
            <summary>
            The index of this parameter in the parameters list of <see cref="T:Microsoft.ExtendedReflection.Metadata.Method"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Parameter.Name">
            <summary>
            Name, if available, or <code>null</code>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Parameter.Direction">
            <summary>
            Direction of parameter passing.
            </summary>
            <remarks>
            The direction indicated the intention of how an argument whose type
            is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ManagedPointer"/> is used.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Parameter.Type">
            <summary>
            The type of a parameter.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Parameter.GenericMethodArguments">
            <summary>
            Retrieves the type arguments of method type,
            if this method is the instantiation of a generic type definition.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Parameter.IsThis">
            <summary>
            Whether this parameter is the (implicit) receiver parameter of the method.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Parameter.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.GenericMethod">
            <summary>
            Abstract class describing the meta-data of an (uninstantiated) generic method.
            </summary>
            <remarks>
            A generic method does not provide much functionality to inspect the generic method. 
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.GenericMethod.GetHashCode">
            <summary>
            Returns a unique identifier for this member.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.GenericMethod.Instantiate(Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Retrieves an instantiation of this generic method.
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.GenericMethod.NoGenericMethods">
            <summary>
            Empty array of generic methods.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.GenericMethod.GlobalIndex">
            <summary>
            A unique global index of this member.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices"/> provides more information about global indices.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.GenericMethod.IsStatic">
            <summary>
            Whether this generic method is static.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.GenericMethod.Definition">
            <summary>
            Retrieves metadata information about the definition of this generic method, which abstracts from generic instantiations.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.GenericMethod.RuntimeMethod">
            <summary>
            Retrieves the reflection method base of this generic method.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.GenericMethod.RuntimeMethodHandle">
            <summary>
            Retrieves the runtime method handle of this generic method.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.GenericMethod.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Impl.__Null">
            <summary>
            Internal type
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Impl.__VoidBox">
            <summary>
            Internal type
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Impl.__Box`1">
            <summary>
            Internal type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Impl.__Box`1.Value">
            <summary>
            Internal
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Impl.__Box`1.Box(`0)">
            <summary>
            Internal
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Impl.__ByRefHolder`1">
            <summary>
            Internal type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Impl.__ByRefHolder`1.Value">
            <summary>
            Internal
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Impl.__ByRefHolder`1.GetValue">
            <summary>
            Internal
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Instruction">
            <summary>
            This abstract class describes an instruction within a method body.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Instruction.MethodBody">
            <summary>
            The method body this instruction belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Instruction.Offset">
            <summary>
            The offset at which this instruction appears in the instruction sequence of <see cref="F:Microsoft.ExtendedReflection.Metadata.Instruction.MethodBody"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Instruction.Apply(Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor)">
            <summary>
            Executes this instruction in the current thread of an execution monitor.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.NextOffset">
            <summary>
            The offset at which the next instruction appears in the instruction sequence of <see cref="F:Microsoft.ExtendedReflection.Metadata.Instruction.MethodBody"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode">
            <summary>
            The opcode of this instruction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.InstructionSize">
            <summary>
            The number of bytes the opcode of this instruction is long.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.InlinedDataSize">
            <summary>
            The number of bytes the inlined data of this instruction is long.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.Size">
            <summary>
            The number of bytes the opcode and inlined data of this instruction is long.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.BrTargetDelta">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineBrTarget"/>,
            then this property holds the inlined value.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.BrTargetOffset">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineBrTarget"/>,
            then this property holds the effective target offset.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.IValue">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineI"/>,
            then this property holds the inlined value.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.I8Value">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineI8"/>,
            then this property holds the inlined value.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.RValue">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineR"/>,
            then this property holds the inlined value.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.VarIndex">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineVar"/>,
            then this property holds the inlined value.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.String">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineString"/>,
            then this property holds the inlined value.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.SigValue">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineSig"/>,
            then this property holds the inlined value.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.TokValue">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineTok"/>,
            then this property holds the inlined value.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.Field">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineField"/>,
            then this property holds the inlined value.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.Type">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineType"/>,
            then this property holds the inlined value if the token refers to a (instantiated) type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.TypeDefinition">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineType"/>,
            then this property holds the inlined value if the token refers to an uninstantiated generic type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.Method">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineMethod"/>,
            then this property holds the inlined value if the token refers to a (instantiated) method.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.GenericMethod">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineMethod"/>,
            then this property holds the inlined value if the token refers to an uninstantiated generic method.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.SwitchDeltas">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineSwitch"/>,
            then this property holds the inlined value.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Instruction.SwitchOffsets">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Instruction.OpCode"/> has <see cref="F:System.Reflection.Emit.OperandType.InlineSwitch"/>,
            then this property holds the effective switch target offsets.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MethodDefinition">
            <summary>
            Abstract class  describing the meta-data of a method definition.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition">
            <summary>
            Interface describing the meta-data of a method definition;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) type, but can be a method under construction.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference">
            <summary>
            Interface describing the meta-data of a method reference;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) type, but can be a type under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference.IsStatic">
            <summary>
            Gets a value indicating if the method is static
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference.IsConstructor">
            <summary>
            Gets a value indicating if the method is a constructor
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference.GenericMethodParameterNames">
            <summary>
            Gets the generic method parameter names.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference.GenericMethodParametersCount">
            <summary>
            Gets the number of generic method parameters
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>The type of the result.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference.ParameterTypes">
            <summary>
            Gets the parameter types.
            </summary>
            <value>The parameter types.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition.GenericMethodParameters">
            <summary>
            Gets the generic method parameters.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition.IsAbstract">
            <summary>
            Whether this method is abstract.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition.IsVirtual">
            <summary>
            Whether this method is virtual.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition.IsNewslot">
            <summary>
            Whether this method gets a new slot in the vtable.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition.IsHideBySig">
            <summary>
            Whether this method hides by name and signature; otherwise, by name only.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition.IsFinal">
            <summary>
            Whether this method is final.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition.ResultParameter">
            <summary>
            Result parameter
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition.MethodBody">
            <summary>
            Gets the method body.
            </summary>
            <value>The method body.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodDefinition.GetHashCode">
            <summary>
            Returns a unique identifier for this member.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodDefinition.TryGetBodyInstrumentationInfo(Microsoft.ExtendedReflection.Metadata.MethodDefinitionBodyInstrumentationInfo@)">
            <summary>
            Gets information about the instrumented body, if available, i.e. when the method was indeed already instrumented.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodDefinition.Instantiate(Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Retrieves an instantiation of this method.
            </summary>
            <param name="typeArguments">must match DeclaringType.TypeParameters</param>
            <param name="methodArguments">must match <see cref="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.GenericMethodParameters"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodDefinition.Instantiate(Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Retrieves a partial instantiation of this generic method; 
            only valid if this method definition has <see cref="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.GenericMethodParameters"/>.
            </summary>
            <param name="typeArguments">must match DeclaringType.TypeParameters</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodDefinition.TryGetSwitchCount(System.Int32,System.Int32@)">
            <summary>
            If the given offset points to a switch instruction, obtain the number of switch targets.
            </summary>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodDefinition.GetBranchLabelSource(System.Int32)">
            <summary>
            Gets the branch label source.
            </summary>
            <param name="branchLabel">The branch label.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.NoMethodDefinitions">
            <summary>
            Empty array of method definitions.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.GlobalIndex">
            <summary>
            A unique global index of this member.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices"/> provides more information about global indices.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.InstrumentationLevel">
            <summary>
            Whether the method has been instrumented in any way.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.IsStatic">
            <summary>
            Whether this method is static.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.IsVirtual">
            <summary>
            Whether this method is virtual.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.IsAbstract">
            <summary>
            Whether this method is abstract
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.IsHideBySig">
            <summary>
            Whether Indicates this method hides by name and signature; otherwise, by name only.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.IsNewslot">
            <summary>
            Whether this method gets a new slot in the vtable.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.IsFinal">
            <summary>
            Whether this method is final.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.IsConstructor">
            <summary>
            Whether this method represents a constructor.
            </summary>
            <remarks>
            Constructors have a receiver argument.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.IsExtern">
            <summary>
            Determines whether the specified method is extern.
            </summary>
            <remarks>
            The method might be a pinvoke, unmanaged export or internalcall
            </remarks>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.Body">
            <summary>
            Information about the method body, if available.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.RuntimeMethod">
            <summary>
            Retrieves the reflection method base of this method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.ResultParameter">
            <summary>
            Result parameter
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>The type of the result.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.ParameterTypes">
            <summary>
            Gets the parameter types
            </summary>       
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.GenericMethodParameters">
            <summary>
            Gets the generic method parameters.
            </summary>
            <value>The generic method parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinition.GenericMethodParametersCount">
            <summary>
            Gets the number of generic method parameters.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.ParameterDefinition">
            <summary>
            Abstract class  describing the meta-data of a parameter definition.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition">
            <summary>
            Interface describing the meta-data of a parameter definition;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) parameter, but can be a parameter under construction.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterReference">
            <summary>
            Interface describing the meta-data of a parameter reference;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) parameter, but can be a parameter under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterReference.DeclaringMember">
            <summary>
            Gets the enclosing declaring type, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterReference.GenericMethodParametersCount">
            <summary>
            Gets the number of generic method parameters.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterReference.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterReference.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterReference.IsThis">
            <summary>
            Whether this parameter is the implicit this-parameter.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterReference.Index">
            <summary>
            The zero-based index of this parameter in the list of all parameters, or -1 for the result parameter.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterReference.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterReference.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition.IsOutParameter">
            <summary>
            Gets a value indicating whether it's a C# out parameter (type Spec = ManagedPointer and direction is ByRefOut)
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition.Direction">
            <summary>
            Gets the direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition.CustomAttributes">
            <summary>
            Gets the custom attributes.
            </summary>
            <value>The custom attributes.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.Instantiate(Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Retrieves an instantiation of this parameter.
            </summary>
            <param name="typeArguments">must match DeclaringType.TypeParameters</param>
            <param name="methodArguments">must match <see cref="P:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.GenericMethodParameters"/></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.IsDefined(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Whether an attribute is defined.
            </summary>
            <param name="attributeBaseType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.GetAttributes(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Queries all matching attributes.
            </summary>
            <param name="attributeBaseType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.IsOutParameter">
            <summary>
            Gets a value indicating whether it's a C# out parameter (type Spec = ManagedPointer and direction is ByRefOut)
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.Direction">
            <summary>
            Gets the direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.DeclaredAttributes">
            <summary>
            Gets the declared attributes.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.DeclaringMember">
            <summary>
            Gets the enclosing declaring type, if any.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.GenericMethodParameters">
            <summary>
            Gets the generic method parameters.
            </summary>
            <value>The generic method parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.Index">
            <summary>
            The zero-based index of this parameter in the parameters list of <see cref="T:Microsoft.ExtendedReflection.Metadata.Method"/>, or -1 for the result parameter.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.IsThis">
            <summary>
            Whether this parameter is the implicit this-parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ParameterDefinition.Microsoft#ExtendedReflection#Metadata#Interfaces#IParameterDefinition#CustomAttributes">
            <summary>
            Gets the custom attributes.
            </summary>
            <value>The custom attributes.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MethodDefinitionBody">
            <summary>
            Abstract class describing a method body.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinitionBody.MethodDefinition">
            <summary>
            The method definition this body belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinitionBody.BranchCount">
            <summary>
            Gets or sets the number of branches in this method body.
            </summary>
            <remarks>
            This number may be zero if the method has not been instrumented yet;
            it should be set only once when the method is instrumented first.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MethodDefinitionBodyInstrumentationInfo">
            <summary>
            Abstract class describing the instrumentation info of a method body.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodDefinitionBodyInstrumentationInfo.GetBranchesTargettingInstruction``1(``0[])">
            <summary>
            Takes a mapping of branch data, and turns it into a map
            of instruction offsets to a collection of incoming branch data.
            </summary>
            <param name="branchData">The branch data.</param>
            <returns>
            map of original basic block offsets to a list of branch data
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodDefinitionBodyInstrumentationInfo.GetInstructionCoverage(System.Int32[])">
            <summary>
            Takes a mapping of how often each branch was covered, and turns it into a map
            of instruction offsets to frequencies.
            </summary>
            <param name="branchHits">how often each branch was covered</param>
            <returns>map of original basic block offsets to frequencies</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodDefinitionBodyInstrumentationInfo.GetTriggerBranchLabels">
            <summary>
            Gets the branch labels for an offset
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodDefinitionBodyInstrumentationInfo.GetOutgoingBranchLabels(System.Int32)">
            <summary>
            Gets the outgoing branch labels from a IL offset
            </summary>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodDefinitionBodyInstrumentationInfo.TryGetSourceOffset(System.Int32,System.Int32@)">
            <summary>
            Tries to the get source offset of a branch.
            </summary>
            <param name="branchLabel">The branch label</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodDefinitionBodyInstrumentationInfo.TryGetTargetOffset(System.Int32,System.Int32@)">
            <summary>
            Tries to the get target offset of a branch.
            </summary>
            <param name="branchLabel">The branch label</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinitionBodyInstrumentationInfo.MethodDefinition">
            <summary>
            The method definition this body belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinitionBodyInstrumentationInfo.BasicBlockStartOffsets">
            <summary>
            Returns an enumeration of all basic blocks, 
            given by the offset of where they start.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinitionBodyInstrumentationInfo.CodeSize">
            <summary>
            Number of bytes in method body.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodDefinitionBodyInstrumentationInfo.MethodReadyAddress">
            <summary>
            Address of counter that can be used to disable instrumentation of this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Impl.MethodDefinitionImpl.BodyInstrumentationInfoImpl.findCodePosition(System.Int32)">
            <summary>
            finds the code position on or to the left of the given offset
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Impl.ModuleImpl.DeclaredTypes">
            <summary>
            Gets a list of all top-level types.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.TypeEx">
            <summary>
            Abstract class describing the meta-data of a type specification
            derived from a (instantiated) type definition.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IType">
            <summary>
            Interface describing the meta-data of a type specification;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) type, but can be a type under construction.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.GetMdArrayType(System.Int32)">
            <summary>
            Returns an md-array with this type as the element type.
            </summary>
            <param name="rank">number of dimensions</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.SubstituteGenericParameters(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Substitutes the generic parameters.
            </summary>
            <param name="genericMethodArguments">The generic method arguments.</param>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.Spec">
            <summary>
            Kind of type spec this type represents.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.Definition">
            <summary>
            If <see cref="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ValueType"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Class"/>, the type definition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.MdRank">
            <summary>
            The number of dimensions of an array; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.MdArray"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.ElementType">
            <summary>
            Element type; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.SzArray"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.MdArray"/>or <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ManagedPointer"/>or <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Pointer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.GenericTypeArguments">
            <summary>
            Retrieves the type arguments of this type, 
            if this type is the instantiation of a generic type definition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.GenericIndex">
            <summary>
            If this is a generic parameter, the index in the list of generic parameters.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.SzArrayType">
            <summary>
            Returns an sz-array with this type as the element type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.HasManagedPointerType">
            <summary>
            Types containing unmanaged pointer do not have managed pointer types.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.ManagedPointerType">
            <summary>
            Returns manager pointer type of this type; only defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.HasManagedPointerType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.PointerType">
            <summary>
            Returns pointer type of this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IType.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.Common(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Given two types, computes the best common supertype.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetHashCode">
            <summary>
            Returns a unique identifier for this type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetBaseType(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Finds a direct or indirect base type with a given type definition, or <code>null</code>.
            </summary>
            <param name="withTypeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetInterfaces(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            All directly or indirectly implemented interfaces with the given type definition.
            </summary>
            <param name="withTypeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetEnumeratorOfTypes(System.Boolean@)">
            <summary>
            Retrieves the list of types this type can enumerate.
            </summary>
            <param name="implementsIEnumerator">whether this type implements IEnumerator</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.HasInstanceField(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Checks if an instance field is declared in this type or inherited from a base type.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetMdArrayType(System.Int32)">
            <summary>
            Returns an md-array with this type as the element type.
            </summary>
            <param name="rank">number of dimensions</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.IsAssignableTo(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Checks if an object of this type can be assigned to a location of another type.
            </summary>
            <param name="other">other type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.VTableLookup(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Returns the method in this class that implements the given method.
            </summary>
            <remarks>
            This type must not be an interface, and it must implement the declaring type of the given method.
            </remarks>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.VTableLookup(Microsoft.ExtendedReflection.Metadata.GenericMethod)">
            <summary>
            Returns the generic method in thsi class that implements the given generic method.
            </summary>
            <remarks>
            This type must not be an interface, and it must implement the declaring type of the given generic method.
            </remarks>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetField(System.Reflection.FieldInfo)">
            <summary>
            Retrieves the given reflection field that must have been declared in this type.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.TryGetField(System.String,Microsoft.ExtendedReflection.Metadata.Field@)">
            <summary>
            Convenient shortcut to obtain a field from its name.
            </summary>
            <param name="name">The name.</param>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetField(System.String)">
            <summary>
            Convenient shortcut to obtain a field from its name.
            Behavior is undefined if field does not exist. Consider using <see cref="M:Microsoft.ExtendedReflection.Metadata.TypeEx.TryGetField(System.String,Microsoft.ExtendedReflection.Metadata.Field@)"/>.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Retrieves the given reflection property that must have been declared in this type.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.TryGetProperty(System.String,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Metadata.Property@)">
            <summary>
            Convenient shortcut to obtain a property from its name.
            </summary>
            <param name="name">The name.</param>
            <param name="parameterTypes">does not include implicit this-parameter</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetProperty(System.String,Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Convenient shortcut to obtain a property from its name.
            Behavior is undefined if property does not exist. Consider using <see cref="M:Microsoft.ExtendedReflection.Metadata.TypeEx.TryGetProperty(System.String,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Metadata.Property@)"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="parameterTypes">does not include implicit this-parameter</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetEvent(System.Reflection.EventInfo)">
            <summary>
            Retrieves the given reflection event that must have been declared in this type.
            </summary>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.TryGetEvent(System.String,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Metadata.Event@)">
            <summary>
            Convenient shortcut to obtain a event from its name.
            </summary>
            <param name="name">The name.</param>
            <param name="parameterTypes">does not include implicit this-parameter</param>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetEvent(System.String,Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Convenient shortcut to obtain a event from its name.
            Behavior is undefined if event does not exist. Consider using <see cref="M:Microsoft.ExtendedReflection.Metadata.TypeEx.TryGetEvent(System.String,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Metadata.Event@)"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="parameterTypes">does not include implicit this-parameter</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetMethod(System.Reflection.MethodBase)">
            <summary>
            Retrieves the given reflection method that must have been declared in this type.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.TryGetMethod(System.String,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Convenient shortcut to obtain a method from its name and parameter types.
            The name of a constructor is ".ctor".
            </summary>
            <param name="name">The name.</param>
            <param name="parameterTypes">does not include implicit this-parameter</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetMethod(System.String,Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Convenient shortcut to obtain a method from its name and parameter types.
            The name of a constructor is ".ctor".
            Behavior is undefined if method does not exist. Consider using <see cref="M:Microsoft.ExtendedReflection.Metadata.TypeEx.TryGetMethod(System.String,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Metadata.Method@)"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetGenericMethod(System.Reflection.MethodInfo)">
            <summary>
            Retrieves the given reflection generic method that must have been declared in this type.
            </summary>
            <param name="genericMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.CreateRuntimeInstance(Microsoft.ExtendedReflection.Metadata.RuntimeInstanceCreationMode)">
            <summary>
            Creates a new uninitialized instance of a reference type that is not an array.
            </summary>
            <param name="mode">Whether the default constructor may be invoked</param>
            <exception cref="T:System.InvalidOperationException">if an instance of this type cannot be created</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.FinalizeRuntimeInstance(System.Object)">
            <summary>
            Calls the finalizer on the given object instance.
            </summary>
            <param name="instance"></param>
            <remarks>
            The type of the instance must be this type.
            Use with case, since invoking the finalizer directly interferes with the GC.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetVisibleInstanceConstructors(Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Retrieves a list of visible constructors.
            </summary>
            <param name="visibilityContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetVisibleInstanceConstructor(Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Retrieves a matching of visible constructor, if any.
            </summary>
            <param name="visibilityContext">The visibility context.</param>
            <param name="parameterTypes">The parameter types, excluding implicit 'this' parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeEx.GetVisibleDefaultInstanceConstructor(Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Gets the visible default constructor, if any.
            </summary>
            <param name="visibilityContext"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.NoTypes">
            <summary>
            Empty array of types.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.GlobalIndex">
            <summary>
            A unique global index of this member.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices"/> provides more information about global indices.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.StructLevel">
            <summary>
            Gets the nesting level of structs.
            </summary>
            <remarks>
            This only makes sense for primitive types, structs.
            </remarks>
            <value>The struct level.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Namespace">
            <summary>
            Gets the namespace of the type; can be <code>null</code>!
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.PreciseFullNameInAssembly">
            <summary>
            Gets a precise name of this type in this assembly; can be loaded with Type.GetType.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec">
            <summary>
            Kind of type spec this type represents.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Definition">
            <summary>
            Retrieves the definition of this type; only defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ValueType"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Class"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsGenericInstance">
            <summary>
            Whether this type has been constructed from a generic type definition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.GenericTypeArguments">
            <summary>
            Retrieves the type arguments of this type, 
            if this type is the instantiation of a generic type definition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.BaseType">
            <summary>
            The base type of this type, or <code>null</code> if this type is an interface or the object type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.DeclaredInterfaces">
            <summary>
            The list of interfaces this type explicitly extends or implements.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Interfaces">
            <summary>
            The list of interfaces this type defines or explicitly or implicitly extends or implements.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsAbstract">
            <summary>
            Whether this type is abstract; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Class"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsInterface">
            <summary>
            Whether this type is an interface; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Class"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsSealed">
            <summary>
            Whether this type is sealed; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Class"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsEnumType">
            <summary>
            Whether this type is an enum type; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ValueType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.EnumUnderlyingType">
            <summary>
            The integral type on which an enum is based; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsEnumType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.EnumValues">
            <summary>
            The collection of enum values; only possible if<see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsEnumType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsDelegateType">
            <summary>
            Whether this type is a delegate type; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Class"/>,
            and <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.BaseType"/> equals <see cref="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.MulticastDelegate"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.DelegateConstructor">
            <summary>
            Constructor that creates delegate; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsDelegateType"/>.
            </summary>
            <remarks>
            The constructor has three arguments: The newly created delegate instance, the receiver of the target method (<see cref="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Object"/>),
            and the target method itself <see cref="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.IntPtr"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.DelegateInvokeMethod">
            <summary>
            Instance method that invokes delegate; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsDelegateType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsStringType">
            <summary>
            Whether this type is <see cref="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.String"/>; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Class"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsByRefHolderType">
            <summary>
            Whether this type is a by-ref-holder type; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Class"/>.
            </summary>
            <remarks>
            This is an auxiliary type that has no corresponding type in reflection.
            It is used to place arbitrary values on the heap.
            Compare with box typed, which can only hold proper values.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsNullableType">
            <summary>
            Whether this type is a nullable type; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ValueType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsTypedReferenceType">
            <summary>
            Whether this type is <see cref="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.TypedReference"/>; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ValueType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsDecimalType">
            <summary>
            Whether this type is <see cref="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Decimal"/>; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ValueType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsTimeSpanType">
            <summary>
            Whether this type is <see cref="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.TimeSpan"/>; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ValueType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsDateTimeType">
            <summary>
            Whether this type is <see cref="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.DateTime"/>; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ValueType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsArgIteratorType">
            <summary>
            Whether this type is <see cref="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.ArgIterator"/>; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ValueType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsRuntimeArgumentHandle">
            <summary>
            Whether this type is <see cref="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.RuntimeArgumentHandle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsReferenceType">
            <summary>
            Whether <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.SzArray"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.MdArray"/>, or <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Class"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsPrimitiveImmutable">
            <summary>
            Whether this type is a primitive immutable type.
            </summary>
            <remarks>
            Primitive immutable types may only be modified at construction time.
            Afterwards, they must be observationally immutable.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsBoxType">
            <summary>
            Whether this type is a box of a value type; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Class"/>.
            </summary>
            <remarks>
            This is an auxiliary type that has no corresponding type in reflection.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsMapType">
            <summary>
            Whether this type is a map-type; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ValueType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsComObject">
            <summary>
            Whether this type is a COM class.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.MdRank">
            <summary>
            The number of dimensions of an array; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.MdArray"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsValueTypeWithoutManagedPointers">
            <summary>
            Whether this type is a value type that does not contain a managed pointer to the stack.
            </summary>
            <remarks>
            Equivalent to <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ValueType"/> and neither <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsTypedReferenceType"/> nor <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsRuntimeArgumentHandle"/> nor <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsArgIteratorType"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasBoxType">
            <summary>
            Whether this type has a box type; only possible if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsValueTypeWithoutManagedPointers"/> and not <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsNullableType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.BoxType">
            <summary>
            Retrieves the box type of a value type; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasBoxType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasByRefHolderType">
            <summary>
            Whether this type <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsReferenceType"/> or <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsValueTypeWithoutManagedPointers"/>
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.ByRefHolderType">
            <summary>
            Retrieves the by-ref-holder type; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasByRefHolderType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IndexType">
            <summary>
            Index-type of map; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsMapType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasNullableType">
            <summary>
            Whether this type <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsValueTypeWithoutManagedPointers"/> and not <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsNullableType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.NullableType">
            <summary>
            Nullable-type of value-type; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasNullableType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.BoxTypeValueField">
            <summary>
            Value-field of box-type; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsBoxType"/> and this type is not a box of void.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.BoxValueMethod">
            <summary>
            Static method that boxes a value; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasBoxType"/> and this type is not the void type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.ByRefHolderTypeValueField">
            <summary>
            Value-field of by-ref-holder-type; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsByRefHolderType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.ByRefHolderTypeGetValueMethod">
            <summary>
            Value-getter-method of by-ref-holder-type; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsByRefHolderType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.NullableTypeValueField">
            <summary>
            Value-field of nullable-type; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsNullableType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.NullableTypeHasValueField">
            <summary>
            HasValue-field of nullable-type; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsNullableType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.TypedReferenceTypeField">
            <summary>
            Type-field of TypedReference; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsTypedReferenceType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.TypedReferenceValueField">
            <summary>
            Value-field of TypedReference; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsTypedReferenceType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.DecimalFields">
            <summary>
            Value-fields of decimal-type, in the order lo/mid/hi/flags; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsDecimalType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.DateTimeField">
            <summary>
            Value-fields of DateTime-type; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsDateTimeType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.DeclaredInstanceFields">
            <summary>
            All instance fields declared in this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.InstanceFields">
            <summary>
            All instance fields declared in this type and inherited from base types.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.DeclaredStaticFields">
            <summary>
            All static fields declared in this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.DeclaredProperties">
            <summary>
            All instance properties declared in this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.DeclaredEvents">
            <summary>
            All instance events declared in this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasDefaultConstructor">
            <summary>
            Checks if this type has a default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.DefaultConstructor">
            <summary>
            Gets the default constructor
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.SzArrayType">
            <summary>
            Returns an sz-array with this type as the element type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.ElementType">
            <summary>
            Element type; defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.SzArray"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.MdArray"/>or <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ManagedPointer"/>or <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Pointer"/>, or if this type <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsBoxType"/>, <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsByRefHolderType"/>, <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsNullableType"/>, or <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsStringType"/>, or <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsMapType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasManagedPointerType">
            <summary>
            Whether <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Pointer"/>, <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsReferenceType"/> or <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsValueTypeWithoutManagedPointers"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.ManagedPointerType">
            <summary>
            Returns manager pointer type of this type; only defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasManagedPointerType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasPointerType">
            <summary>
            Whether this type neither <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsTypedReferenceType"/> nor <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Spec"/> equals <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ManagedPointer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.PointerType">
            <summary>
            Returns pointer type of this type; only defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.HasPointerType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.Layout">
            <summary>
            Returns memory layout of values of this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.StackWidening">
            <summary>
            Returns widening that must be applied when a value of this type is pushed onto the evaluation stack.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.RuntimeType">
            <summary>
            The reflection type that represents this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.RuntimeTypeHandle">
            <summary>
            Retrieves the runtime type handle of this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.TypeKind">
            <summary>
            The kind of this type
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.TypeEx.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.IEnumValues">
            <summary>
            A collection of enum values.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.IEnumValues.TryGetField(System.Int64,Microsoft.ExtendedReflection.Metadata.Field@)">
            <summary>
            Tries to obtain the field that encodes a value.
            </summary>
            <param name="value"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.IEnumValues.TryGetDisjunction(System.Int64,Microsoft.ExtendedReflection.Metadata.Field[]@)">
            <summary>
            Tries to obtain a set of values, which when or'ed together, make up the specified value.
            Only defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.IEnumValues.IsFlags"/>.
            </summary>
            <param name="value"></param>
            <param name="disjunction"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.IEnumValues.IsFlags">
            <summary>
            Whether the enum values can be combined as flags.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.IEnumValues.Values">
            <summary>
            Set of all values defined for this enum.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode">
            <summary>
            Interface that describes a node in the tree 
            of all execution paths.
            </summary>
            <remarks>
            Each node marks a branch point.
            Each outgoing edge is labeled with a boolean condition.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ILocatedNode">
            <summary>
            Node which contains information about the code location; used by some search frontiers
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ILocatedNode.Depth">
            <summary>
            How deep into the exploration the node is
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ILocatedNode.CodeLocation">
            <summary>
            Gets the code location.
            </summary>
            <value>The code location.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ILocatedNode.OutCodeBranches">
            <summary>
            The set of outgoing branches
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ILocatedNode.CallStackTrace">
            <summary>
            Gets an identifier of the call stack trace
            that spawned this node; may be <code>null</code> if unavailable.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ILocatedNode.BranchCoverage">
            <summary>
            Gets an identifier of the branch coverage information
            that was achieved when this node was created; may be <code>null</code> if unavailable.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ILocatedNode.MethodCoverage">
            <summary>
            Gets an identifier of the method coverage information
            that was achieved when this node was created; may be <code>null</code> if unavailable.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ILocatedNode.SequenceId">
            <summary>
            Gets the time at which the node was created.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.GetPathCondition">
            <summary>
            Retrieves the abstract path condition that leads to this node.
            </summary>
            <remarks>
            This node might represent the join of several execution paths,
            in which case the path condition is the disjunction of their individual path conditions.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.ClearModelHints">
            <summary>
            Removes model hints when they are no longer needed.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.IncreaseFlipCount">
            <summary>
            increment the flip count
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.Minimize(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Adds a minimization request to the node
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.AddInvariant(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Adds an invariant to the node
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.TryGetAttachedData(System.Int32,System.Object@)">
            <summary>
            Tries to retrieve attached data; attachment ids can be obtained from the execution node builder.
            </summary>
            <param name="attachmentId"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.SetAttachedData(System.Int32,System.Object)">
            <summary>
            Attaches data; attachment ids can be obtained from the execution node builder.
            </summary>
            <param name="attachmentId"></param>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.RemoveAttachedData(System.Int32)">
            <summary>
            Removes attached data; attachment ids can be obtained from the execution node builder.
            </summary>
            <param name="attachmentId"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.DumpTrace(System.IO.TextWriter)">
            <summary>
            Dumps a description of how to reach this node.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.ExecutionSignatures">
            <summary>
            The execution signature from which this node is reachable.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.Successors">
            <summary>
            Gets the list of successors.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.SuccessorLabelToExplore">
            <summary>
            Retrieves the boolean condition that has not been explored yet.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.ModelHints">
            <summary>
            Hints how the model that lead to this node was generated.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.InCodeBranch">
            <summary>
            Identification of the branch that lead to this node.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.HitCount">
            <summary>
            how many times the execution nodes have been reached.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.FlipCount">
            <summary>
            how often it was tried to explore the remaining successors
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.UniqueIndex">
            <summary>
            an unique index (w.r.t. execution-tree) for the node. 
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.IsExcludedFromSearch">
            <summary>
            Whether this node should not be included in the search.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.ExhaustedReason">
            <summary>
            Gets or sets whether this not is exhausted, and why.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.OnExhausted">
            <summary>
            Event raised when this node gets exhausted by search.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode.OnSuccessorAdded">
            <summary>
            Event raised when this node gets a new successor.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionGraphObserver">
            <summary>
            A class that implements this interface is observing the execution-graph as it is modified
            so the class should register itself as an observer with the execution-graph builder
            so that the class's following methods will be called when corresponding changes occur in the graph
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionGraphObserver.NodeLocationChanged(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Callback when the location of a node has become known
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionGraphObserver.NodeBumped(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Callback when an execution node
            is found to have potential for further successors,
            in particular when it is added for the first time.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionGraphObserver.PathStarted(Microsoft.ExtendedReflection.Reasoning.IModel)">
            <summary>
            Callback when an execution path is monitored.
            </summary>
            <param name="model">model used to generate inputs for this execution path</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionGraphObserver.PathFinished(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Callback when an execution path has terminated.
            </summary>
            <param name="node">entire path can be extracted from final node</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.XmlDocumentation.ExceptionalMethodBehaviorFromXmlDocumentation">
            <summary>
            Extracts the ``method throws exceptions'' specification from
            the xml files generated from source files by the C# compiler via /doc.
            </summary>
            <remarks>
            Method parameters have to be non-null except if noted otherwise.
            
            TODO:
            + Do we support explicitely implemented interface members?
            + Generic methods.
            + Arbitrary array parameters.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.XmlDocumentation.IExceptionalMethodBehavior">
            <summary>
            Knows the exceptions a method or constructor can throw.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.IExceptionalMethodBehavior.TryGetExceptionTypes(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Collections.IFiniteSet{Microsoft.ExtendedReflection.Metadata.TypeEx}@)">
            <summary>
            Gets the exceptions.
            </summary>
            <param name="method">The method.</param>
            <param name="exceptionTypes">The exception types.</param>
            <returns>
            Note that these types may be not a subtype of Exception
            (bytecode may throw arbitrary types, as opposed to C#).
            </returns>
        </member>
        <member name="F:Microsoft.ExtendedReflection.XmlDocumentation.ExceptionalMethodBehaviorFromXmlDocumentation.methodExceptions">
            <summary>
            Maps methods all specified exception types. Cache.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.ExceptionalMethodBehaviorFromXmlDocumentation.Initialize">
            <summary>
            Initializes this instance. Will be called exactly once.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.ExceptionalMethodBehaviorFromXmlDocumentation.LoadExceptions(Microsoft.ExtendedReflection.Collections.IIndexable{System.String},Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Load exceptions from exceptionNodes,
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.ExceptionalMethodBehaviorFromXmlDocumentation.TryGetExceptionTypes(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Collections.IFiniteSet{Microsoft.ExtendedReflection.Metadata.TypeEx}@)">
            <summary>
            Retrieves the exceptions the method is specified to throw
            and we could load.
            </summary>
            <param name="method">Method</param>
            <param name="exceptionTypes">The exception types.</param>
            <returns>non-null</returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.XmlDocumentation.ITypeResolver">
            <summary>
            Loads types.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.ITypeResolver.TryGetType(System.String,Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.ExtendedReflection.Metadata.TypeEx@)">
            <summary>
            Loads a type used by usingAssembly.
            </summary>
            <returns>null iff we could not load the type.</returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.XmlDocumentation.IXmlDocumentationSource">
            <summary>
            Finds XmlDocuments.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.IXmlDocumentationSource.TryGetXmlDocument(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReferenceWithLocation,Microsoft.ExtendedReflection.XmlDocumentation.IXmlDocumentation@)">
            <summary>
            Finds the XmlDocument that contains information about an assembly.
            </summary>
            <returns>
            null iff we could not find the XmlDocument of assembly.
            </returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.XmlDocumentation.TypeLoader">
            <summary>
            Loads types
            </summary>
            <remarks>
            Parameters are expected to be non-null unless stated otherwise.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.XmlDocumentation.TypeLoader.typeNameToType">
            <summary>
            Maps (type name, name of assembly using the type) 1:1 to named type. Cache.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.TypeLoader.TryLoadType(System.String,Microsoft.ExtendedReflection.Metadata.TypeEx@)">
            <summary>
            Loads a type with Type.getType.
            </summary>
            <returns>null iff we could not load the type.</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.TypeLoader.LoadType(System.String,Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            First check in the using assembly, then in all assemblies it references.
            </summary>
            <returns>null iff we could not load the type.</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.TypeLoader.TryGetType(System.String,Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.ExtendedReflection.Metadata.TypeEx@)">
            <summary>
            Loads a type used by usingAssembly. Caches result.
            </summary>
            <param name="typeName">null value will result in LogError.</param>
            <param name="usingAssembly">null value will result in LogError.</param>
            <param name="type"></param>
            <returns>null iff we could not load the type.</returns>
            <remarks>
            When everything was compiled with the C# compiler standard options,
            then this should return the right Type. The C# compiler allows the using assembly to
            shadow type definitions of referenced assemblies. We take this into account by
            first searching the using assembly, then we proceed to referenced assemblies.
            TODO(t-ccsall): What happens in general? I.e., with C# compiler option /reference
            http://msdn2.microsoft.com/en-us/library/64wh5743.aspx
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationSource">
            <summary>
            Gives access to the xml specification files generated by
            the C# /doc compiler.
            </summary>
            <remarks>
            All parameters are expected to be non-null unless stated otherwise.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.ICached">
            <summary>
            A component that contains a cache
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ICached.ClearCache">
            <summary>
            Clears any cache to release memory
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationSource._assemblies">
            <summary>
            Maps assemblies 1:1 to xml documents. Cache.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationSource.TryFindXmlDocumentFromMscorlibLocation(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReferenceWithLocation,System.String@)">
            <summary>
            Looks for assembly's xml file in the directory that contains mscorlib.dll.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationSource.TryFindXmlDocument(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReferenceWithLocation,System.String@)">
            <summary>
            Loads the xml file specifying exceptions for assembly.
            </summary>
            <returns>null iff we could not find the xml file</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationSource.TryGetXmlDocument(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReferenceWithLocation,Microsoft.ExtendedReflection.XmlDocumentation.IXmlDocumentation@)">
            <summary>
            Finds the XmlDocument that contains information about an assembly.
            </summary>
            <param name="assembly">null value will result in LogError.</param>
            <param name="document"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.IStackFrameFilter">
            <summary>
            An interface that defines filters for stack frames
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.IStackFrameFilter.Exclude(Microsoft.ExtendedReflection.Symbols.StackFrameName)">
            <summary>
            Gets a value indicating wheter the stack frame should
            be excluded
            </summary>
            <param name="frame">The frame.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.SequencePoint">
            <summary>
            A debugger sequence point
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.SequencePoint.Document">
            <summary>
            Url of the source document
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.SequencePoint.Line">
            <summary>
            Gets the start line
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.SequencePoint.Column">
            <summary>
            Gets the start column
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.SequencePoint.EndLine">
            <summary>
            Gets the end line
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.SequencePoint.EndColumn">
            <summary>
            Gets the end column
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.SequencePoint.Offset">
            <summary>
            Gets the IL offset
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.SequencePoint.UnknownSequencePoint">
            <summary>
            Unknown sequence point singleton
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SequencePoint.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Symbols.SequencePoint"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="document">The document.</param>
            <param name="line">The line.</param>
            <param name="column">The column.</param>
            <param name="endLine">The end line.</param>
            <param name="endColumn">The end column.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SequencePoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SequencePoint.ToSourceStartEnd">
            <summary>
            Converts to a SourceStartEnd instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SequencePoint.InRange(System.Int32,System.Int32)">
            <summary>
            Gets a value indicating if line,column pair is in the sequence point
            </summary>
            <param name="line"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SequencePoint.InLineRange(System.Int32)">
            <summary>
            Gets a value indicating if the line is in the range
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.SequencePoint.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.ExtendedReflection.Symbols.SequencePoint"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.SourcePathResolver">
            <summary>
            A source file path resolver based on a set of search path
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.ISourcePathResolver">
            <summary>
            A service to resolve source code path
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISourcePathResolver.ClearResolvedDocuments">
            <summary>
            Clears resolve document cache
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISourcePathResolver.AddSearchPath(System.String)">
            <summary>
            Adds search path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISourcePathResolver.Resolve(System.String)">
            <summary>
            Resolves url according to the search paths
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SourcePathResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Symbols.SourcePathResolver"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SourcePathResolver.ClearResolvedDocuments">
            <summary>
            Clears the resolved documents cache
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SourcePathResolver.AddSearchPath(System.String)">
            <summary>
            Adds a new path to the search path list
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SourcePathResolver.Resolve(System.String)">
            <summary>
            Maps pdb full path to user provided source path
            </summary>
            <param name="url"></param>
            <returns></returns>
            <remarks>
            The pdb usually stores full path, i.e.
               file://d:\mysources\product\foo.cs
            
            If the pdb is used on another machine, the user will provide
            a root source path:
               \\mymachine\mysources
            
            We are looking to update those paths:
            
               \\mymachine\mysources\product\foo.cs
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.SourceStartEnd">
            <summary>
            A region of source code
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.SourceStartEnd.Document">
            <summary>
            Url of the source document
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.SourceStartEnd.Line">
            <summary>
            Gets the start line
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.SourceStartEnd.Column">
            <summary>
            Gets the start column
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.SourceStartEnd.EndLine">
            <summary>
            Gets the end line
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.SourceStartEnd.EndColumn">
            <summary>
            Gets the end column
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SourceStartEnd.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Symbols.SourceStartEnd"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="line">The line.</param>
            <param name="column">The column.</param>
            <param name="endLine">The end line.</param>
            <param name="endColumn">The end column.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SourceStartEnd.Union(Microsoft.ExtendedReflection.Symbols.SourceStartEnd,Microsoft.ExtendedReflection.Symbols.SourceStartEnd)">
            <summary>
            Unions the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SourceStartEnd.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.StackFrameSourceContext">
            <summary>
            Source context of the frame
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.StackFrameSourceContext.BeforeSource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.StackFrameSourceContext.Source">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.StackFrameSourceContext.AfterSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameSourceContext.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the context to xml
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameSourceContext.TryReadFromXml(System.Xml.XPath.XPathNavigator,Microsoft.ExtendedReflection.Symbols.StackFrameSourceContext@)">
            <summary>
            Tries to read the source context from xml.
            </summary>
            <param name="navigator">The navigator.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.StackFrameName">
            <summary>
            A serializable stackframe instance
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.ISourceLocationSource">
            <summary>
            A source of document, line pair
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.ISourceLocationSource.TryGetSourceLocation(System.String@,System.Int32@)">
            <summary>
            Tries to get a source location
            </summary>
            <param name="source"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.#ctor(System.Diagnostics.StackFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Symbols.StackFrameName"/> class.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.#ctor(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Symbols.StackFrameName"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.#ctor(Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Symbols.StackFrameName"/> class.
            </summary>
            <param name="liveMethod">The live method.</param>
            <param name="offset">The offset.</param>
            <param name="sourceUrl">The source URL.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.#ctor(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Symbols.StackFrameName"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="offset">The offset.</param>
            <param name="sourceUrl">The source URL.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.Unstub">
            <summary>
            Unstubs the method name if necessary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.TryGetLiveMethod(Microsoft.ExtendedReflection.Metadata.MethodDefinition@)">
            <summary>
            Tries to get the live method.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.TryGetSourceLocation(System.String@,System.Int32@)">
            <summary>
            Tries to get the source context information
            </summary>
            <param name="sourceUrl"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.FromMethod(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Creates a stack frame from the method
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.WriteXml(Microsoft.ExtendedReflection.Symbols.ISymbolManager,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the XML.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.FromLoggedXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates a stack frame from previously stored xml.
            </summary>
            <param name="navigator">The navigator.</param>
            <exception cref="T:System.InvalidOperationException">when an error occurrs</exception>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.ToBuildMessage">
            <summary>
            Creates a string representation of the frame
            that follows the Visual Studio build message. If outputed
            in a output pane in visual studio, the user will be able to
            double-click on that string to jump to the code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.TryGetShortSourceMessage(System.String@)">
            <summary>
            Tries to get a pretty-printed source/line message if available
            </summary>
            <param name="sourceMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.ToShortBuildMessage">
            <summary>
            Gets a short string reprensetation of the stack frame
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <filterPriority>2</filterPriority>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.Equals(Microsoft.ExtendedReflection.Symbols.StackFrameName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterPriority>2</filterPriority>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.Internalize">
            <summary>
            Internalizes this instance of stack frame
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.op_Equality(Microsoft.ExtendedReflection.Symbols.StackFrameName,Microsoft.ExtendedReflection.Symbols.StackFrameName)">
            <summary>
            Equality.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameName.op_Inequality(Microsoft.ExtendedReflection.Symbols.StackFrameName,Microsoft.ExtendedReflection.Symbols.StackFrameName)">
            <summary>
            Inequality.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.StackFrameName.Value">
            <summary>
            Gets the raw string value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.StackFrameName.Offset">
            <summary>
            Gets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.StackFrameName.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.StackFrameName.HasSource">
            <summary>
            Gets a value indicating whether this instance has source information
            </summary>
            <value>
            	<c>true</c> if this instance has source; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.ITag`1">
            <summary>
            A stack frame tag
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ITag`1.Merge(`0)">
            <summary>
            Merges the tag from another tag
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ITag`1.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the tag to xml
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ITag`1.FromLoggedXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Reads the TTag from logged XML
            </summary>
            <param name="navigator"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1">
            <summary>
            A tree of <see cref="T:System.Diagnostics.StackFrame"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.#ctor(Microsoft.ExtendedReflection.Symbols.ISymbolManager)">
            <summary>
            Initializes a new instance of the StackFrameTree class.
            </summary>
            <param name="symbols">The symbols.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.GetExceptions">
            <summary>
            Gets the exceptions.
            </summary>
            <value>The exceptions.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.AddException(Microsoft.ExtendedReflection.Logging.RemoteException,`0)">
            <summary>
            Adds the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="exceptionTag">The exception tag.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.WriteXml(Microsoft.ExtendedReflection.Symbols.ISymbolManager,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the XML.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.FromLoggedXml(Microsoft.ExtendedReflection.Symbols.ISymbolManager,System.Xml.XPath.XPathNavigator,`0)">
            <summary>
            Writes the XML.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="navigator">The navigator.</param>
            <param name="tag"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.Merge(Microsoft.ExtendedReflection.Symbols.StackFrameTree{`0})">
            <summary>
            Merges two stack frames
            </summary>
            <param name="otherStackFrameTree"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.WriteSummaryXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Write a small xml node describing the frame tree
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.ExceptionCount">
            <summary>
            Gets the number of exceptions
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.TopFramesToSkip">
            <summary>
            Gets the number of frames to skip at the top
            of the stack
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.Node">
            <summary>
            Abstract base class for tree nodes
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.Node.#ctor(`0)">
            <summary>
            Initializes the node with the tag
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.Node.MergeTag(`0)">
            <summary>
            Merges the current tag
            </summary>
            <param name="tag"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.Node.Tag">
            <summary>
            Gets the exception tag
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.ExceptionNode">
            <summary>
            A root exception node
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.ExceptionNode.ExceptionType">
            <summary>
            Gets the exception type
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.ExceptionNode.#ctor(`0,Microsoft.ExtendedReflection.Metadata.Names.TypeName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.ExceptionNode"/> class.
            </summary>
            <param name="tag">The tag.</param>
            <param name="exceptionType">Type of the exception.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.ExceptionNode.WriteXml(Microsoft.ExtendedReflection.Symbols.ISymbolManager,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the XML.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.ExceptionNode.FromLoggedXml(System.Xml.XPath.XPathNavigator,`0)">
            <summary>
            Reads an exception node from logged XML
            </summary>
            <param name="navigator"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.ExceptionNode.Merge(Microsoft.ExtendedReflection.Symbols.StackFrameTree{`0}.ExceptionNode)">
            <summary>
            Merges two exception nodes of the same type
            </summary>
            <param name="otherNode"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.ExceptionNode.Children">
            <summary>
            Gets child frames
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.FrameNode">
            <summary>
            A stack frame node
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.FrameNode.Frame">
            <summary>
            Gets the stack frame
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.FrameNode.#ctor(`0,Microsoft.ExtendedReflection.Symbols.StackFrameName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.FrameNode"/> class.
            </summary>
            <param name="tag">The tag.</param>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.FrameNode.WriteXml(Microsoft.ExtendedReflection.Symbols.ISymbolManager,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the XML.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.FrameNode.FromLoggedXml(System.Xml.XPath.XPathNavigator,`0)">
            <summary>
            Writes the XML.
            </summary>
            <param name="navigator">The navigator.</param>
            <param name="tag">TTag</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.FrameNode.Children">
            <summary>
            Gets the child frames
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.FrameNodeCollection">
            <summary>
            A list of frame node
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.FrameNodeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.FrameNodeCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackFrameTree`1.FrameNodeCollection.FindOrCreateFrame(`0,Microsoft.ExtendedReflection.Symbols.StackFrameName,System.Boolean)">
            <summary>
            Finds the or create frame.
            </summary>
            <param name="tag">The tag.</param>
            <param name="frame">The frame.</param>
            <param name="filter">if set to <c>true</c> [filter].</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.SymbolManager">
            <summary>
            Encapsulate a set of helper classes to get a symbol reader from a file.
            The symbol interfaces require an unmanaged metadata interface.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.ISymbolManager">
            <summary>
            A symbol manager
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.HasSymbols(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Determines whether the specified assembly has symbols.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
            	<c>true</c> if the specified assembly has symbols; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.IsLost(Microsoft.ExtendedReflection.Metadata.ModuleEx)">
            <summary>
            Determines whether the specified module is lost.
            </summary>
            <param name="module">The module.</param>
            <returns>
            	<c>true</c> if the specified module is lost; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.ResolveSourceDocument(System.String)">
            <summary>
            Resolves the source document.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.AddStackFrameFilter(Microsoft.ExtendedReflection.Symbols.IStackFrameFilter)">
            <summary>
            Adds a new stack trace filter
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.TryCreateStackTrace(System.Exception,Microsoft.ExtendedReflection.Symbols.StackTraceName@)">
            <summary>
            Tries to create the best filtered stack frace for the exception
            </summary>
            <param name="ex">The ex.</param>
            <param name="trace">The trace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.TryCreateStackTrace(System.Exception,System.Boolean,Microsoft.ExtendedReflection.Symbols.StackTraceName@)">
            <summary>
            Tries to create the best filtered stack frace for the exception
            </summary>
            <param name="_ex">The ex.</param>
            <param name="filter"></param>
            <param name="trace">The trace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.CreateStackTrace(System.Diagnostics.StackTrace)">
            <summary>
            Creates a fixed up, filtered stacktrace
            </summary>
            <param name="stackTrace"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.ShouldFilterStackTrace(System.Exception)">
            <summary>
            Gets a value indicating whether the exception stack trace should be filtered
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.FilterStackTrace(Microsoft.ExtendedReflection.Symbols.StackTraceName)">
            <summary>
            Filters the stack trace.
            </summary>
            <param name="trace">The trace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.TryGetStackFrameSourceContext(Microsoft.ExtendedReflection.Symbols.StackFrameName,Microsoft.ExtendedReflection.Symbols.StackFrameSourceContext@)">
            <summary>
            Tries to query the stack frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="sourceContext">The source context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.TryGetSequencePoints(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Symbols.SequencePoint}@)">
            <summary>
            Tries to query the sequence points.
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <param name="sequencePoints">The sequence points.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.TryGetSequencePoint(Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.Int32,Microsoft.ExtendedReflection.Symbols.SequencePoint@)">
            <summary>
            Tries to get stack frame from a method, il offset pair
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <param name="offset">The offset.</param>
            <param name="sequencePoint">The sequence point.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.TryGetSequencePoints(Microsoft.ExtendedReflection.Metadata.ModuleEx,System.Int32,System.String,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Symbols.SequencePoint}@)">
            <summary>
            Tries to query the sequence points.
            </summary>
            <param name="module">The module.</param>
            <param name="methodToken">The method token.</param>
            <param name="methodName">Name of the method.</param>
            <param name="sequencePoints">The sequence points.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.TryReconstructBody(Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.String@)">
            <summary>
            Tries to reconstruct the body source code from symbols.
            </summary>
            <param name="method">The method.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISymbolManager.TryGetLocalNames(Microsoft.ExtendedReflection.Metadata.Method,System.String[]@)">
            <summary>
            Tries to get the local names of a method.
            </summary>
            <param name="method">The method.</param>
            <param name="localNames">The local names.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.ISymbolManager.SymbolOptions">
            <summary>
            Get configuration options.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.ISymbolManager.StackFrameAfterSourceLineCount">
            <summary>
            Gets or sets the stack frame after source line count.
            </summary>
            <value>The stack frame after source line count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.ISymbolManager.StackFrameBeforeSourceLineCount">
            <summary>
            Gets or sets the stack frame before source line count.
            </summary>
            <value>The stack frame before source line count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.ISymbolManager.StackFrameFilters">
            <summary>
            Gets the stack frame filters.
            </summary>
            <value>The stack frame filters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.ISymbolManager.TopFrame">
            <summary>
            Gets or sets the top frame.
            </summary>
            <value>The top frame.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.ClearCache">
            <summary>
            Clears the caches
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.Initialize">
            <summary>
            Initializes this instance. Will be called exactly once.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.HasSymbols(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Determines whether the specified assembly has symbols.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
            	<c>true</c> if the specified assembly has symbols; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.TryGetSymbolReaderForAssembly(Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.Samples.Debugging.CorSymbolStore.ISymbolReader2@)">
            <summary>
            Gets the symbol reader for file.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.TryGetSequencePoint(Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.Int32,Microsoft.ExtendedReflection.Symbols.SequencePoint@)">
            <summary>
            Tries to get stack frame from a method, il offset pair
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <param name="offset">The offset.</param>
            <param name="point">The sequence point.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.TryGetSequencePoints(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Symbols.SequencePoint}@)">
            <summary>
            Tries to query the sequence points.
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <param name="sequencePoints">The sequence points.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.TryGetSequencePoints(Microsoft.ExtendedReflection.Metadata.ModuleEx,System.Int32,System.String,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Symbols.SequencePoint}@)">
            <summary>
            Tries to query the sequence points.
            </summary>
            <param name="module">The module.</param>
            <param name="methodToken">The method token.</param>
            <param name="methodName">Name of the method.</param>
            <param name="sequencePoints">The sequence points.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.ResolveSourceDocument(System.String)">
            <summary>
            Resolves the source document.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.GetDocuments(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Gets the documents from the assembly
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.FindDocument(System.Diagnostics.SymbolStore.ISymbolReader,System.String)">
            <summary>
            Finds the document.
            </summary>
            <param name="reader">The reader.</param>
            <param name="sourceFile">The source file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.IsLost(Microsoft.ExtendedReflection.Metadata.ModuleEx)">
            <summary>
            Determines whether the specified module is lost (i.e.
            no symbols were found)
            </summary>
            <param name="module">The module.</param>
            <returns>
            	<c>true</c> if the specified module is lost; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.AddStackFrameFilter(Microsoft.ExtendedReflection.Symbols.IStackFrameFilter)">
            <summary>
            Adds a new stack trace filter
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.TryGetStackFrameSourceContext(Microsoft.ExtendedReflection.Symbols.StackFrameName,Microsoft.ExtendedReflection.Symbols.StackFrameSourceContext@)">
            <summary>
            Tries to get stack frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="sourceContext">The source context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.CreateStackTrace(System.Diagnostics.StackTrace)">
            <summary>
            Creates a fixed up, filtered stacktrace
            </summary>
            <param name="trace">The trace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.TryCreateStackTrace(System.Exception,Microsoft.ExtendedReflection.Symbols.StackTraceName@)">
            <summary>
            Tries to create the best filtered stack frace for the exception
            </summary>
            <param name="_ex">The ex.</param>
            <param name="trace">The trace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.TryCreateStackTrace(System.Exception,System.Boolean,Microsoft.ExtendedReflection.Symbols.StackTraceName@)">
            <summary>
            Tries to create the best filtered stack frace for the exception
            </summary>
            <param name="_ex">The ex.</param>
            <param name="filter"></param>
            <param name="trace">The trace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.ShouldFilterStackTrace(System.Exception)">
            <summary>
            Gets a value indicating whether the exception stack trace should be filtered
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.FilterStackTrace(Microsoft.ExtendedReflection.Symbols.StackTraceName)">
            <summary>
            Tries to parse the stack frame.
            </summary>
            <param name="trace">The trace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.TryReconstructBody(Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.String@)">
            <summary>
            Tries to reconstruct the method body.
            </summary>
            <param name="method">The method.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManager.TryGetLocalNames(Microsoft.ExtendedReflection.Metadata.Method,System.String[]@)">
            <summary>
            Tries the get local names.
            </summary>
            <param name="theMethod">The method.</param>
            <param name="theLocalNames">The local names.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.SymbolManager.SymbolOptions">
            <summary>
            Get configuration options.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.SymbolManager.StackFrameBeforeSourceLineCount">
            <summary>
            Gets or sets the number of source lines to extract 
            before the stack frame site
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.SymbolManager.StackFrameAfterSourceLineCount">
            <summary>
            Gets or sets the number of source lines to extract 
            after the stack frame site
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.SymbolManager.StackFrameFilters">
            <summary>
            A <see cref="T:Microsoft.ExtendedReflection.Symbols.IStackFrameFilter"/> instance that controls the
            filtering of stack traces
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.SymbolManager.TopFrame">
            <summary>
            Gets or sets the top frame.
            </summary>
            <value>The top frame.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.IMetaDataDispenser">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.IMetaDataDispenser.DefineScope_Placeholder">
            <summary>
            Defines the scope_ placeholder.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.IMetaDataDispenser.OpenScope(System.String,System.Int32,System.Guid@,System.Object@)">
            <summary>
            Opens the scope.
            </summary>
            <param name="szScope">The sz scope.</param>
            <param name="dwOpenFlags">The dw open flags.</param>
            <param name="riid">The riid.</param>
            <param name="punk">The punk.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.IMetadataImport">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.IMetadataImport.Placeholder">
            <summary>
            Placeholders this instance.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.DirectoryHelper">
            <summary>
            Helper static methods for operation on directories
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.CheckExistsOrCreate(System.String)">
            <summary>
            Checks if the directory exists otherwise create.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.CleanOrCreate(System.String)">
            <summary>
            Clean, then recreate the directory
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.TryDeleteIfEmpty(System.String,System.Boolean)">
            <summary>
            Tries to delete the directory if empty.
            </summary>
            <param name="path">The path.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetShareAdd(System.String,System.String,System.String,System.String)">
            <summary>
            Tries to add a network share add.
            </summary>
            <param name="server">The server; use <code>null</code> for local server.</param>
            <param name="shareName">Name of the share.</param>
            <param name="shareDescription">The share description.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetShareGetInfo(System.String,System.String,System.String@,System.String@)">
            <summary>
            Tries to add a network share add.
            </summary>
            <param name="server">The server; use <code>null</code> for local server.</param>
            <param name="shareName">Name of the share.</param>
            <param name="shareDescription">The share description.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.LoadWildcard(Microsoft.ExtendedReflection.Collections.SafeSet{System.String},System.String,System.String,System.Boolean,Microsoft.ExtendedReflection.Utilities.Safe.SafeAction{System.String})">
            <summary>
            Loads files with wildcard.
            </summary>
            <param name="files">The files.</param>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="progress">The progress.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.TryChooseDirectoryFromPounds(System.String,System.String,System.String@,System.Int64@)">
            <summary>
            Gets the directory sorted by pound.
            </summary>
            <param name="path">The path.</param>
            <param name="controlFile">The control file.</param>
            <param name="child">The child.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetError">
            <summary>
            Errors returned by the Net... APIs.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetError.NERR_Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetError.ERROR_FILE_NOT_FOUND">
            <summary>
            File not found
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetError.ERROR_ACCESS_DENIED">
            <summary>
            Access denied
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetError.ERROR_NOT_ENOUGH_MEMORY">
            <summary>
            Not enough memory
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetError.ERROR_INVALID_PARAMETER">
            <summary>
            Invalid parameter
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetError.ERROR_INVALID_NAME">
            <summary>
            Invalid name
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetError.ERROR_INVALID_LEVEL">
            <summary>
            Invalid level
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetError.ERROR_MORE_DATA">
            <summary>
            More data
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetError.NERR_BASE">
            <summary>
            NERR Base
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetError.NERR_UnknownDevDir">
            <summary>
            Unknown dev dir
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetError.NERR_DuplicateShare">
            <summary>
            Duplicate share
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetError.NERR_BufTooSmall">
            <summary>
            Buf too small
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DirectoryHelper.NetError.NERR_NetNameNotFound">
            <summary>
            Net name not found
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ExceptionHelper">
            <summary>
            Helper methods for <see cref="T:System.Exception"/> reasoning
            and pretty formatting
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExceptionHelper.StoreStackTraceInException(System.Exception)">
            <summary>
            Stores the current stack trace in the exception
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExceptionHelper.StoreStackTraceInExceptionUnconditionally(System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Stores the current stack trace in the exception
            </summary>
            <param name="ex">The ex.</param>
            <param name="stackTrace">The stack trace.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExceptionHelper.StoreStackTraceInExceptionUnconditionally(System.Exception,Microsoft.ExtendedReflection.Symbols.StackTraceName)">
            <summary>
            Stores a patched stack trace in the exception
            </summary>
            <param name="ex">The ex.</param>
            <param name="stackTrace">The stack trace.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExceptionHelper.StoreTracesInException(Microsoft.ExtendedReflection.Interpretation.States.IState,System.Exception)">
            <summary>
            Adds the trace into the exception dictionary
            </summary>
            <param name="state">The state.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExceptionHelper.TryExtractStackTrace(System.Exception,Microsoft.ExtendedReflection.Symbols.StackTraceName@)">
            <summary>
            Extracts the trace from the exception dictionary
            </summary>
            <param name="ex">The ex.</param>
            <param name="trace">The trace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExceptionHelper.Throw(System.Object)">
            <summary>
            Helper class to throw arbitrary objects
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.IFilter">
            <summary>
            A generic string filtering interface
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.IFilter.Match(System.String)">
            <summary>
            Gets a value indicating wheter the value is matched by
            the filter
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.IFilter.Pattern">
            <summary>
            Gets the parsable string pattern
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.FilterHelper">
            <summary>
            Static helper methods to create simple string filters
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.FilterHelper.ToFilter(System.String)">
            <summary>
            Creates a regex from a string, supporting
            * and ? wildcards.
            </summary>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.FilterHelper.Any">
            <summary>
            A filter that returns true always
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.FilterHelper.Disjunction(Microsoft.ExtendedReflection.Utilities.IFilter[])">
            <summary>
            Gets a disjunction of the filters
            </summary>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.FilterHelper.Conjunction(Microsoft.ExtendedReflection.Utilities.IFilter[])">
            <summary>
            Gets a conjunction of the filters
            </summary>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty">
            <summary>
            A thread execution monitor which does nothing
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.#ctor(System.Int32)">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Arithmetic(Microsoft.ExtendedReflection.Metadata.UnaryOperator)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Callvirt(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.CallvirtType(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.CallReceiver(System.Object)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.FieldReceiver(System.Object)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.ArrayIndex(System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Cpobj(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldstr(System.String)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Newobj(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Castclass(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Isinst(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Unbox(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Throw">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldflda(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Stfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldsfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldsflda(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Stsfld(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.ArithmeticWithOverflowCheck(Microsoft.ExtendedReflection.Metadata.UnaryOperator,System.Boolean)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Box(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Newarr(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldlen">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldelema(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldelem(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Metadata.StackWidening)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Stelem(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Stelem_Ref">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Stelem(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Unbox_Any(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Refanyval(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ckfinite">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Mkrefany(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldtoken(Microsoft.ExtendedReflection.Metadata.GenericMethod)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldtoken(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldtoken(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldtoken(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldtoken(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.ArithmeticWithOverflowCheck(Microsoft.ExtendedReflection.Metadata.BinaryOperator,System.Boolean)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Endfinally">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Leave">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Arglist">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Compare(Microsoft.ExtendedReflection.Metadata.BinaryOperator,System.Boolean)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldftn(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldvirtftn(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldarg(System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldarga(System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Starg(System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldloc(System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldloca(System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Stloc(System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Localloc">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Endfilter">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Unaligned(System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Volatile">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Tailcall">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Initobj(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Constrained(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Cpblk">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Initblk">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Rethrow">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Refanytype">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Readonly">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Newarr(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32,System.Boolean)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldelem(Microsoft.ExtendedReflection.Metadata.Layout,System.Int32,Microsoft.ExtendedReflection.Metadata.StackWidening)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Stelem(Microsoft.ExtendedReflection.Metadata.Layout,System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Ldelema(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Initarr(System.Array)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Object_MemberwiseClone(System.Object)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Array_GetLength(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Array_get_LongLength(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Array_get_Length(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Array_GetLowerBound(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Array_GetUpperBound(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Array_GetValue(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Array_SetValue(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Buffer_TryFastMemCopy">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Reflection_GetFieldValue(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Reflection_SetFieldValue(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Reflection_SetTypedAndNamedFieldValue``1(System.Object,System.String,``0)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Reflection_IsAssignableFrom">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Reflection_GetObjectType(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Reflection_GetType(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Reflection_GetBoxValueType">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_Derive(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Shadow instruction; derives formula with respect to variable
            </summary>
            <param name="formulaType"></param>
            <returns></returns>
            <remarks>
            Stack transition: formula, variable: double -&gt; double
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_ToString(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Boolean)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="raw"></param>
            <returns></returns>
            <remarks>
            Stack transition: value -&gt; string
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_GetRelevantInputNames(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns></returns>
            <remarks>
            Stack transition: value -&gt; string[]
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_IsSymbolic(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns></returns>
            <remarks>
            Stack transition: value -&gt; bool
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_GetPathConditionString(System.Boolean)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <returns></returns>
            <remarks>
            Stack transition: -&gt; string
            </remarks>
            <param name="raw"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_IsInArray(System.IntPtr)">
            <summary>
            Shadow instruction; builds condition representing whether a value is contained in the range of a (fixed-size) array
            </summary>
            <remarks>
            Stack transition: value, array -&gt; bool
            </remarks>
            <param name="count">number of elements in array</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_WrapConcreteSymbolic``1(__Auxiliary.IConcreteSymbolicProcessor{``0},``0)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="data"></param>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_Minimize">
            <summary>
            Shadow instruction
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_UnwrapConcreteSymbolic``1(__Auxiliary.IConcreteSymbolicProcessor{``0},System.Object)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="data"></param>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_IsTypedPointer(Microsoft.ExtendedReflection.Metadata.TypeEx,System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The PTR.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_IsAllocated(System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="ptr">The pointer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_TypedMalloc(Microsoft.ExtendedReflection.Metadata.TypeEx,System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The Pointer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_TypedFree(Microsoft.ExtendedReflection.Metadata.TypeEx,System.UIntPtr)">
            <summary>
            Shadow instruction; process the given data on a concrete an abstract level
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The PTR.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_EvaluateInSnapshot``1(System.Object,System.Delegate)">
            <summary>
            Evaluates an expression in a state snapshot
            </summary>
            <typeparam name="T"></typeparam>
            <param name="snapshot">The snapshot.</param>
            <param name="expr">The expr.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Symbolic_Snapshot">
            <summary>
            Create a snapshot of the state for evaluating old expressions.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Array_Copy(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_BeforeReflectionCall(Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Reflection_NextArgument">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Auxiliary_Reflection_NextByRefArgument">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_ReflectionCall">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_AfterReflectionCall(System.Object,System.Boolean)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_LoopVar(Microsoft.ExtendedReflection.Metadata.Layout,System.String)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Environment_get_TickCount">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_String_get_Length">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Interlocked_Exchange(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Interlocked_CompareExchange(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Interlocked_Increment(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Interlocked_Decrement(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Interlocked_Read(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Interlocked_Add(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_String_get_Chars">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_String_ToCharArray">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_String_ToCharArray(System.Int32,System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_String_FromCharArray">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_String_FromCharArray(System.Int32,System.Int32)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_String_FromCharCount">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_String_IsNullOrEmpty(System.String)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.S_Ldptr(System.IntPtr)">
            <summary>
            Refines a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AfterBox(System.Boolean,System.Object,System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="isBoxNull"></param>
            <param name="boxIfAvailable"></param>
            <param name="codeLabel">codeLabel</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AfterLocAlloc(System.UIntPtr)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="addr"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Argument``1(System.Int32,``0)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index">The index.</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.ArgumentObject(System.Int32,System.Object)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.ArgumentByRef``1(System.Int32,``0@)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index">The index.</param>
            <param name="value">value</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.ArgumentNotSupported(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index"></param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.ArgumentPtr(System.Int32,System.UIntPtr,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">value</param>
            <param name="pointerType">can be a function pointer as well</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.ArgumentTypedReference(System.Int32,System.TypedReference)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="typedReference">value</param>
            <remarks>
            See <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)"/> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtArgumentNullException(System.ArgumentNullException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtArgumentNullFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtArgumentOutOfRangeException(System.ArgumentOutOfRangeException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtArgumentOutOfRangeFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtArrayDestructionArrayTypeMismatchException(System.ArrayTypeMismatchException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtArrayDestructionFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtCallException(System.Object,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtCallFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtCastFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtCastInvalidCastException(System.InvalidCastException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtCheckedOperationFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtCheckedOperationOverflowException(System.OverflowException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtConditionalBranchFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtConditionalBranchTarget(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtDereferenceFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtDereferenceNullReferenceException(System.NullReferenceException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtDivisionDivideByZeroException(System.DivideByZeroException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtDivisionFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtGuardedStoreFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtIndexedAccessFallthrough(System.Int32)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/>.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtIndexedAccessIndexOutOfRangeException(System.IndexOutOfRangeException,System.Int32)">
            <summary>
            Calls the general <see cref="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.RaiseException(System.Object,System.Int32)"/> method.
            </summary>
            <param name="exception"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtBranchTarget(Microsoft.ExtendedReflection.Monitoring.BranchTargetKind)">
            <summary>
            This method is called
            when execution reaches a branch target.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.AtOffset(System.Int32)">
            <summary>
            This method is called when an offset is reached. The method is not called for all offsets.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.Destroy">
            <summary>
            Destroy this thread.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorEmpty.ThreadId">
            <summary>
            Gets the thread id.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorBase">
            <summary>
            Base class to monitor execution
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.IExecutionMonitor">
            <summary>
            An execution monitor for a set of threads.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IExecutionMonitor.CreateThread">
            <summary>
            Creates a new thread, and associates an id with it.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IExecutionMonitor.DestroyThread(System.Int32)">
            <summary>
            Signals that a previously created thread with the given id has been destroyed.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IExecutionMonitor.GetThreadExecutionMonitor(System.Int32)">
            <summary>
            Retrieves an execution monitor for an existing thread.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IExecutionMonitor.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IExecutionMonitor.BeforeMain">
            <summary>
            Executed after all monitoring services have been initialized, just before the program's entry point is executed.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IExecutionMonitor.Terminate">
            <summary>
            Called when the process finishes.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.IExecutionMonitor.ValueInjector">
            <summary>
            Gets the execution value injector 
            </summary>
            <value>The value injector.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorBase.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorBase.CreateThreadExecutionMonitor(System.Int32)">
            <summary>
            Creates a new thread execution monitor.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorBase.Initialize">
            <summary>
            Called when the process is about to execute the program's entry point.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorBase.BeforeMain">
            <summary>
            Called when the process is about to execute the program's entry point.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorBase.Terminate">
            <summary>
            Called when the process finishes.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorBase.ValueInjector">
            <summary>
            Gets the execution value injector
            </summary>
            <value>The value injector.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorException">
            <summary>
            Exception thrown to indicate that the <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/> cannot continue execution monitoring.
            </summary>
            <remarks>
            See <see cref="T:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorInternalException"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorException.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorException.#ctor(System.String)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used for serialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorInternalException">
            <summary>
            Exception thrown when the execution monitor is not able to interpret given code.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorInternalException.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorInternalException.#ctor(System.String)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorInternalException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ExecutionMonitorInternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used for serialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorMultiplexer">
            <summary>
            Distributes callbacks to subscribed thread execution monitors.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorMultiplexer.#ctor(Microsoft.ExtendedReflection.Collections.SafeList{Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionMonitorMultiplexer.Microsoft#ExtendedReflection#Monitoring#IThreadExecutionMonitor#EnterMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <returns>ORed result of subscribed monitors.</returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MemoryNarrowingKind">
            <summary>
            Narrowing of integer or float value when taken from evaluation stack and stored into memory.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MemoryNarrowingKind.None">
            <summary>
            No narrowing
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MemoryNarrowingKind.ToI1">
            <summary>
            From I4 or I8 to I1
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MemoryNarrowingKind.ToI2">
            <summary>
            From I4 or I8 to I2
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MemoryNarrowingKind.ToI4">
            <summary>
            From I4 to I4 (no narrowing really), or from I8 to I4
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MemoryNarrowingKind.ToR4">
            <summary>
            From R8 to R4
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MemoryNarrowingKind.ToManagedPointer">
            <summary>
            No narrowing, or from I to managed pointer
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MemoryNarrowing">
            <summary>
            Narrowing of integer or float value when taken from evaluation stack and stored into memory.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MemoryNarrowing.Kind">
            <summary>
            Kind that allows fast switches.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MemoryNarrowing.None">
            <summary>
            No narrowing
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MemoryNarrowing.ToI1">
            <summary>
            From I4 or I8 to I1
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MemoryNarrowing.ToI2">
            <summary>
            From I4 or I8 to I2
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MemoryNarrowing.ToI4">
            <summary>
            From I4 to I4 (no narrowing really), or from I8 to I4
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MemoryNarrowing.ToR4">
            <summary>
            From R8 to R4
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MemoryNarrowing.ManagedPointer">
            <summary>
            Retrieves managed pointer of this narrowing is to a managed pointer.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.IInstructionContinuation">
            <summary>
            A continuation of the execution of an instruction.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.IInstructionContinuation.TryApply(Microsoft.ExtendedReflection.ComponentModel.IPathComponent,Microsoft.ExtendedReflection.Interpretation.States.IFrame,Microsoft.ExtendedReflection.Metadata.Instruction)">
            <summary>
            Finishes the execution of an instruction by advancing the state appropriately.
            </summary>
            <param name="host"></param>
            <param name="frame"></param>
            <param name="instruction"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.LayoutKind">
            <summary>
            Describes the kind of a <see cref="T:Microsoft.ExtendedReflection.Metadata.Layout"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ExtendedReflection.Metadata.Layout"/> has a <see cref="P:Microsoft.ExtendedReflection.Metadata.Layout.Kind"/> field that allows fast switches over the kind of the layout.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.I1">
            <summary>
            Memory layout of an integer value that is 1 byte long.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.I2">
            <summary>
            Memory layout of an integer value that is 2 bytes long.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.I4">
            <summary>
            Memory layout of an integer value that is 4 bytes long.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.I8">
            <summary>
            Memory layout of an integer value that is 8 bytes long.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.R4">
            <summary>
            Memory layout of a floating-point value that is 4 bytes long.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.R8">
            <summary>
            Memory layout of a floating-point value that is 8 bytes long.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Ref">
            <summary>
            Memory layout of a reference value that points to an object.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.StructField">
            <summary>
            Internally used memory layout to represent a struct field.
            </summary>
            <remarks>
            An intuitive interpretation of an (abstract) value with this layout is the offset of a struct field within a struct value.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Method">
            <summary>
            Internally used memory layout to represent a method.
            </summary>
            <remarks>
            An intuitive interpretation of an (abstract) value with this layout is the address in memory of a method.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Type">
            <summary>
            Internally used memory layout to represent a type.
            </summary>
            <remarks>
            An intuitive interpretation of an (abstract) value with this layout is the address in memory of a type descriptor.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Uniform">
            <summary>
            Layout of a map from keys to values.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Struct">
            <summary>
            Layout of a tuple from struct-fields to their values.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.MdIndex">
            <summary>
            Layout of a tuple of indices into a multi-dimensional array
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.ManagedPointer">
            <summary>
            Layout of a manager pointer to another layout
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Layout">
            <summary>
            <code>Layout</code> describes the memory layout of a value
            </summary>
            <remarks>
            The concept of layout is modelled after the relevant "type" system of the VES (Virtual Execution System).
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Layout.GetHashCode">
            <summary>
            Retrieves a unique hash code for this layout.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Layout.NoLayouts">
            <summary>
            Empty array.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Layout.I1">
            <summary>
            Memory layout of an integer value that is 1 byte long.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Layout.I2">
            <summary>
            Memory layout of an integer value that is 2 bytes long.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Layout.I4">
            <summary>
            Memory layout of an integer value that is 4 byte long.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Layout.I8">
            <summary>
            Memory layout of an integer value that is 8 byte long.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Layout.I">
            <summary>
            Memory layout of an integer value that has the native integer size.
            </summary>
            <remarks>
            This layout is used to represent pointers, and it's either an alias of <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Layout.R4">
            <summary>
            Memory layout of a floating-point value that is 4 bytes long.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Layout.R8">
            <summary>
            Memory layout of a floating-point value that is 8 bytes long.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Layout.Ref">
            <summary>
            Memory layout of a reference value that points to an object.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Layout.StructFieldOffset">
            <summary>
            Internally used memory layout to represent a struct field.
            </summary>
            <remarks>
            An intuitive interpretation of an (abstract) value with this layout is the offset of a struct field within a struct value.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Layout.Method">
            <summary>
            Internally used memory layout to represent a method.
            </summary>
            <remarks>
            An intuitive interpretation of an (abstract) value with this layout is the address in memory of a method.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Layout.Type">
            <summary>
            Internally used memory layout to represent a type.
            </summary>
            <remarks>
            An intuitive interpretation of an (abstract) value with this layout is the address in memory of a type descriptor.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Layout.GetMdIndex(System.Int32)">
            <summary>
            Retrieve internally used memory layout to represent a tuple of indices into a multi-dimensional array.
            </summary>
            <param name="rank">number of dimensions; must be positive</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Layout.GetManagedPointer">
            <summary>
            Retrieves the layout of a managed pointer to this type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Layout.GetMdIndexUniform(System.Int32)">
            <summary>
            Retrieves the layout of a map of multi-dimensional array indices to this type.
            </summary>
            <param name="rank">number of dimensions; must be positive</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Layout.GetUniform(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Retrieves the layout of a map of values of a given index layout to this type.
            </summary>
            <param name="indexLayout">layout of index values</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Layout.GetMdArrayElementsField(System.Int32)">
            <summary>
            Retrieves field that holds the elements of the md-array over this element type
            and the given rank.
            </summary>
            <param name="rank">number of dimensions</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Layout.GetUnaryResultLayout(Microsoft.ExtendedReflection.Metadata.UnaryOperator,Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Computes the result layout of a unary operation.
            </summary>
            <param name="unaryOperator"></param>
            <param name="operandLayout">the layout of the parameter of the unary operation</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Layout.GetBinaryLayout(Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Computes the result layout of a binary operation.
            </summary>
            <param name="binaryOperator"></param>
            <param name="leftLayout">the layout of the left argument of the binary operation</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.GlobalIndex">
            <summary>
            Gets a unique index of this layout
            </summary>
            <value>The index of the global.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.Kind">
            <summary>
            The <see cref="T:Microsoft.ExtendedReflection.Metadata.LayoutKind"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.Size">
            <summary>
            The size of bytes this layout occupies in memory.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.IsPrimitiveValue">
            <summary>
            Gets a value indicating whether this layout is <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I1"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I2"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I8"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R4"/>, or <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.R8"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.StackLayout">
            <summary>
            The layout of a value on the evaluation stack.
            </summary>
            <remarks>
            Most values are represented on the evaluation stack like they are stored on in memory.
            However, I1 and I2 are extended to I4, and R4 is extended to R8.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.CanonicalType">
            <summary>
            Retrieves the canonical type of this layout.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.CanonicalType_Un">
            <summary>
            Retrieves the (unsigned) canonical type of this layout.
            </summary>
            <remarks>
            Same as <see cref="P:Microsoft.ExtendedReflection.Metadata.Layout.CanonicalType"/> if no proper unsigned type available.
            </remarks>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.MemoryNarrowing">
            <summary>
            Returns narrowing that must be applied when a value of this type is taken from the evaluation stack and stored into memory.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.StructLevel">
            <summary>
            Gets the nesting level of structs.
            </summary>
            <remarks>
            This only makes sense for primitive types, structs.
            </remarks>
            <value>The struct level.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.I4Uniform">
            <summary>
            Retrieves the layout of a map of I4 values to this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.I8Uniform">
            <summary>
            Retrieves the layout of a map of I8 values to this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.IUniform">
            <summary>
            Retrieves the layout of a map of native integers to this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.RefUniform">
            <summary>
            Retrieves the layout of a map of object references to this type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.MdIndexRank">
            <summary>
            The number of dimensions of a multi-dimensional array index layout; only defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.Layout.Kind"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.MdIndex"/>. 
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.IndexLayout">
            <summary>
            The index layout; only defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.Layout.Kind"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Uniform"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.ElementLayout">
            <summary>
            The element layout; only defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.Layout.Kind"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Uniform"/>  or <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.ManagedPointer"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.StructType">
            <summary>
            The type of a struct-layout; only defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.Layout.Kind"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Struct"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.FixedArrayElementType">
            <summary>
            The type of the elements of fixed-size array; only defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.Layout.Kind"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Struct"/> and <see cref="P:Microsoft.ExtendedReflection.Metadata.Layout.IsFixedArray"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.SzArrayElementsField">
            <summary>
            The field that holds the elements of the sz-array over this element type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.IsStructOrUniform">
            <summary>
            Checks if this layout is of kind <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Struct"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Uniform"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.IsFixedArray">
            <summary>
            Determines if this layout represents an array of a sized size if this layout has kind <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Struct"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.FixedArrayLength">
            <summary>
            Gets the length of the fixed array, if <see cref="P:Microsoft.ExtendedReflection.Metadata.Layout.IsFixedArray"/>.
            </summary>
            <value>The length of the fixed array.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.FixedArrayElementSize">
            <summary>
            Gets the (padded) size of elements of the fixed array, if <see cref="P:Microsoft.ExtendedReflection.Metadata.Layout.IsFixedArray"/>.
            </summary>
            <value>The size of the fixed array elements.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Layout.IsManagedPointerToStructOrUniform">
            <summary>
            Checks if this layout is a managed pointer to a layout which <see cref="P:Microsoft.ExtendedReflection.Metadata.Layout.IsStructOrUniform"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MdArrayIndices">
            <summary>
            <code>MdArrayIndices</code> provides an enumerator for multi-dimensional array indices.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MdArrayIndices.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="lowerBounds">a sequence of lower bounds</param>
            <param name="lengths">a sequence of lengths</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MdArrayIndices.GetEnumerator">
            <summary>
            Creates an enumerator, which iterates through all indices of an array with the specification provided to the constructor of this type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MemoryRegions">
            <summary>
            This class allows to define and undefine memory regions.
            </summary>
            <remarks>
            Memory regions have a base address that can be queried while the region is defined.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MemoryRegions.Define(System.UIntPtr,System.UIntPtr)">
            <summary>
            Define a memory region.
            </summary>
            <param name="baseAddress">base address</param>
            <param name="bytes">length of region in bytes</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MemoryRegions.Undefine(System.UIntPtr)">
            <summary>
            Undefines a previously defined memory region.
            </summary>
            <param name="baseAddress"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MemoryRegions.TryGetBaseAddress(System.UIntPtr,System.UIntPtr@,System.UIntPtr@)">
            <summary>
            Attempts to lookup the memory region associated with a particular address.
            </summary>
            <param name="address">address, possibly within a region</param>
            <param name="baseAddress">base address</param>
            <param name="bytes">length of region in bytes</param>
            <returns>whether region was found</returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataEntityKind">
            <summary>
            Describes the kind of an <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataEntity"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataEntity"/> has a property <see cref="F:Microsoft.ExtendedReflection.Metadata.MetadataEntity.Kind"/> that allows fast switches over the kind of the meta data entity.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MetadataEntityKind.Type">
            <summary>
            (Instantiated) type
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MetadataEntityKind.TypeDefinition">
            <summary>
            A definition of a (possibly generic) type
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MetadataEntityKind.Method">
            <summary>
            (Instantiated) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MetadataEntityKind.GenericMethod">
            <summary>
            (Uninstantiated) generic method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MetadataEntityKind.MethodDefinition">
            <summary>
            A definition of a (possibly generic) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MetadataEntityKind.Field">
            <summary>
            Field
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MetadataEntityKind.FieldDefinition">
            <summary>
            A definition of a field (possibly defined in a generic type)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MetadataEntityKind.Property">
            <summary>
            Property
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MetadataEntityKind.PropertyDefinition">
            <summary>
            A definition of a property (possibly defined in a generic type)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MetadataEntityKind.Event">
            <summary>
            Event
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MetadataEntityKind.EventDefinition">
            <summary>
            A definition of a event (possibly defined in a generic type)
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Visibility">
            <summary>
            Visibilities
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Visibility.Public">
            <summary>
            public
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Visibility.Assembly">
            <summary>
            assembly ('internal' in C#)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Visibility.Private">
            <summary>
            private (only allowed on definition which are nested, i.e. have a declaring type)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Visibility.PrivateScope">
            <summary>
            private and cannot be referenced
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Visibility.Family">
            <summary>
            family ('protected' in C#; only allowed on definition which are nested, i.e. have a declaring type)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Visibility.FamilyOrAssembly">
            <summary>
            family or assembly ('protected internal' in C#; only allowed on definition which are nested, i.e. have a declaring type)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Visibility.FamilyAndAssembly">
            <summary>
            family and assembly (does not exist in C#; only allowed on definition which are nested, i.e. have a declaring type)
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.AssemblyEx">
            <summary>
            Abstract class describing the meta-data of an assembly.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition">
            <summary>
            An assembly definition
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference">
            <summary>
            Interface describing the meta-data of an assembly reference;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) assembly reference, but can be an assembly reference under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference.ShortName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference.PublicKey">
            <summary>
            Gets the public key.
            </summary>
            <value>The public key.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition.TryGetImageRuntimeVersion(System.String@)">
            <summary>
            Tries to get a string representing the version of the common language runtime 
            (CLR) saved in the file containing the manifest. 
            </summary>
            <value>A string representing the CLR version folder name. This is not a full path.</value>
            <remarks>
            For example, the value for the .NET Framework version 1.1 
            would be v1.1.4322. The binary files for that version would 
            be located in the path %windir%\Microsoft.NET\Framework\v1.1.4322. 
            By default, ImageRuntimeVersion 
            is set to the version of the CLR used to build the assembly. 
            However, it might have been set to another value at compile time. 
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition.Comments">
            <summary>
            Gets the comments.
            </summary>
            <value>The comments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition.ReferencedAssemblies">
            <summary>
            Gets the assembly references.
            </summary>
            <value>The assembly references.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition.CustomAttributes">
            <summary>
            Gets the custom attributes.
            </summary>
            <value>The custom attributes.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition.Modules">
            <summary>
            Gets the modules.
            </summary>
            <value>The modules.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReferenceWithLocation">
            <summary>
            Assembly references that contains additional 'meta' information
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReferenceWithLocation.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AssemblyEx.TryGetEntryPoint(Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Gets the assembly entry point if any
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AssemblyEx.TryGetImageRuntimeVersion(System.String@)">
            <summary>
            Tries to get a string representing the version of the common language runtime
            (CLR) saved in the file containing the manifest.
            </summary>
            <value>
            A string representing the CLR version folder name. This is not a full path.
            </value>
            <remarks>
            For example, the value for the .NET Framework version 1.1
            would be v1.1.4322. The binary files for that version would
            be located in the path %windir%\Microsoft.NET\Framework\v1.1.4322.
            By default, ImageRuntimeVersion
            is set to the version of the CLR used to build the assembly.
            However, it might have been set to another value at compile time.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AssemblyEx.InternalsVisibleTo(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference)">
            <summary>
            Checks whether the internals of this assembly are visible to another assembly;
            as a convience, this function is reflexive.
            </summary>
            <param name="otherAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AssemblyEx.IsDefined(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Whether an attribute is defined.
            </summary>
            <param name="attributeBaseType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AssemblyEx.GetAttributes(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Queries all matching attributes.
            </summary>
            <param name="attributeBaseType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.NoAssemblies">
            <summary>
            Empty array of assemblies.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.TypeDefinitions">
            <summary>
            Gets a list of all types defined in this assembly.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.ExportedTypeDefinitions">
            <summary>
            Gets a list of all top-level exported types
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.RuntimeAssembly">
            <summary>
            The assembly that contains this module.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.RuntimeName">
            <summary>
            The name of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.GlobalAssemblyCache">
            <summary>
            Gets a value indicating whether the assembly was loaded from the global assembly cache.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.ReflectionOnly">
            <summary>
            Gets a value indicating whether this assembly can only be inspected, but its code cannot be executed.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.IsAssemblyBuilder">
            <summary>
            Gets a value indicating whether this assembly is created by reflection emit.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.Location">
            <summary>
            Physical location of assembly.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.ShortName">
            <summary>
            The short name of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.PublicKey">
            <summary>
            Gets the public key.
            </summary>
            <value>The public key.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.FullName">
            <summary>
            The full name of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.Version">
            <summary>
            The version of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.ReferencedAssemblies">
            <summary>
            Gets the referenced assemblies.
            </summary>
            <value>The referenced assemblies.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.Modules">
            <summary>
            Gets the modules.
            </summary>
            <value>The modules.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.DeclaredAttributes">
            <summary>
            Gets all declared attributes.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AssemblyEx.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.TypeKind">
            <summary>
            Describes the kind of an <see cref="T:Microsoft.ExtendedReflection.Metadata.TypeEx"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ExtendedReflection.Metadata.TypeEx"/> has a <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.TypeKind"/> field that allows fast switches over the kind of the type.
            This kind is relevant for (implicit) conversions.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.NativeInt">
            <summary>
            Native signed integer (used for pointers)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.Int8">
            <summary>
            Signed 8-bit integer
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.Int16">
            <summary>
            Signed 16-bit integer
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.Int32">
            <summary>
            Signed 32-bit integer
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.Int64">
            <summary>
            Signed 64-bit integer
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.UnsignedNativeInt">
            <summary>
            Native unsigned integer (used for pointers)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.UnsignedInt8">
            <summary>
            Unsigned 8-bit integer
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.UnsignedInt16">
            <summary>
            Unsigned 16-bit integer
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.UnsignedInt32">
            <summary>
            Unsigned 32-bit integer
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.UnsignedInt64">
            <summary>
            Unsigned 64-bit integer
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.Bool">
            <summary>
            Boolean 8-bit value
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.Char">
            <summary>
            16-bit unicode character
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.Float32">
            <summary>
            32-bit floating point
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.Float64">
            <summary>
            64-bit floating point
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.ManagedPointer">
            <summary>
            Managed pointer
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.Pointer">
            <summary>
            Unmanaged poitner
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.Object">
            <summary>
            Object reference
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.Struct">
            <summary>
            Value type
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.SzArrayElements">
            <summary>
            Sequence of fields of sz-array
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind.MdArrayElements">
            <summary>
            Matrix of fields of md-array
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeKind._End">
            <summary>
            (Internal)
            </summary>
            <remarks>
            Internal marker; must be at end of enum
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.StackWidening">
            <summary>
            Widening of integer or float value when being loaded from memory and pushed onto evaluation stack.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.StackWidening.None">
            <summary>
            No widening
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.StackWidening.FromI1">
            <summary>
            From I1 to I4
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.StackWidening.FromU1">
            <summary>
            From U1 to I4
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.StackWidening.FromI2">
            <summary>
            From I2 to I4
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.StackWidening.FromU2">
            <summary>
            From U2 to I4
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.StackWidening.FromI4">
            <summary>
            From I4 to I8
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.StackWidening.FromU4">
            <summary>
            From U4 to I8
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.StackWidening.FromR4">
            <summary>
            From R4 to R8
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.TypeSpec">
            <summary>
            Each type has a type spec.
            </summary>
            <remarks>
            This is a simplified view of type specs, compared to the ones present in the .NET meta data itself.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.SzArray">
            <summary>
            This type is a single-dimensional array built around an element type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.MdArray">
            <summary>
            This type is a multi-dimensional and/or non-zero based array built around an element type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Pointer">
            <summary>
            This type is an unmanaged pointer to an element type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ManagedPointer">
            <summary>
            This type is a managed pointer to an element type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ValueType">
            <summary>
            This type is value type, or a generic instance of a value type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Class">
            <summary>
            This type is class (or an interface), or a generic instance of a class (or an interface).
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.GenericTypeParameter">
            <summary>
            This type is a type parameter of a type
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.GenericMethodParameter">
            <summary>
            This type is a type parameter of a method
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.RuntimeInstanceCreationMode">
            <summary>
            How to create a new instance of a type
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.RuntimeInstanceCreationMode.MustUseDefaultConstructor">
            <summary>
            The type must have a default constructor, and it must be used 
            (trivially true for value types)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.RuntimeInstanceCreationMode.MayUseDefaultConstructor">
            <summary>
            If the type has a default constructor, it may be used
            (trivially true for value types)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.RuntimeInstanceCreationMode.UninitializedObject">
            <summary>
            Create a fresh instance in which all fields are default-initialized,
            and do not invoke a constructor
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.ParameterDirection">
            <summary>
            Describes the direction of a parameter.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.ParameterDirection.ByValueOrRef">
            <summary>
            ParameterImpl is passed by value, or if the parameter type is a managed pointer, it is a 'ref' parameter
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.ParameterDirection.ByRefIn">
            <summary>
            An address to the actual argument is passed, and the value at the address is only read from but not written to by the method
            (does not exist in C#)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.ParameterDirection.ByRefOut">
            <summary>
            An address to the actual argument is passed, and the value at the address is only written to but not read from by the method
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.FieldKind">
            <summary>
            Enumeration of special field kinds
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.FieldKind.StaticField">
            <summary>
            Static field
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.FieldKind.BoxTypeValue">
            <summary>
            Value field of a box
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.FieldKind.NullableTypeValue">
            <summary>
            Value field of a nullable type
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.FieldKind.NullableTypeHasValue">
            <summary>
            HasValue field of a nullable type
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.FieldKind.TypedReferenceType">
            <summary>
            Type field of a <see cref="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.TypedReference"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.FieldKind.TypedReferenceValue">
            <summary>
            Value field of a <see cref="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.TypedReference"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.FieldKind.ByRefHolderTypeValue">
            <summary>
            Value field of a ByRefHolderType
            </summary>
            <remarks>
            See <see cref="P:Microsoft.ExtendedReflection.Metadata.TypeEx.IsByRefHolderType"/> for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.FieldKind.ArrayElements">
            <summary>
            Field holding a map of elements.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.FieldKind.OtherInstanceField">
            <summary>
            Normal instance field of a reference or value type
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Property">
            <summary>
            Abstract class describing the meta-data of a static or instance property of a type.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IProperty">
            <summary>
            Interface describing the meta-data of a field specification;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) field, but can be a field under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IProperty.Definition">
            <summary>
            Gets the definition.
            </summary>
            <value>The definition.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IProperty.Type">
            <summary>
            Property type
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IProperty.ParameterTypes">
            <summary>
            Gets the parameter types.
            </summary>
            <value>The parameter types.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IProperty.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Property.GetHashCode">
            <summary>
            Returns a unique identifier for this member.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Property.NoProperties">
            <summary>
            Empty array of properties.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Property.GlobalIndex">
            <summary>
            A unique global index of this member.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices"/> provides more information about global indices.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Property.Definition">
            <summary>
            Retrieves metadata information about the definition of this property, which abstracts from generic instantiations.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Property.Type">
            <summary>
            The type of values that are stored in this property.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Property.ParameterTypes">
            <summary>
            Gets the parameter types.
            </summary>
            <value>The parameter types.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Property.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameter types.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Property.Getter">
            <summary>
            The getter method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Property.Setter">
            <summary>
            The setter method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Property.Others">
            <summary>
            Other accessor methods.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Property.RuntimeProperty">
            <summary>
            Retrieves the reflection property info of this property.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Property.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Event">
            <summary>
            Abstract class describing the meta-data of a static or instance event of a type.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IEvent">
            <summary>
            Interface describing the meta-data of a field specification;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) field, but can be a field under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IEvent.Definition">
            <summary>
            Gets the definition.
            </summary>
            <value>The definition.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IEvent.Type">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IEvent.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Event.GetHashCode">
            <summary>
            Returns a unique identifier for this member.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Event.NoEvents">
            <summary>
            Empty array of events.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Event.GlobalIndex">
            <summary>
            A unique global index of this member.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices"/> provides more information about global indices.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Event.Definition">
            <summary>
            Retrieves metadata information about the definition of this event, which abstracts from generic instantiations.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Event.Type">
            <summary>
            The type of values that are stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Event.Adder">
            <summary>
            The adder method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Event.Remover">
            <summary>
            The remover method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Event.Firer">
            <summary>
            The firer method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Event.Others">
            <summary>
            Other accessor methods.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Event.RuntimeEvent">
            <summary>
            Retrieves the reflection event info of this event.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Event.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.InstrumentationLevel">
            <summary>
            Instrumentation level of a method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.InstrumentationLevel.Unknown">
            <summary>
            Instrumentation level could not be determined
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.InstrumentationLevel.Uninstrumented">
            <summary>
            Not instrumented
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.InstrumentationLevel.Protected">
            <summary>
            Protected
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.InstrumentationLevel.Instrumented">
            <summary>
            Instrumented
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.InstrumentationLevel.FinalizerProtected">
            <summary>
            Finalizer Protected
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.InstrumentationLevel.Unconditional">
            <summary>
            The level of this method cannot be customized 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.InstrumentationLevel.Injectable">
            <summary>
            Value injection possible
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.InstrumentationLevel.EraseStaticConstructor">
            <summary>
            Erases the static constructor
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.InstrumentationLevel.EraseFinalizer">
            <summary>
            Erases the finalizer
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.InstrumentationLevel.ProtectedOrFinalizerProtected">
            <summary>
            Protected or finalizer protected
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.InstrumentationLevelHelper">
            <summary>
            Helper class to analyze instrumentation levels
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.InstrumentationLevelHelper.IsUninstrumentable(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Whether a given instrumentation level is uninstrumented, and will always be uninstrumented
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.InstrumentationLevelHelper.Matches(Microsoft.ExtendedReflection.Metadata.InstrumentationLevel,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Checks whether this instrumentation info has the requested instrumentation level.
            </summary>
            <param name="level">The level.</param>
            <param name="requiredLevel">the required level</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.PropertyDefinition">
            <summary>
            Abstract class describing the meta-data of a static or instance property of a type.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyDefinition">
            <summary>
            Interface describing the meta-data of a property definition;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) type, but can be a property under construction.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyReference">
            <summary>
            Interface describing the meta-data of a property definition;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) type, but can be a property under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyReference.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyReference.ParameterTypes">
            <summary>
            Gets the parameter types
            </summary>
            <value>The parameter types.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyReference.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyReference.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyDefinition.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyDefinition.Getter">
            <summary>
            Gets the getter.
            </summary>
            <value>The getter.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyDefinition.Setter">
            <summary>
            Gets the setter.
            </summary>
            <value>The setter.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyDefinition.Others">
            <summary>
            Gets the others.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.PropertyDefinition.GetHashCode">
            <summary>
            Returns a unique identifier for this member.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.PropertyDefinition.Instantiate(Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Retrieves an instantiation of this property.
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.PropertyDefinition.NoPropertyDefinitions">
            <summary>
            Empty array of property definitions.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.PropertyDefinition.GlobalIndex">
            <summary>
            A unique global index of this member.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices"/> provides more information about global indices.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.PropertyDefinition.Type">
            <summary>
            The property type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.PropertyDefinition.Parameters">
            <summary>
            The parameter 
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.PropertyDefinition.Getter">
            <summary>
            Gets the getter.
            </summary>
            <value>The getter.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.PropertyDefinition.Setter">
            <summary>
            Gets the setter.
            </summary>
            <value>The setter.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.PropertyDefinition.Others">
            <summary>
            Gets the others.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.PropertyDefinition.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.PropertyDefinition.RuntimeProperty">
            <summary>
            Retrieves the reflection property info of this property definition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.PropertyDefinition.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.EventDefinition">
            <summary>
            Abstract class describing the meta-data of a static or instance event of a type.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IEventDefinition">
            <summary>
            Interface describing the meta-data of an event definition;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) event, but can be an event under construction.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IEventReference">
            <summary>
            Interface describing the meta-data of a event definition;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) type, but can be a event under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IEventReference.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IEventReference.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IEventReference.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IEventDefinition.Adder">
            <summary>
            Gets the adder.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IEventDefinition.Remover">
            <summary>
            Gets the setter.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IEventDefinition.Firer">
            <summary>
            Gets the firer.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IEventDefinition.Others">
            <summary>
            Gets the others.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.EventDefinition.GetHashCode">
            <summary>
            Returns a unique identifier for this member.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.EventDefinition.Instantiate(Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Retrieves an instantiation of this event.
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.EventDefinition.NoEventDefinitions">
            <summary>
            Empty array of event definitions.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.EventDefinition.GlobalIndex">
            <summary>
            A unique global index of this member.
            </summary>
            <remarks>
            <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices"/> provides more information about global indices.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.EventDefinition.Type">
            <summary>
            The event type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.EventDefinition.Adder">
            <summary>
            Gets the adder.
            </summary>
            <value>The adder.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.EventDefinition.Firer">
            <summary>
            Gets the firer.
            </summary>
            <value>The firer.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.EventDefinition.Remover">
            <summary>
            Gets the remover.
            </summary>
            <value>The remover.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.EventDefinition.Others">
            <summary>
            Gets the others.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.EventDefinition.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.EventDefinition.RuntimeEvent">
            <summary>
            Retrieves the reflection event info of this event definition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.EventDefinition.SerializableName">
            <summary>
            Retrieves a serializable name of this entity.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.ExceptionHandlingClauseEx">
            <summary>
            Represents a clause in a structured exception-handling block.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.ExceptionHandlingClauseEx.CatchType">
            <summary>
            Gets the type of exception handled by this clause.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.ExceptionHandlingClauseEx.FilterOffset">
            <summary>
            Gets the offset within the method body, in bytes, of the user-supplied filter code.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.ExceptionHandlingClauseEx.Flags">
            <summary>
            Gets a value indicating whether this exception-handling clause is a finally
            clause, a type-filtered clause, or a user-filtered clause.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.ExceptionHandlingClauseEx.HandlerLength">
            <summary>
            Gets the length, in bytes, of the body of this exception-handling clause.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.ExceptionHandlingClauseEx.HandlerOffset">
            <summary>
            Gets the offset within the method body, in bytes, of this exception-handling clause.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.ExceptionHandlingClauseEx.TryLength">
            <summary>
            The total length, in bytes, of the try block that includes this exception-handling clause.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.ExceptionHandlingClauseEx.TryOffset">
            <summary>
            The offset within the method, in bytes, of the try block that includes this exception-handling clause.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ExceptionHandlingClauseEx.#ctor(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of this type.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.BinaryOperator">
            <summary>
            A binary operator.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Ceq">
            <summary>
            Compare if equal; yields <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> value 0 or 1.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Clt">
            <summary>
            Compare if less than; yields <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> value 0 or 1.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Clt_Un">
            <summary>
            Compare if less than, unsigned; yields <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> value 0 or 1.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Add">
            <summary>
            Add two values.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Sub">
            <summary>
            Subtract one value from another.  (x-y) is always reduced to x+(-1*y)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Mul">
            <summary>
            Multiply two values
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Div">
            <summary>
            Divide one value by another.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Div_Un">
            <summary>
            Divide one value by another, unsigned.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Rem">
            <summary>
            Compute the the remainder.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Rem_Un">
            <summary>
            Compute the the remainder, unsigned.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Exp">
            <summary>
            Compute the power.  The second argument must be a defined constant.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.And">
            <summary>
            Bitwise and.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Or">
            <summary>
            Bitwise or.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Xor">
            <summary>
            Bitwise xor.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Shl">
            <summary>
            Shift left.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Shr">
            <summary>
            Shift right.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Shr_Un">
            <summary>
            Shift right, unsigned.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator._End">
            <summary>
            Internal unused operator; must be at end of enum, not counting the flags <see cref="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.OverflowSigned"/> and <see cref="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.OverflowUnsigned"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.OverflowSigned">
            <summary>
            Flag that can be added to <see cref="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Add"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Sub"/>,
            <see cref="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Mul"/>.
            Yields <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> value 0 or 1, indicating
            whether the operation over signed operands overflows.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.OverflowUnsigned">
            <summary>
            Flag that can be added to <see cref="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Add"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Sub"/>,
            <see cref="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.Mul"/>.
            Yields <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> value 0 or 1, indicating
            whether the operation over unsigned operands overflows.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.OverflowMask">
            <summary>
            Either <see cref="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.OverflowSigned"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.BinaryOperator.OverflowUnsigned"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.UnaryOperator">
            <summary>
            A unary operator.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Neg">
            <summary>
            Negation of integer or float.  -x is always reduced to -1*x.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Not">
            <summary>
            Bitwise not.  ~x is always reduced to x^-1.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_I1">
            <summary>
            Convert an I1 value to I4.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_I2">
            <summary>
            Convert an I2 value to I4.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_I4">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_I8">
            <summary>
            Converts an I4 to I8
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_R4">
            <summary>
            Convert to R8 with R4 precision.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_R8">
            <summary>
            Convert to R8.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_U1">
            <summary>
            Convert an U1 value to I4.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_U2">
            <summary>
            Convert an U2 value to I4.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_U4">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_U8">
            <summary>
            Converts an U4 to U8.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_R_Un">
            <summary>
            Convert to R8, unsigned.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Trunc_I1">
            <summary>
            Truncate an I4/I8/I value to I1.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Trunc_I2">
            <summary>
            Truncate an I4/I8/I value to I2.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Trunc_I4">
            <summary>
            Truncate an I8/I value to I4.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Trunc_R4">
            <summary>
            Truncate an R8 value to R4
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator._End">
            <summary>
            Internal unused operator; must be at end of enum, not counting the flags <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.OverflowSigned"/> and <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.OverflowUnsigned"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.OverflowSigned">
            <summary>
            Flag that can be added to <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_I1"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_I2"/>,
            <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_I8"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_U1"/>,
            <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_U2"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_U4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_U8"/>.
            Yields <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> value 0 or 1, indicating whether the
            operation applied to a signed operand overflows.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.OverflowUnsigned">
            <summary>
            Flag that can be added to <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_I1"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_I2"/>,
            <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_I4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_I8"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_U1"/>,
            <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_U2"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_U4"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_U8"/>.
            Yields <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> value 0 or 1, indicating whether the
            operation applied to an unsigned operand overflows.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.OverflowMask">
            <summary>
            Either <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.OverflowSigned"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.OverflowUnsigned"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Operators">
            <summary>
            Operator aliases
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Operators.Conv_I">
            <summary>
            Alias of <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_I4"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_I8"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Operators.Conv_U">
            <summary>
            Alias of <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_U4"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.UnaryOperator.Conv_U8"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Operators.IsConv_IorU(Microsoft.ExtendedReflection.Metadata.UnaryOperator)">
            <summary>
            Checks whether the given operator <see cref="F:Microsoft.ExtendedReflection.Metadata.Operators.Conv_I"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.Operators.Conv_U"/>.
            </summary>
            <param name="operator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Operators.IsAc1(Microsoft.ExtendedReflection.Metadata.BinaryOperator)">
            <summary>
            Checks whether the given operator is ac1, i.e. associative, commutative, and has a neutral element.
            </summary>
            <param name="operator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Operators.IsLogicalAc1(Microsoft.ExtendedReflection.Metadata.BinaryOperator)">
            <summary>
            Checks whether the given operator is And, Or, Xor.
            </summary>
            <param name="operator"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ReflectionHelper">
            <summary>
            This class provides some helper functions to add certain missing functionality to reflection.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.NoObjects">
            <summary>
            Empty immutable array of objects;
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetOrderedDeclaredInstanceFields(System.Type)">
            <summary>
            Retrieves an ordered list of all declared instance fields of a type.
            </summary>
            <remarks>
            This function picks an order and always returns the fields in the same order.
            </remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetOrderedDeclaredStaticFields(System.Type)">
            <summary>
            Retrieves an ordered list of all declared instance fields of a type.
            </summary>
            <remarks>
            This function picks an order and always returns the fields in the same order.
            </remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GenericByRefHolderType">
            <summary>
            Holds the reflection type of the generic internal by-ref-holder type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetMethodParameters(System.Reflection.ParameterInfo[],System.String)">
            <summary>
            Gets a string description of the method parameters
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetMethodParametersWithNames(System.Reflection.ParameterInfo[],System.String)">
            <summary>
            Gets a string description of the method parameters
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetMethodFullName(System.Reflection.MethodBase)">
            <summary>
            Gets a full string description of the method
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetMethodFullNameWithParameterNames(System.Reflection.MethodBase)">
            <summary>
            Gets a full string description of the method
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.EscapeForMetadataName(System.Reflection.MethodInfo)">
            <summary>
            Generates an escaped name from the method name and generic parameters
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.EscapeForMetadataName(System.Type)">
            <summary>
            Generates an escaped name from the type name and generic parameters
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.EscapeForMetadataPart(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.String)">
            <summary>
            Removes characters that do not fit well in metadata names (type, methods, etc..)
            </summary>
            <param name="sb"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.EscapeForMetadataName(System.String)">
            <summary>
            Removes characters that do not fit well in metadata names (type, methods, etc..)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsPubliclyConstructible(System.Type,System.Type[])">
            <summary>
            Determines whether the <paramref name="type"/> is constructible,
            using the given parameters.
            </summary>
            <param name="type"></param>
            <param name="parameterTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsPubliclyConstructibleSomehow(System.Type)">
            <summary>
            Determines whether the <paramref name="type"/> has any public constructor.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsPubliclyDefaultConstructible(System.Type)">
            <summary>
            Determines whether the <paramref name="type"/> is default constructible
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsNotRuntimeType(System.Type)">
            <summary>
            Indicates if the type is runtime type 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.AttributeIsDefined(System.Reflection.ICustomAttributeProvider,System.String)">
            <summary>
            Returns a value indicating whether an
            <see cref="T:System.Attribute"/> of type <paramref name="attributeFullName"/>
            is defined on the <paramref name="target"/>
            </summary>
            <param name="target"></param>
            <param name="attributeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.ReflectionOnlyAttributeIsDefined``1(System.Reflection.MemberInfo)">
            <summary>
            Checks if the attribute is defined
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.AttributeGetAttribute(System.Reflection.ICustomAttributeProvider,System.String)">
            <summary>
            Gets an
            <see cref="T:System.Attribute"/> of type <paramref name="attributeFullName"/>
            if it is defined on the <paramref name="target"/>, otherwise
            returns <c>null</c>.
            </summary>
            <param name="target">The target.</param>
            <param name="attributeFullName">Full name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.AttributeGetAttributes(System.Reflection.ICustomAttributeProvider,System.String)">
            <summary>
            Gets an enumeration of 
            <see cref="T:System.Attribute"/> of type <paramref name="attributeFullName"/>
            </summary>
            <param name="target">The target.</param>
            <param name="attributeFullName">Full name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetPropertyOfSetter(System.Reflection.MethodInfo,System.Reflection.PropertyInfo@)">
            <summary>
            Tries to query the the property of supposed property setter.
            </summary>
            <param name="setter">The setter.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetPropertyOfGetter(System.Reflection.MethodInfo,System.Reflection.PropertyInfo@)">
            <summary>
            Tries to query the the property of a supposed property getter.
            </summary>
            <param name="getter">The getter.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryLoadAssemblyEx(System.String,Microsoft.ExtendedReflection.Metadata.AssemblyEx@)">
            <summary>
            Attemps to load an assembly name or file using
            different APIs.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryLoadAssemblyExFrom(System.String,Microsoft.ExtendedReflection.Metadata.AssemblyEx@)">
            <summary>
            Attemps to load a file.
            </summary>
            <param name="location">Location of the assembly.</param>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryLoadAssembly(System.String,System.Reflection.Assembly@)">
            <summary>
            Attemps to load an assembly name or file using
            different APIs.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryLoadAssemblyFrom(System.String,System.String,System.Reflection.Assembly@)">
            <summary>
            Tries to load load an assembly from a path.
            </summary>
            <param name="path">The path.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryLoadAssemblyFrom(System.String,System.Reflection.Assembly@)">
            <summary>
            Tries to load an assembly given a full path
            </summary>
            <param name="fileName"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryReflectionOnlyLoadAssemblyFrom(System.String,System.String,System.Reflection.Assembly@)">
            <summary>
            Tries to load assembly for reflection only.
            </summary>
            <param name="path">The path.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryReflectionOnlyLoadAssemblyExFrom(System.String,Microsoft.ExtendedReflection.Metadata.AssemblyEx@)">
            <summary>
            Tries to load the assembly for refleciton only
            </summary>
            <param name="assemblyFile"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryReflectionOnlyLoadAssemblyFrom(System.String,System.Reflection.Assembly@)">
            <summary>
            Tries to load assembly for reflection only.
            </summary>
            <param name="assemblyFile">The path.</param>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryReflectionOnlyLoadAssemblyEx(System.String,Microsoft.ExtendedReflection.Metadata.AssemblyEx@)">
            <summary>
            Tries to load the assembly for refleciton only
            </summary>
            <param name="assemblyFile"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryReflectionOnlyLoadAssembly(System.String,System.Reflection.Assembly@)">
            <summary>
            Attemps to load an assembly name or file using
            different APIs.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.MakeGenericType(System.Type,System.Type[])">
            <summary>
            A replacement for the same method of <see cref="T:System.Type"/> which does better error reporting.
            </summary>
            <param name="genericType"></param>
            <param name="typeArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetIsClass(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is a class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetIsSealed(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is sealed.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetIsArray(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is an array.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetIsGenericType(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is a generic type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetIsCOMObject(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is a COM object.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetIsGenericParameter(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is a generic parameter.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetIsEnum(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is enum.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetIsGenericTypeDefinition(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is generic type definition.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetContainsGenericParameters(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type contains generic parameters.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetIsPointer(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is a pointer.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetIsByRef(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is a byref.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetIsValueType(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is a value type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetIsAbstract(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is abstract.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.TryGetIsInterface(System.Type,System.Boolean@)">
            <summary>
            Tries to check if a type is an interface.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsValueType(System.Type)">
            <summary>
            Determines whether the specified type is ValueType.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsSealed(System.Type)">
            <summary>
            Determines whether the specified type is Sealed.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsCOMObject(System.Type)">
            <summary>
            Determines whether the specified type is a COM Object.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsClass(System.Type)">
            <summary>
            Determines whether the specified type is a Class kind.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsGenericType(System.Type)">
            <summary>
            Determines whether the specified type is Generic.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsGenericParameter(System.Type)">
            <summary>
            Determines whether the specified type is a Generic Parameter.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsArray(System.Type)">
            <summary>
            Determines whether the specified type is an array.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.ContainsGenericParameters(System.Type)">
            <summary>
            Determines whether the specified type contains generic parameters.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsGenericTypeDefinition(System.Type)">
            <summary>
            Determines whether the specified type is generic type definition.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsEnum(System.Type)">
            <summary>
            Determines whether the specified type is Enum.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsPointer(System.Type)">
            <summary>
            Determines whether the specified type is a Pointer.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsAbstract(System.Type)">
            <summary>
            Determines whether the specified type is Abstract.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsInterface(System.Type)">
            <summary>
            Determines whether the specified type is Interface.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.IsByRef(System.Type)">
            <summary>
            Determines whether the specified type is a ByRef.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetType(System.Type,System.String)">
            <summary>
            Gets a named type of an assembly given by one of its types;
            used by attributes, that's why we don't use SafeDebug.Assert here.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="fullTypeName">Full name of the type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.ThrowIfNotClassOrValueType(System.Type,System.String)">
            <summary>
            Checks whether the given type represents a (possibly partially instantiated) class or value type;
            used by attributes, that's why we don't use SafeDebug.Assert here.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.ThrowIfNotClassOrInterfaceOrValueType(System.Type,System.String)">
            <summary>
            Checks whether the given type represents a (possibly partially instantiated) class, interface or value type;
            used by attributes, that's why we don't use SafeDebug.Assert here.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.ThrowIfNotClass(System.Type,System.String)">
            <summary>
            Checks whether the given type represents a (possibly partially instantiated) class;
            used by attributes, that's why we don't use SafeDebug.Assert here.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.ThrowIfNotDelegate(System.Type,System.String)">
            <summary>
            Checks whether the given type represents a (possibly partially instantiated) delegate;
            used by attributes, that's why we don't use SafeDebug.Assert here.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.ThrowIfNotTypeDefinition(System.Type,System.String)">
            <summary>
            Checks whether the given type represents a type definition.
            used by attributes, that's why we don't use SafeDebug.Assert here.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.ThrowIfNotClosedTypeReference(System.Type,System.String)">
            <summary>
            Checks whether the given type represents a type definition.
            used by attributes, that's why we don't use SafeDebug.Assert here.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.ThrowIfAbstract(System.Type,System.String)">
            <summary>
            Checks whether the given type is not abstract (note: interfaces are abstract).
            used by attributes, that's why we don't use SafeDebug.Assert here.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Gets a named method of a type;
            used by attributes, that's why we don't use SafeDebug.Assert here.
            </summary>
            <param name="declaringType">Type of the declaring.</param>
            <param name="name">The name.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetBaseDefinition(System.Reflection.MethodInfo)">
            <summary>
            Gets the base definition.
            </summary>
            <param name="methodInfo">The method info.</param>
            <returns>never null</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.RebuildMethodInfo(System.Reflection.MethodInfo)">
            <summary>
            This method rebuild a method info. 
            </summary>
            <remarks>
            This method returns an equivalent method info. 
            While principle, this method is useless, in practice, it is useful to work around reflection quirks.
            </remarks>
            <param name="methodInfo">The method info.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetBaseDefinition(System.Reflection.MethodInfo,System.Boolean@)">
            <summary>
            Gets the base definition.
            </summary>
            <param name="methodInfo">The method info.</param>
            <param name="wasBaseDefinitionAlready">if set to <c>true</c> [was base definition already].</param>
            <returns>never null</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetMetadataTokenOrZero(System.Reflection.MemberInfo)">
            <summary>
            Obtains the metadata token associated with a memberInfo, or zero if the token is not available.
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetMetadataToken(System.Reflection.MemberInfo)">
            <summary>
            Obtains the metadata token associated with a memberInfo, or zero if the token is not available.
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetRootDefinition(System.Reflection.MethodInfo)">
            <summary>
            Gets the base definition.
            </summary>
            <param name="methodInfo">The method info.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.InvokeFinalizer(System.Type,System.Object)">
            <summary>
            Finalizes the specified instance.
            </summary>
            <param name="superType">A supertype of the instance.</param>
            <param name="instance">The instance.</param>
            <remarks>
            Use with care, as this may interfere with the garbage collector.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.InvokeFinalizer(System.Object)">
            <summary>
            Finalizes the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <remarks>
            Use with care, as this may interfere with the garbage collector.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetType(System.String,System.String)">
            <summary> 
            Gets the type from the assembly short and and type full name.
            Throws ArgumentException on any problem.
            </summary>
            <param name="assemblyName"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetBindingFlags(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Gets the binding flags from a method reference
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ReflectionHelper.GetBindingFlags(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference)">
            <summary>
            Gets the 'best' binding flag for the method reference. (The visibiliy information
            is missing).
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._ThreadContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._ThreadContext.Sweep">
            <summary>
            Processes any pending notifications about destroyed threads
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring._ThreadContext.ExecutionMonitor">
            <summary>
            Gets the currently active execution monitor, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring._ThreadContext.Count">
            <summary>
            The number of currently alive threads; can change any moment
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._ProtectingThreadContext.Acquire">
            <summary>
            Acquires this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._ProtectingThreadContext.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring._Special">
            <summary>
            This class implements callbacks that are called by 
            the instrumented code, and special method substitutions.
            The methods in this class are not meant to be called by anyone else.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Robustness.FinalizerExceptionRaised(System.Object)">
            <summary>
            Raised when an exception from a protected finalizer is raised.
            </summary>
            <param name="exception"></param>
            <returns>true to rethrow; false to swallow</returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.Detour">
            <summary>
            A method detour
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.Detour.Delegate">
            <summary>
            Gets the detour delegate
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.Detour.MethodAddress">
            <summary>
            The detour invoke address 
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.Detour.#ctor(System.Delegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Monitoring.Detour"/> class.
            </summary>
            <param name="detour">The detour.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.DetoursException">
            <summary>
            Exception raised in the _Detours api
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.DetoursException.#ctor">
            <summary>
            Initializes a new instance of the exception
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.DetoursException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.DetoursException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception
            </summary>
            <param name="context"></param>
            <param name="info"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.ClearDetours">
            <summary>
            Clears all detours, caches (not the events!).
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.AttachFallbackBehavior(Microsoft.ExtendedReflection.Monitoring._Detours.TryGetDetourCallback)">
            <summary>
            Attaches the fallback behavior.
            </summary>
            <param name="fallbackBehavior">The fallback behavior.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.DetachFallbackBehavior(Microsoft.ExtendedReflection.Monitoring._Detours.TryGetDetourCallback)">
            <summary>
            Detaches the fallback behavior.
            </summary>
            <param name="fallbackBehavior">The fallback behavior.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.OnAttachedUninstrumentedMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Raises AttachedUninstrumentedMethod
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.OnAttachedUninstrumentableMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Raises AttachedUninstrumentableMethod
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.OnAttachedMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Raises AttachedMethod
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.OnDetachedMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Raises AttachedMethod
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.CreateUninitializedInstance(System.Type)">
            <summary>
            Gets an uninitialized runtime instance.
            </summary>
            <returns></returns>
            <param name="runtimeType"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.CreateUninitializedInstance``1">
            <summary>
            Gets an uninitialized runtime instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.CheckInstrumentation(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Ensures that the process is properly instrumented. 
            </summary>
            <exception cref="T:System.InvalidOperationException">the process is not instrumented</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.CheckProcessInstrumentation">
            <summary>
            Ensures that the method is properly instrumented. 
            </summary>
            <exception cref="T:System.InvalidOperationException">the process is not instrumented</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.InternalGetDetour(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            This method supports the extended reflection infrastructure
            and is not intended for use.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.InternalGetInstanceDetour(System.Object,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            This method supports the extended reflection infrastructure
            and is not intended for use.
            </summary>
            <param name="_receiver">receiver of the detour - may be null</param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.GetDetourOrDefault(System.Object,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Gets the registered detour for a given receiver,method pair if any.
            Does not invoke the fallback behavior.
            </summary>
            <param name="_receiver"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.GetFallbackDetour(System.Object,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Queries the fallback behavior for a detour
            </summary>
            <param name="_receiver"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.InternalGetDetourDelegate(Microsoft.ExtendedReflection.Monitoring.Detour)">
            <summary>
            This method supports the extended reflection infrastructure
            and is not intended for use.
            </summary>
            <param name="detourInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.InternalGetDetourFunctionPointer(Microsoft.ExtendedReflection.Monitoring.Detour)">
            <summary>
            This method supports the extended reflection infrastructure
            and is not intended for use.
            </summary>
            <param name="detourInstance"></param>
            <returns></returns>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Monitoring._Detours.AttachedUninstrumentedMethod">
            <summary>
            Raised a detour was attached to an uninstrumented method.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Monitoring._Detours.AttachedUninstrumentableMethod">
            <summary>
            Raised a detour was attached to an uninstrumentable method.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Monitoring._Detours.AttachedMethod">
            <summary>
            Raised a detour was attached to a method.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Monitoring._Detours.DetachedMethod">
            <summary>
            Raised a detour was detached from a method.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Monitoring._Detours.UninitializedInstanceCreated">
            <summary>
            Raised when an uninitialized instance is created
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Monitoring._Detours.AtDetour">
            <summary>
            Raised when a detour is about to be taken 
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring._Detours.DetourCallbackData">
            <summary>
            any method called on this type should be enclosed in a write lock
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring._Detours.DetourDispatcher">
            <summary>
            Dispatched detoured methods to targetted receivers.
            </summary>
            <remarks>
            Call are first dispatched to individual instances, or
            to the main delegate if anything else.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._Detours.DetourDispatcher.GetDetour(System.Object)">
            <summary>
            Gets the detour, given an instance. May be null.
            </summary>
            <param name="_receiver"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring._Detours.TryGetDetourCallback">
            <summary>
            Delegate that represents 
            </summary>
            <param name="_receiver"></param>
            <param name="method"></param>
            <param name="detour"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.Controller">
            <summary>
            This class controls whether callbacks from the instrumentation
            are passed through to a user-provided interface.
            </summary>
            <remarks>
            Only one controller instance can be active at any point in time,
            and it must be disposed before another instance can be obtained.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.Controller.Start(Microsoft.ExtendedReflection.Monitoring.IExecutionMonitor,System.Int32)">
            <summary>
            Start monitoring of instrumentation callbacks.
            </summary>
            <param name="executionMonitor">thread manager receives callbacks on a per-thread basis</param>
            <param name="initialThreadId">id of current thread</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.Controller.Stop">
            <summary>
            Stop monitoring of instrumentation callbacks.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.Controller.CanMonitor(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Check whether a method can be monitored.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.Controller.CanMonitor(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Check whether methods of a type can be monitored.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.Controller.AllMonitored">
            <summary>
            Whether all assemblies are monitored.
            </summary>
            <remarks>
            The sets <see cref="P:Microsoft.ExtendedReflection.Monitoring.Controller.MonitoredTypesExclusions"/> and <see cref="P:Microsoft.ExtendedReflection.Monitoring.Controller.MonitoredAssembliesExclusions"/>
            define exceptions.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.Controller.MonitoredTypes">
            <summary>
            Set of monitored types.
            </summary>
            <remarks>
            The return value <code>null</code> indicates that all types are monitored,
            unless they are part of <see cref="P:Microsoft.ExtendedReflection.Monitoring.Controller.MonitoredTypesExclusions"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.Controller.MonitoredAssemblies">
            <summary>
            Set of monitored assemblies.
            </summary>
            <remarks>
            The return value <code>null</code> indicates that all types are monitored,
            unless they are part of <see cref="P:Microsoft.ExtendedReflection.Monitoring.Controller.MonitoredTypesExclusions"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.Controller.MonitoredTypesExclusions">
            <summary>
            Set of monitored types exclusions.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.Controller.MonitoredAssembliesExclusions">
            <summary>
            Set of monitored assemblies exclusions.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.Controller.SubstitutionAssemblies">
            <summary>
            Set of assemblies containing substitutions. Must be fully qualified file names.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.SandboxTrust">
            <summary>
            Level of trust 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.SandboxTrust.FullTrust">
            <summary>
            Full access to all resources.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.SandboxTrust.Test">
            <summary>
            Maximal set of access resources without destroying the machine.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.SandboxTrust.LocalIntranet">
            <summary>
            The default policy permission set within an enterprise.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.SandboxTrust.Internet">
            <summary>
            The default policy permission set suitable for content from unknown origin.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.SandboxTrust.Execution">
            <summary>
            Permission to run (execute), but no permissions to use protected resources.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.PartialNameMembershipCondition">
            <summary>
            Special membership for SxS assemblies
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.PartialNameMembershipCondition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Monitoring.PartialNameMembershipCondition"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.PartialNameMembershipCondition.Check(System.Security.Policy.Evidence)">
            <summary>
            Checks the specified evidence.
            </summary>
            <param name="evidence">The evidence.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.PartialNameMembershipCondition.Copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.PartialNameMembershipCondition.FromXml(System.Security.SecurityElement)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.PartialNameMembershipCondition.ToXml">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.PartialNameMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
            <summary>
            Froms the XML.
            </summary>
            <param name="securityElement">The security element.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.PartialNameMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.PartialNameMembershipCondition.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.SandboxAppDomain">
            <summary>
            A disposable sandbox AppDomain
            </summary>
            <remarks>
            See Junfeng Zhang's blog for more details about 
            AppDomain setup:
            http://blogs.msdn.com/junfeng/archive/2004/02/09/69919.aspx
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.SandboxAppDomain.CreateFromCurrentDomain(System.String,System.String[])">
            <summary>
            Creates a new AppDomain from the current domain, reuses the configuration
            file if necessary
            </summary>
            <param name="name"></param>
            <param name="searchDirectories"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.SandboxAppDomain.Create(System.String,System.String,System.String[])">
            <summary>
            Creates the specified assembly file.
            </summary>
            <param name="assemblyFile">The assembly file.</param>
            <param name="privateBinPath">The private bin path.</param>
            <param name="searchDirectories">The search directories.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.SandboxAppDomain.GetConfigurationFile(System.String)">
            <summary>
            Gets the configuration file name
            </summary>
            <param name="assemblyFile">The assembly file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.SandboxAppDomain.Create(System.String,System.String,Microsoft.ExtendedReflection.Monitoring.SandboxTrust,System.LoaderOptimization,System.String[],System.String[])">
            <summary>
            Creates a sandboxed <see cref="T:System.AppDomain"/>.
            </summary>
            <param name="assemblyFile">The assembly file.</param>
            <param name="privateBinPath">The private bin path.</param>
            <param name="trust">The trust.</param>
            <param name="loaderOptimization">The loader optimization.</param>
            <param name="fullTrustAssemblyNames">The full trust assembly names.</param>
            <param name="searchDirectories">The search directories.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.SandboxAppDomain.CreateInstance``1">
            <summary>
            Creates and unwraps the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.SandboxAppDomain.CreateInstanceFrom``1">
            <summary>
            Creates and unwraps the instance 
            using the 'From' load context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.SandboxAppDomain.DoCallBack(System.CrossAppDomainDelegate)">
            <summary>
            Executes the code in another application domain that is identified by the
            specified delegate.
            </summary>
            <param name="callBackDelegate">The call back delegate.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.SandboxAppDomain.Trust">
            <summary>
            Gets the trust.
            </summary>
            <value>The trust.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.SandboxAppDomain.Resolver">
            <summary>
            Gets the resolver.
            </summary>
            <value>The resolver.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring._ThreadDepot">
            <summary>
            Keeps track of the threads created by the user program.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._ThreadDepot.AddUnStartedThread(System.Threading.Thread)">
            <summary>
            Call to Thread.start() in user code will be replaced by
            calling this method.
            </summary>
            <param name="thread">the thread the user wants to start</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring._ThreadDepot.RunNextThread">
            <summary>
            Picks one thread from the thread depot and runs it.
            </summary>
            <returns>if there was a thread in the depot (== we ran a thread)</returns>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring._ThreadDepot.StaticState.Enabled">
            <summary>
            Flags which determines whether the thread depot, i.e. the queueing of threads, is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring._ThreadDepot.StaticState.CurrentlyScheduledThread">
            <summary>
            Retrieves the currently scheduled thread
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ISolver">
            <summary>
            A solver for formulas.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ISolver.Assert(System.String,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Asserts the specified condition in the current context.
            </summary>
            <param name="description">The description.</param>
            <param name="condition">The condition; must be a proper-stack-boolean.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ISolver.Push">
            <summary>
            Pushes a new context.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ISolver.Pop">
            <summary>
            Pops the last context.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ISolver.AddDomainVariable(System.Int32,Microsoft.ExtendedReflection.Interpretation.ISymbolIdWithType)">
            <summary>
            Adds a domain variable; these are roots of models.
            </summary>
            <param name="time">The time.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ISolver.AddDomainVariable(Microsoft.ExtendedReflection.Interpretation.ByRefHolderObjectId)">
            <summary>
            Adds a domain variable; these are roots of models.
            </summary>
            <param name="objectId">object id</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ISolver.Minimize(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Try to minimize a I4/I8 number.
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ISolver.TryGetModel(Microsoft.ExtendedReflection.Reasoning.IModelHints,Microsoft.ExtendedReflection.Reasoning.IModel@)">
            <summary>
            Attempts to obtain a model of the constraints pushed into the solver.
            </summary>
            <param name="hints">can be <code>null</code> or obtained from <see cref="P:Microsoft.ExtendedReflection.Reasoning.IModel.Hints"/></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.IModel">
            <summary>
            This interface represents a model of a constraint system.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.IModel.Compactify">
            <summary>
            A model may build up a cache internally for derived terms; 
            this method is meant to clear this cache.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.IModel.GetValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Obtains the representative of a term.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.IModel.UsesPointerSpace">
            <summary>
            Gets a value indicating whether this model with refer to the pointer space.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.IModel.Diagnostics">
            <summary>
            Debugging functionality, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.IModel.Hints">
            <summary>
            These (optional) hints can be used to make the generation of
            related models faster.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.IModelHints">
            <summary>
            This interface represents hints that indicate how a model can be generated.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.IModelHints.RelatedModel">
            <summary>
            A related model.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.IModelDiagnostics">
            <summary>
            Debugging functionality.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.IModelDiagnostics.Dump(System.IO.TextWriter)">
            <summary>
            Dumps out an internal representation of the model.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ModelCache">
            <summary>
            This model implementation retrieves its model from a given other model a caches the results
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ModelCache.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Interpretation.ISymbolId},System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Interpretation.ByRefHolderObjectId},Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Reasoning.IModel,System.IO.TextWriter,Microsoft.ExtendedReflection.Interpretation.IFunctionInterpretationProvider,Microsoft.ExtendedReflection.Collections.IFiniteSet{Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Reasoning.ModelCache"/> class.
            </summary>
            <param name="symbolRoots">The symbol roots.</param>
            <param name="objectRoots">The object roots.</param>
            <param name="termManager">The term manager.</param>
            <param name="model">The model.</param>
            <param name="logWriter">writer for logging all accesses to the model cache, if any</param>
            <param name="functionInterpretationProvider">The function interpretation provider.</param>
            <param name="objects">the set of objects contained in the model</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ModelCache.GetValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns a concrete value for a term using the cached data
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ModelCache.Compactify">
            <summary>
            Reduces the memory footprint.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ModelCache.Dispose">
            <summary>
            Frees memory, but does not render instance obsolete.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ModelCache.Hints">
            <summary>
            These (optional) hints can be used to make the generation of
            related models faster.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ModelCache.Diagnostics">
            <summary>
            Debugging functionality, if any.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ModelCache.UsesPointerSpace">
            <summary>
            Gets a value indicating whether this model with refer to the pointer space.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderBase">
            <summary>
            A base class that allows to define a mapping of 
            methods to <see cref="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodResultInterpreter"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderBase.termManager">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderBase.state">
            <summary>
            The state is only available after <see cref="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderBase.Initialize(Microsoft.ExtendedReflection.Interpretation.States.IState)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderBase.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="termManager"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderBase.AddSubstitutions">
            <summary>
            Overwrite to make calls to Add.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderBase.Add(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodResultInterpreter)">
            <summary>
            Maps a method to an interpreter.
            </summary>
            <param name="method"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderBase.Add(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodResultInterpreter)">
            <summary>
            Maps all instantiations of a method definition to an interpreter.
            </summary>
            <param name="definition"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderBase.Initialize(Microsoft.ExtendedReflection.Interpretation.States.IState)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpretationProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderBase.TryGetMethodInterpreter(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpreter@)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpretationProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderBase.TryGetDelegatedReceiver(System.Int32,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.Term,System.Boolean,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Implements a method of <see cref="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpretationProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpretationProviderBase.Substitute(Microsoft.ExtendedReflection.Interpretation.ISubstitution)">
            <summary>
            Applies the specified substitution on all cached values.
            </summary>
            <param name="substitution">The substitution.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodResultInterpreter">
            <summary>
            Tries to define the result of a method call.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodExceptionInterpreter">
            <summary>
            Tries to define the condition under which a method call would throw a given exception.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpreterDelegater">
            <summary>
            Maps the <see cref="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.IMethodInterpreter"/> and
            <see cref="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.ICallInterpreter"/> into an easy
            to use delegate.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpreterDelegater.#ctor(Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodResultInterpreter)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="resultInterpreter"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodInterpreterDelegater.#ctor(Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodResultInterpreter,Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.MethodExceptionInterpreter)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="resultInterpreter"></param>
            <param name="exceptionInterpreter"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.HashCodeHelper">
            <summary>
            This class provides some utility function to compute strong hashcodes.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.GetHashCode(System.Int64)">
            <summary>
            Creates a strong hashcode
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine(System.Int32,System.Int32)">
            <summary>
            Combines two hashcodes in a strong way.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines three hashcodes in a strong way.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines four hashcodes in a strong way.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines five hashcodes in a strong way.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines six hashcodes in a strong way.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
            <param name="e">The e.</param>
            <param name="f">The f.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine(System.Int32[])">
            <summary>
            Combines the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.CombineToInt32(System.Byte[])">
            <summary>
            Combines the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine``1(``0[],System.Converter{``0,System.Int32})">
            <summary>
            Combines the specified array.
            </summary>
            <param name="values">The values.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine(System.Int64,System.Int64)">
            <summary>
            Combines two hashcodes in a strong way.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine(System.Int64,System.Int64,System.Int64)">
            <summary>
            Combines three hashcodes in a strong way.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Combines four hashcodes in a strong way.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Combines five hashcodes in a strong way.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Combines six hashcodes in a strong way.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
            <param name="e">The e.</param>
            <param name="f">The f.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine(System.Int64[])">
            <summary>
            Combines the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.CombineToInt64(System.Byte[])">
            <summary>
            Combines the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.CombineToInt64(System.String)">
            <summary>
            Combines the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine``1(``0[],System.Converter{``0,System.Int64})">
            <summary>
            Combines the specified array.
            </summary>
            <param name="values">The values.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HashCodeHelper.Combine``1(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,System.Int64})">
            <summary>
            Combines the specified enumerable values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.IntPtrHelper">
            <summary>
            Helper class which provides basic offset arithmetic over <see cref="T:System.IntPtr"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.IntPtrHelper.Next(System.IntPtr)">
            <summary>
            Computes <code>baseAddress+1</code>.
            </summary>
            <param name="baseAddress"></param>
            <returns>baseAddress+1</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.IntPtrHelper.Offset(System.IntPtr,System.IntPtr)">
            <summary>
            Computes <code>baseAddress+delta</code>.
            </summary>
            <param name="baseAddress"></param>
            <param name="delta"></param>
            <returns>baseAddress+delta</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.IntPtrHelper.Negate(System.IntPtr)">
            <summary>
            Negates a value.
            </summary>
            <param name="value">The value.</param>
            <returns>-value</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.IntPtrHelper.ElementAddress(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Computes <code>baseAddress+elementSize*elementCount</code>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.IntPtrHelper.TryGetElementIndex(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Tries to compute the index of an element in an array.
            </summary>
            <param name="address"></param>
            <param name="baseAddress"></param>
            <param name="elementSize"></param>
            <param name="elementIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.IntPtrHelper.Less(System.IntPtr,System.IntPtr)">
            <summary>
            Computes <code>left&lt;right</code>
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns><code>left&lt;right</code></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.IntPtrHelper.Equals(System.IntPtr,System.IntPtr)">
            <summary>
            Computes <code>left==right</code>
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns><code>left==right</code></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.IntPtrHelper.Compare(System.IntPtr,System.IntPtr)">
            <summary>
            Compares two values.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns><code>left==right</code></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.IntPtrHelper.ToUIntPtr(System.IntPtr)">
            <summary>
            Converts a <see cref="T:System.UIntPtr"/> value into <see cref="T:System.IntPtr"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.IntPtrHelper.ArrayLength(System.Array)">
            <summary>
            Gets the length of an array as a signed native integer.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.IntPtrHelper.ArrayElement(System.Array,System.IntPtr)">
            <summary>
            Gets an element of an array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.IntPtrHelper.IsHighestBitSet(System.IntPtr)">
            <summary>
            Checks whether the highest bit is set.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ObjectIdentity`1">
            <summary>
            This class provides an equality comparer of objects
            that uses the object identity, ignoring overriden 
            <see cref="M:System.Object.GetHashCode"/> or <see cref="M:System.Object.Equals(System.Object)"/> functions.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ObjectIdentity`1.Comparer">
            <summary>
            Equality comparer of objects
            that uses the object identity, ignoring overriden 
            <see cref="M:System.Object.GetHashCode"/> or <see cref="M:System.Object.Equals(System.Object)"/> functions.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeBag`1">
            <summary>
            A safe implementation of a bag
            </summary>
            <remarks>
            Safe here means that this class will not be instrumented.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.IFiniteBag`1">
            <summary>
            Finite bag
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.IBag`1">
            <summary>
            (Possibly infinite) bag
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IBag`1.Comparer">
            <summary>
            Gets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IBag`1.Item(`0)">
            <summary>
            Determines the multiplicity of an element.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeBag`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeBag`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeBag`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeBag`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeBag`1.Add(`0)">
            <summary>
            Adds <code>value</code> to the bag
            returns new multiplicity
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeBag`1.Add(`0,System.Int32)">
            <summary>
            Adds <code>value</code> to the bag
            returns new multiplicity
            </summary>
            <param name="value">The value.</param>
            <param name="increase">The increase.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeBag`1.AddRange(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,System.Int32}})">
            <summary>
            Adds the range.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeBag`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeBag`1.Remove(`0)">
            <summary>
            Removes <code>value</code> from the bag
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeBag`1.ChooseGreatest">
            <summary>
            Chooses (deterministically) some element of the set with the greatest multiplicity
            </summary>
            <remarks>
            The set must be non-empty.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeBag`1.TryGetValue(`0,System.Int32@)">
            <summary>
            Attempts to retrieve the multiplicity of a value
            </summary>
            <param name="key"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeBag`1.GetEnumerator">
            <summary>
            Gets an enumerator of the multiplicities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeBag`1.ToIndexable">
            <summary>
            Return sn indexable copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeBag`1.CopyTo(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,System.Int32}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeBag`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeBag`1.ClearAndTrim">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeBag`1.Comparer">
            <summary>
            Gets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeBag`1.Item(`0)">
            <summary>
            Multiplicity of elements
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeBag`1.Items">
            <summary>
            All items in this bag, occurring as often as their multiplicity is in the bag
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeBag`1.UniqueItems">
            <summary>
            All unique items in this bag.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeBag`1.UniqueCount">
            <summary>
            Count of unique items in this bag
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeBag`1.IsEmpty">
            <summary>
            Whether this bag is empty
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeBag`1.Microsoft#ExtendedReflection#Collections#ICountable{Microsoft#ExtendedReflection#Collections#SafeKeyValuePair{T@System#Int32}}#Count">
            <summary>
            not public, since its confusing outside of the context of the countable type
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeDictionary`2">
            <summary>
            A safe replacement for dictionary.
            </summary>
            <remarks>
            Safe here means that this class will not be instrumented.
            This implementation is deterministic, i.e. the hashcode of values does not affect the order in which elements are returned by the enumerator.
            </remarks>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="capacity"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.GetOrCreateValue``1(`0,``0,Microsoft.ExtendedReflection.Collections.SafeDictionary{`0,`1}.ValueCreator{``0})">
            <summary>
            Gets or creates the value.
            </summary>
            <remarks>
            The purpose of the context argument is to enable statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="key">The key.</param>
            <param name="context">The context.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.SynchronizedGetOrCreateValue``1(`0,``0,Microsoft.ExtendedReflection.Collections.SafeDictionary{`0,`1}.ValueCreator{``0})">
            <summary>
            Gets or creates the value.
            </summary>
            <remarks>
            The purpose of the context argument is to enable statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="key">The key.</param>
            <param name="context">The context.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.GetOrCreateValue(`0,Microsoft.ExtendedReflection.Collections.SafeDictionary{`0,`1}.ValueCreator)">
            <summary>
            Gets or creates the value.
            </summary>
            <param name="key">The key.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
            <remarks>
            This method should be used with statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.SynchronizedGetOrCreateValue(`0,Microsoft.ExtendedReflection.Collections.SafeDictionary{`0,`1}.ValueCreator)">
            <summary>
            Gets or creates the value.
            </summary>
            <param name="key">The key.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
            <remarks>
            This method should be used with statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.Add(`0,`1)">
            <summary>
            This method expect the key to be new.
            In other words, there should not be a mapping for this key already in the dictionary.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.AddRange(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}})">
            <summary>
            Adds the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.AddRange(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}[])">
            <summary>
            Adds the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.OverrideRange(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}})">
            <summary>
            Overrides the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.OverrideRange(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}[])">
            <summary>
            Overrides the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ClearAndTrim">
            <summary>
            Removes all elements, and trims the size of the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ContainsKey(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ContainsValue(`1)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ToIndexable">
            <summary>
            Copies the dictionary into an indexable list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.CopyTo(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ChangeValues(System.Converter{`1,`1})">
            <summary>
            Changes all values.
            </summary>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ConvertValues``1(System.Converter{`1,``0})">
            <summary>
            Converts this dictionary, given a converter for values.
            </summary>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the range.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.RemoveRange(`0[])">
            <summary>
            Removes the range.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.Item(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ValueCreator`1">
            <summary>
            Value creator delegate.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ValueCreator">
            <summary>
            Value creator delegate.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.KeyCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.IFiniteSet`1">
            <summary>
            Finite set
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.ISet`1">
            <summary>
            (Possibly infinite) set
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.ISet`1.Contains(`0)">
            <summary>
            Determines whether this set contains the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.ISet`1.Comparer">
            <summary>
            Gets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.KeyCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeDictionary{`0,`1})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.KeyCollection.Contains(`0)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.KeyCollection.Microsoft#ExtendedReflection#Collections#ISet{TKey}#Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.KeyCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.KeyCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.KeyCollection.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.KeyCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.KeyCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ValueCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ValueCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeDictionary{`0,`1})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ValueCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ValueCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ValueCollection.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ValueCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDictionary`2.ValueCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1">
            <summary>
            A safe replacement for dictionary.
            </summary>
            <remarks>
            Safe here means that this class will not be instrumented.
            This implementation is deterministic, i.e. the hashcode of values does not affect the order in which elements are returned by the enumerator.
            </remarks>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.GetOrCreateValue``1(System.Int32,``0,Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary{`0}.ValueCreator{``0})">
            <summary>
            Gets or creates the value.
            </summary>
            <remarks>
            The purpose of the context argument is to enable statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="key">The key.</param>
            <param name="context">The context.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.SynchronizedGetOrCreateValue``1(System.Int32,``0,Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary{`0}.ValueCreator{``0})">
            <summary>
            Gets or creates the value.
            </summary>
            <remarks>
            The purpose of the context argument is to enable statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="key">The key.</param>
            <param name="context">The context.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.GetOrCreateValue(System.Int32,Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary{`0}.ValueCreator)">
            <summary>
            Gets or creates the value.
            </summary>
            <param name="key">The key.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
            <remarks>
            This method should be used with statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.SynchronizedGetOrCreateValue(System.Int32,Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary{`0}.ValueCreator)">
            <summary>
            Gets or creates the value.
            </summary>
            <param name="key">The key.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
            <remarks>
            This method should be used with statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.Add(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.AddRange(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int32,`0}})">
            <summary>
            Adds the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.AddRange(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int32,`0}[])">
            <summary>
            Adds the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.OverrideRange(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int32,`0}})">
            <summary>
            Overrides the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.OverrideRange(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int32,`0}[])">
            <summary>
            Overrides the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ClearAndTrim">
            <summary>
            Removes all elements, and trims the size of the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ChooseKey(System.Random)">
            <summary>
            Chooses (deterministically) some key of the dictionary
            </summary>
            <param name="random">random value generator, or <code>null</code> to return elements in (roughly) insertion order</param>
            <remarks>
            The set must be non-empty.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ContainsKey(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ContainsValue(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.CopyTo(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int32,`0}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ChangeValues(System.Converter{`0,`0})">
            <summary>
            Changes all values.
            </summary>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ConvertValues``1(System.Converter{`0,``0})">
            <summary>
            Converts this dictionary, given a converter for values.
            </summary>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.Remove(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.TryGetValue(System.Int32,`0@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ValueCreator`1">
            <summary>
            Value creator delegate.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ValueCreator">
            <summary>
            Value creator delegate.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.KeyCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.KeyCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary{`0})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.KeyCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.KeyCollection.CopyTo(System.Int32[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.KeyCollection.Contains(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.KeyCollection.Microsoft#ExtendedReflection#Collections#ISet{System#Int32}#Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.KeyCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.KeyCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.KeyCollection.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.KeyCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.KeyCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ValueCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ValueCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary{`0})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ValueCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ValueCollection.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ValueCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ValueCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ValueCollection.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ValueCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary`1.ValueCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeKeyValuePair`2">
            <summary>
            A safe replacement for key-value pairs.
            </summary>
            <remarks>
            Safe here means that this class will not be instrumented.
            </remarks>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeKeyValuePair`2.#ctor(`0,`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeKeyValuePair`2.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeKeyValuePair`2.Key">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeKeyValuePair`2.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeList`2">
            <summary>
            A safe replacement for list.
            </summary>
            <remarks>
            Safe here means that this class will not be instrumented.
            </remarks>
            <typeparam name="TSub"></typeparam>
            <typeparam name="TSuper"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`2.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`2.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`2.ToSuperArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`2.ToSuperIndexable">
            <summary>
            To indexable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`2.Microsoft#ExtendedReflection#Collections#ICopyable{TSuper}#CopyTo(`1[],System.Int32)">
            <summary>
            Copies to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeList`2.SuperEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`2.SuperEnumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeList`2.SuperEnumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeList`2.SuperEnumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeSet`1">
            <summary>
            A safe implementation of a set
            </summary>
            <remarks>
            Safe means that the code is not instrumented.
            This implementation is deterministic, i.e. the hashcode of values does not affect the order in which elements are returned by the enumerator.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="initialElements"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeSet`1"/> class.
            </summary>
            <param name="initialElements">The initial elements.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="capacity"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.Clear">
            <summary>
            Removes all elements.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.ClearAndTrim">
            <summary>
            Clears and trims this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.Add(`0)">
            <summary>
            Adds the element <code>t</code> to the set.
            If the element is already in the set, it returns false otherwise true.
            </summary>
            <param name="key">element to add</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.Remove(`0)">
            <summary>
            Removes the element <code>t</code> from the set;
            if the element is in the set, it returns <code>true</code>, otherwise <code>false</code>.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.Choose(System.Random)">
            <summary>
            Chooses (deterministically) some element of the set
            </summary>
            <param name="random">random value generator, or <code>null</code> to return elements in (roughly) insertion order</param>
            <remarks>
            The set must be non-empty.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.GetPermutation(System.Random)">
            <summary>
            Lazily enumerates all elements of the set, starting from a (deterministically) chosen element
            </summary>
            <param name="random">random value generator, or <code>null</code> to return elements in (roughly) insertion order</param>
            <remarks>
            The set must be non-empty.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.Contains(`0)">
            <summary>
            Tests whether <code>t</code> is an element of the set
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.ContainsAny(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets a value indicating if any value of <paramref name="values"/>
            is in the current set.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.ContainsAny(Microsoft.ExtendedReflection.Collections.SafeSet{`0})">
            <summary>
            Gets a value indicating if any value of <paramref name="values"/>
            is in the current set.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.Intersect(Microsoft.ExtendedReflection.Collections.SafeSet{`0})">
            <summary>
            Calculates the intersection of this set and the given set
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.DeepEquals(Microsoft.ExtendedReflection.Collections.SafeSet{`0})">
            <summary>
            Whether this set is deeply equal to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of elements
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes a range of elements
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.ToArray">
            <summary>
            Turns the elements into an array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.ToIndexable">
            <summary>
            returns a new Object array containing the contents 
            of the List. Wrapped as a safe enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.ToSet">
            <summary>
            Converts to a set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.GetEnumerator">
            <summary>
            Creates an enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeSet`1.Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeSet`1.Count">
            <summary>
            the number of elements in this set
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeSet`1.DeepEqualityComparer">
            <summary>
            Deep equality comparer.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeSet`1.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSet`1.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeSet`1.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.UIntPtrHelper">
            <summary>
            Helper class which provides basic offset arithmetic over <see cref="T:System.IntPtr"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.UIntPtrHelper.Offset(System.UIntPtr,System.UIntPtr)">
            <summary>
            Computes <code>baseAddress+delta</code>.
            </summary>
            <param name="baseAddress"></param>
            <param name="delta"></param>
            <returns>baseAddress+delta</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.UIntPtrHelper.Offset(System.UIntPtr,System.IntPtr)">
            <summary>
            Computes <code>baseAddress+delta</code>.
            </summary>
            <param name="baseAddress"></param>
            <param name="delta"></param>
            <returns>baseAddress+delta</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.UIntPtrHelper.Next(System.UIntPtr)">
            <summary>
            Computes <code>baseAddress+1</code>.
            </summary>
            <param name="baseAddress"></param>
            <returns>baseAddress+1</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.UIntPtrHelper.ElementAddress(System.UIntPtr,System.UIntPtr,System.UIntPtr)">
            <summary>
            Computes <code>baseAddress+elementSize*elementCount</code>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.UIntPtrHelper.TryGetElementIndex(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr@)">
            <summary>
            Tries to compute the index of an element in an array.
            </summary>
            <param name="address"></param>
            <param name="baseAddress"></param>
            <param name="elementSize"></param>
            <param name="elementIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.UIntPtrHelper.GetElementIndex(System.UIntPtr,System.UIntPtr,System.UIntPtr,System.UIntPtr@,System.UIntPtr@)">
            <summary>
            Gets the index of the element, and the offset within the element.
            </summary>
            <param name="address">The address.</param>
            <param name="baseAddress">The base address.</param>
            <param name="elementSize">Size of the element.</param>
            <param name="elementIndex">Index of the element.</param>
            <param name="elementOffset">The element offset.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.UIntPtrHelper.Less(System.UIntPtr,System.UIntPtr)">
            <summary>
            Computes <code>left&lt;right</code>
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns><code>left&lt;right</code></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.UIntPtrHelper.And(System.UIntPtr,System.UIntPtr)">
            <summary>
            Computes bitwise and.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns><code>left&lt;right</code></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.UIntPtrHelper.Not(System.UIntPtr)">
            <summary>
            Computes bitwise not.
            </summary>
            <param name="value"></param>
            <returns><code>left&lt;right</code></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.UIntPtrHelper.Equals(System.UIntPtr,System.UIntPtr)">
            <summary>
            Computes <code>left==right</code>
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns><code>left==right</code></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.UIntPtrHelper.Compare(System.UIntPtr,System.UIntPtr)">
            <summary>
            Compares two values.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns><code>left==right</code></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.UIntPtrHelper.ToIntPtr(System.UIntPtr)">
            <summary>
            Converts a <see cref="T:System.UIntPtr"/> value into <see cref="T:System.IntPtr"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.UIntPtrHelper.ArrayLength(System.Array)">
            <summary>
            Gets the length of an array as an unsigned native integer.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:__Substitutions.System.Runtime.CompilerServices.RuntimeHelpers.ExecuteCodeWithGuaranteedCleanup(System.Runtime.CompilerServices.RuntimeHelpers.TryCode,System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode,System.Object)">
            <summary>
            Executes the code with guaranteed cleanup.
            </summary>
            <param name="code">The code.</param>
            <param name="backoutCode">The backout code.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="T:Microsoft.Samples.Debugging.CorSymbolStore.SymbolLineDelta">
            <!-- Failed to insert some or all of included XML --><include file="doc\ISymENCUpdate.uex" path="docs/doc[@for=&quot;SymbolLineDelta&quot;]/*"/>
        </member>
        <member name="T:Microsoft.Samples.Debugging.CorSymbolStore.ISymbolEncUpdate">
            <!-- Failed to insert some or all of included XML --><include file="doc\ISymScope.uex" path="docs/doc[@for=&quot;ISymbolScope&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.ISymbolEncUpdate.UpdateSymbolStore(System.Runtime.InteropServices.ComTypes.IStream,Microsoft.Samples.Debugging.CorSymbolStore.SymbolLineDelta[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\ISymENCUpdate.uex" path="docs/doc[@for=&quot;ISymbolEncUpdate.UpdateSymbolStore&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.ISymbolEncUpdate.GetLocalVariableCount(System.Diagnostics.SymbolStore.SymbolToken)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ISymENCUpdate.uex" path="docs/doc[@for=&quot;ISymbolEncUpdate.GetLocalVariableCount&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.ISymbolEncUpdate.GetLocalVariables(System.Diagnostics.SymbolStore.SymbolToken)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ISymENCUpdate.uex" path="docs/doc[@for=&quot;ISymbolEncUpdate.GetLocalVariables&quot;]/*"/>
        </member>
        <member name="T:Microsoft.Samples.Debugging.CorSymbolStore.SymbolBinder">
            <!-- Failed to insert some or all of included XML --><include file="doc\symbinder.uex" path="docs/doc[@for=&quot;SymbolBinder&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolBinder.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\symbinder.uex" path="docs/doc[@for=&quot;SymbolBinder.SymbolBinder&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolBinder.GetReader(System.IntPtr,System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\symbinder.uex" path="docs/doc[@for=&quot;SymbolBinder.GetReader&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolBinder.GetReaderForFile(System.Object,System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\symbinder.uex" path="docs/doc[@for=&quot;SymbolBinder.GetReaderForFile&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolBinder.GetReaderForFile(System.Object,System.String,System.String,Microsoft.Samples.Debugging.CorSymbolStore.SymSearchPolicies)">
            <!-- Failed to insert some or all of included XML --><include file="doc\symbinder.uex" path="docs/doc[@for=&quot;SymbolBinder.GetReaderForFile1&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolBinder.GetReaderForFile(System.Object,System.String,System.String,Microsoft.Samples.Debugging.CorSymbolStore.SymSearchPolicies,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\symbinder.uex" path="docs/doc[@for=&quot;SymbolBinder.GetReaderForFile2&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolBinder.GetReaderFromStream(System.Object,System.Runtime.InteropServices.ComTypes.IStream)">
            <!-- Failed to insert some or all of included XML --><include file="doc\symbinder.uex" path="docs/doc[@for=&quot;SymbolBinder.GetReaderFromStream&quot;]/*"/>
        </member>
        <member name="T:Microsoft.Samples.Debugging.CorSymbolStore.SymbolDocument">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymDocument.uex" path="docs/doc[@for=&quot;SymDocument&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolDocument.GetCheckSum">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymDocument.uex" path="docs/doc[@for=&quot;SymDocument.GetCheckSum&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolDocument.FindClosestLine(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymDocument.uex" path="docs/doc[@for=&quot;SymDocument.FindClosestLine&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymDocument.uex" path="docs/doc[@for=&quot;SymDocument.GetSourceRange&quot;]/*"/>
        </member>
        <member name="P:Microsoft.Samples.Debugging.CorSymbolStore.SymbolDocument.URL">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymDocument.uex" path="docs/doc[@for=&quot;SymDocument.URL&quot;]/*"/>
        </member>
        <member name="P:Microsoft.Samples.Debugging.CorSymbolStore.SymbolDocument.DocumentType">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymDocument.uex" path="docs/doc[@for=&quot;SymDocument.DocumentType&quot;]/*"/>
        </member>
        <member name="P:Microsoft.Samples.Debugging.CorSymbolStore.SymbolDocument.Language">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymDocument.uex" path="docs/doc[@for=&quot;SymDocument.Language&quot;]/*"/>
        </member>
        <member name="P:Microsoft.Samples.Debugging.CorSymbolStore.SymbolDocument.LanguageVendor">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymDocument.uex" path="docs/doc[@for=&quot;SymDocument.LanguageVendor&quot;]/*"/>
        </member>
        <member name="P:Microsoft.Samples.Debugging.CorSymbolStore.SymbolDocument.CheckSumAlgorithmId">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymDocument.uex" path="docs/doc[@for=&quot;SymDocument.CheckSumAlgorithmId&quot;]/*"/>
        </member>
        <member name="P:Microsoft.Samples.Debugging.CorSymbolStore.SymbolDocument.HasEmbeddedSource">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymDocument.uex" path="docs/doc[@for=&quot;SymDocument.HasEmbeddedSource&quot;]/*"/>
        </member>
        <member name="P:Microsoft.Samples.Debugging.CorSymbolStore.SymbolDocument.SourceLength">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymDocument.uex" path="docs/doc[@for=&quot;SymDocument.SourceLength&quot;]/*"/>
        </member>
        <member name="T:Microsoft.Samples.Debugging.CorSymbolStore.ISymUnmanagedDocumentWriter">
            <!-- Failed to insert some or all of included XML --><include file="doc\ISymDocumentWriter.uex" path="docs/doc[@for=&quot;ISymbolDocumentWriter&quot;]/*"/>
        </member>
        <member name="T:Microsoft.Samples.Debugging.CorSymbolStore.ISymUnmanagedNamespace">
            <!-- Failed to insert some or all of included XML --><include file="doc\ISymNamespace.uex" path="docs/doc[@for=&quot;ISymbolNamespace&quot;]/*"/>
        </member>
        <member name="T:Microsoft.Samples.Debugging.CorSymbolStore.SymVariable">
            <!-- Failed to insert some or all of included XML --><include file="doc\ISymVariable.uex" path="docs/doc[@for=&quot;ISymbolVariable&quot;]/*"/>
        </member>
        <member name="T:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.SymbolWriter&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.SetUnderlyingWriter(System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.SetUnderlyingWriter&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.Initialize&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.Initialize(System.Object,System.String,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.Initialize&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.Initialize(System.Object,System.String,System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.Initialize1&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.Initialize(System.Object,System.String,System.Runtime.InteropServices.ComTypes.IStream,System.Boolean,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.Initialize2&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.DefineDocument&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.SetUserEntryPoint&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.OpenMethod&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.CloseMethod">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.CloseMethod&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.DefineSequencePoints&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.OpenScope(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.OpenScope&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.CloseScope(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.CloseScope&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.SetScopeRange&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.DefineLocalVariable&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.DefineParameter&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.DefineField&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.DefineGlobalVariable&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.Close&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.SetSymAttribute&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.OpenNamespace(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.OpenNamespace&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.CloseNamespace">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.CloseNamespace&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.UsingNamespace(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.UsingNamespace&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.SetMethodSourceRange&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.GetDebugInfo(Microsoft.Samples.Debugging.CorSymbolStore.ImageDebugDirectory@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.GetDebugInfo&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.RemapToken(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.RemapToken&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.DefineConstant(System.String,System.Object,System.Byte[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.DefineConstant&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.Abort">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.Abort&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.DefineLocalVariable(System.String,System.Int32,System.Diagnostics.SymbolStore.SymbolToken,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.DefineLocalVariable1&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.DefineGlobalVariable(System.String,System.Int32,System.Diagnostics.SymbolStore.SymbolToken,System.Int32,System.Int32,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.DefineGlobalVariable1&quot;]/*"/>
        </member>
        <member name="M:Microsoft.Samples.Debugging.CorSymbolStore.SymbolWriter.DefineConstant(System.String,System.Object,System.Diagnostics.SymbolStore.SymbolToken)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SymWriter.uex" path="docs/doc[@for=&quot;SymbolWriter.DefineConstant1&quot;]/*"/>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.IndexableDataSource`1">
            <summary>
            Data source build on top of an array
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.DataSourceBase`1">
            <summary>
            A chart data source
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.DataSourceBase`1.GetMinMax">
            <summary>
            Gets the min max.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.DataSourceBase`1.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.DataSourceBase`1.MinMax">
            <summary>
            Min, max range
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Charting.DataSourceBase`1.MinMax.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Charting.DataSourceBase`1.MinMax.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.DataSourceBase`1.MinMax.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.DataSourceBase`1.MinMax"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.IndexableDataSource`1.#ctor(Microsoft.ExtendedReflection.Collections.IIndexable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.IndexableDataSource`1"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.IndexableDataSource`1.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.AxisBase">
            <summary>
            Abstract base class for axis elements
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.ChartComponent">
            <summary>
            Abstract chart component
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.ChartComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.ChartComponent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.AxisBase.GetTitleBrush">
            <summary>
            Gets the title brush.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.AxisBase.GetGridLinePen">
            <summary>
            Gets the grid line pen.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.AxisBase.GetLabelBrush">
            <summary>
            Gets the label brush.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.AxisBase.GetStrokePen">
            <summary>
            Gets the stroke pen.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.AxisBase.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.AxisBase.TitleFont">
            <summary>
            Gets or sets the title font.
            </summary>
            <value>The title font.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.AxisBase.TitleColor">
            <summary>
            Gets or sets the color of the title.
            </summary>
            <value>The color of the title.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.AxisBase.StrokeColor">
            <summary>
            Gets or sets the color of the stroke.
            </summary>
            <value>The color of the stroke.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.AxisBase.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.AxisBase.GridLineDashStyle">
            <summary>
            Gets or sets the grid line dash style.
            </summary>
            <value>The grid line dash style.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.AxisBase.GridLineColor">
            <summary>
            Gets or sets the color of the grid line.
            </summary>
            <value>The color of the grid line.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.AxisBase.GridLineWidth">
            <summary>
            Gets or sets the width of the grid line.
            </summary>
            <value>The width of the grid line.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.AxisBase.LabelColor">
            <summary>
            Gets or sets the color of the label.
            </summary>
            <value>The color of the label.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.AxisBase.LabelFont">
            <summary>
            Gets or sets the label font.
            </summary>
            <value>The label font.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.AxisBase.LabelFormatString">
            <summary>
            Gets or sets the label format string.
            </summary>
            <value>The label format string.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.AxisBase.PrimaryTickLength">
            <summary>
            Gets or sets the length of the primary tick.
            </summary>
            <value>The length of the primary tick.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.AxisBase.SecondaryTickLength">
            <summary>
            Gets or sets the length of the secondary tick.
            </summary>
            <value>The length of the secondary tick.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.AxisBase.FixedBounds">
            <summary>
            Gets or sets a value indicating whether fixed bounds should be used.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.ChartConfig">
            <summary>
            Default chart configuration
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Charting.ChartConfig.DefaultLineStrokeWidth">
            <summary>
            Default stroke width
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Charting.ChartConfig.DefaultFont">
            <summary>
            Default font
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.ChartConfig.PrepareGraphics(System.Drawing.Graphics)">
            <summary>
            Prepares the graphics.
            </summary>
            <param name="g">The g.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.ColorAllocatorBase">
            <summary>
            Abstract base class for color allocators
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.ColorAllocatorBase.NextColor">
            <summary>
            Gets the next color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.ColorAllocatorBase.CreateDefault">
            <summary>
            Creates the default color allocator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.ColorMap">
            <summary>
            Abstract base class for color maps
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.ColorMap.GetColor(System.Single)">
            <summary>
            Gets the color.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.ColorMap.Saturate(System.Single)">
            <summary>
            Saturates the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Charting.ColorMap.Default">
            <summary>
            Gets the default color map
            </summary>
            <value>The color map.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.ElementBase">
            <summary>
            Abstract base class for chart element
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.ElementBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.ElementBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.ElementBase.GetStrokePen">
            <summary>
            Gets the stroke pen.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.ElementBase.GetFillBrush">
            <summary>
            Gets the fill brush.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.ElementBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.ElementBase.StrokeColor">
            <summary>
            Gets or sets the color of the stroke.
            </summary>
            <value>The color of the stroke.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.ElementBase.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.ElementBase.FillColor">
            <summary>
            Gets or sets the color of the fill.
            </summary>
            <value>The color of the fill.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.Histogram">
            <summary>
            Histogram of data
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.Histogram.GetHistogram">
            <summary>
            Gets the histogram.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.Histogram.Compute(System.Single[])">
            <summary>
            Computes the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.Histogram.StepCount">
            <summary>
            Gets or sets the step count.
            </summary>
            <value>The step count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.Histogram.Step">
            <summary>
            Gets the step.
            </summary>
            <value>The step.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.Histogram.Min">
            <summary>
            Gets the min.
            </summary>
            <value>The min.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.Histogram.Max">
            <summary>
            Gets the max.
            </summary>
            <value>The max.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.Histogram.HistogramNode">
            <summary>
            Histogram node
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.Histogram.HistogramNode.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.Histogram.HistogramNode"/> class.
            </summary>
            <param name="left">The left.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.Histogram.HistogramNode.Left">
            <summary>
            Gets the left.
            </summary>
            <value>The left.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.Histogram.HistogramNode.Count">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.HorizontalSerie">
            <summary>
            Horizontal line
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.LabeledSerieBase">
            <summary>
            Abstract base class for labeled series
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.SerieBase">
            <summary>
            Abstract base class for series
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.SerieBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.SerieBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.SerieBase.ProcessYData(Microsoft.ExtendedReflection.Charting.VerticalAxisBase,Microsoft.ExtendedReflection.Charting.DataSourceBase{System.Single})">
            <summary>
            Processes the Y data with respect to the kind
            </summary>
            <param name="yaxis">The yaxis.</param>
            <param name="yData">The y data.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.SerieBase.HasDimension(Microsoft.ExtendedReflection.Charting.ChartDimension)">
            <summary>
            Determines whether the specified dimension has dimension.
            </summary>
            <param name="dimension">The dimension.</param>
            <returns>
            	<c>true</c> if the specified dimension has dimension; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.SerieBase.GetBoundingBox">
            <summary>
            Gets the bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.SerieBase.Paint(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World,Microsoft.ExtendedReflection.Charting.TimeAxis,Microsoft.ExtendedReflection.Charting.VerticalAxisBase)">
            <summary>
            Paints the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
            <param name="xaxis">The xaxis.</param>
            <param name="yaxis">The yaxis.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.SerieBase.PaintLegend(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World,System.Drawing.RectangleF)">
            <summary>
            Paints the legend.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
            <param name="legendPort">The legend port.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.SerieBase.DataKind">
            <summary>
            Gets or sets the kind of the data.
            </summary>
            <value>The kind of the data.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LabeledSerieBase.GetLabelBrush">
            <summary>
            Gets the label brush.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LabeledSerieBase.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LabeledSerieBase.LabelFont">
            <summary>
            Gets the label font.
            </summary>
            <value>The label font.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LabeledSerieBase.LabelColor">
            <summary>
            Gets or sets the color of the label.
            </summary>
            <value>The color of the label.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.HorizontalSerie.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.HorizontalSerie"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.HorizontalSerie.HasDimension(Microsoft.ExtendedReflection.Charting.ChartDimension)">
            <summary>
            Determines whether the specified dimension has dimension.
            </summary>
            <param name="dimension">The dimension.</param>
            <returns>
            	<c>true</c> if the specified dimension has dimension; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.HorizontalSerie.GetBoundingBox">
            <summary>
            Gets the bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.HorizontalSerie.Paint(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World,Microsoft.ExtendedReflection.Charting.TimeAxis,Microsoft.ExtendedReflection.Charting.VerticalAxisBase)">
            <summary>
            Paints the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
            <param name="xaxis"></param>
            <param name="yaxis"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.HorizontalSerie.YData">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.LabelSerie">
            <summary>
            A label
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LabelSerie.#ctor(System.TimeSpan,System.Single,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.LabelSerie"/> class.
            </summary>
            <param name="time">The time.</param>
            <param name="value">The value.</param>
            <param name="label">The label.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LabelSerie.GetLabelBrush">
            <summary>
            Gets the label brush.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LabelSerie.HasDimension(Microsoft.ExtendedReflection.Charting.ChartDimension)">
            <summary>
            Determines whether the specified dimension has dimension.
            </summary>
            <param name="dimension">The dimension.</param>
            <returns>
            	<c>true</c> if the specified dimension has dimension; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LabelSerie.GetBoundingBox">
            <summary>
            Gets the bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LabelSerie.Paint(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World,Microsoft.ExtendedReflection.Charting.TimeAxis,Microsoft.ExtendedReflection.Charting.VerticalAxisBase)">
            <summary>
            Paints the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
            <param name="xaxis"></param>
            <param name="yaxis"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LabelSerie.Time">
            <summary>
            Gets the time.
            </summary>
            <value>The time.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LabelSerie.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LabelSerie.LabelFont">
            <summary>
            Gets the label font.
            </summary>
            <value>The label font.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LabelSerie.LabelColor">
            <summary>
            Gets or sets the color of the label.
            </summary>
            <value>The color of the label.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LabelSerie.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.Legend">
            <summary>
            A legend
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.Legend.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.Legend"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.Legend.GetLabelBrush">
            <summary>
            Gets the label brush.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.Legend.GetWidth(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.SubChart)">
            <summary>
            Computes the size.
            </summary>
            <param name="g">The g.</param>
            <param name="chart">The chart.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.Legend.Paint(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.SubChart)">
            <summary>
            Paints the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="chart">The chart.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.Legend.LabelFont">
            <summary>
            Gets or sets the label font.
            </summary>
            <value>The label font.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.Legend.LabelColor">
            <summary>
            Gets or sets the color of the label.
            </summary>
            <value>The color of the label.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.Legend.PortRadius">
            <summary>
            Gets or sets the port radius.
            </summary>
            <value>The port radius.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.LinearAxis">
            <summary>
            Linear vertical axis
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.VerticalAxisBase">
            <summary>
            Abstract base class for vertical axis
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.VerticalAxisBase.Project(System.Single)">
            <summary>
            Projects the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.VerticalAxisBase.GetWidth(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World)">
            <summary>
            Gets the width.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.VerticalAxisBase.Paint(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World)">
            <summary>
            Paints the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.VerticalAxisBase.Start">
            <summary>
            Gets or sets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.VerticalAxisBase.TickStart">
            <summary>
            Gets or sets the tick start.
            </summary>
            <value>The tick start.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.VerticalAxisBase.Step">
            <summary>
            Gets or sets the step.
            </summary>
            <value>The step.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.VerticalAxisBase.End">
            <summary>
            Gets or sets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LinearAxis.GetWidth(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World)">
            <summary>
            Gets the width.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LinearAxis.Project(System.Single)">
            <summary>
            Projects the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LinearAxis.GetRatio(System.Single)">
            <summary>
            Gets the ratio.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LinearAxis.Paint(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World)">
            <summary>
            Paints the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.LinearDataSource">
            <summary>
            Linear data source
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LinearDataSource.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.LinearDataSource"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="step">The step.</param>
            <param name="stepCount">The step count.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LinearDataSource.GetMinMax">
            <summary>
            Gets the min max.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LinearDataSource.Start">
            <summary>
            Gets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LinearDataSource.Step">
            <summary>
            Gets the step.
            </summary>
            <value>The step.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LinearDataSource.StepCount">
            <summary>
            Gets the step count.
            </summary>
            <value>The step count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LinearDataSource.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.LineStyle">
            <summary>
            Line styles
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Charting.LineStyle.Step">
            <summary>
            Step lines
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Charting.LineStyle.Linear">
            <summary>
            linear interpolation
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Charting.LineStyle.Smooth">
            <summary>
            Splines
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.LineSerie">
            <summary>
            A line
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.LineSerieBase">
            <summary>
            Abstract base class for lines
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LineSerieBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.LineSerieBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LineSerieBase.HasDimension(Microsoft.ExtendedReflection.Charting.ChartDimension)">
            <summary>
            Determines whether the specified dimension has dimension.
            </summary>
            <param name="dimension">The dimension.</param>
            <returns>
            	<c>true</c> if the specified dimension has dimension; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LineSerieBase.GetBoundingBox">
            <summary>
            Gets the bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LineSerieBase.PaintMarkers(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World,System.Drawing.PointF[])">
            <summary>
            Paints the markers.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
            <param name="points">The points.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LineSerieBase.XData">
            <summary>
            Gets or sets the X data.
            </summary>
            <value>The X data.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LineSerieBase.YData">
            <summary>
            Gets or sets the Y data.
            </summary>
            <value>The Y data.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LineSerieBase.Marker">
            <summary>
            Gets or sets the marker.
            </summary>
            <value>The marker.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LineSerie.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.LineSerie"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.LineSerie.Paint(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World,Microsoft.ExtendedReflection.Charting.TimeAxis,Microsoft.ExtendedReflection.Charting.VerticalAxisBase)">
            <summary>
            Paints the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
            <param name="xaxis">The xaxis.</param>
            <param name="yaxis">The yaxis.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.LineSerie.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
            <value>The line style.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.MarkerBase">
            <summary>
            Abstract base class for markers
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.MarkerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.MarkerBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.MarkerBase.Paint(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World,System.Drawing.PointF)">
            <summary>
            Paints the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="w">The w.</param>
            <param name="point">The point.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.MarkerBase.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.ScatterSerie">
            <summary>
            Scatter point serie
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.ScatterSerie.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.ScatterSerie"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.ScatterSerie.Paint(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World,Microsoft.ExtendedReflection.Charting.TimeAxis,Microsoft.ExtendedReflection.Charting.VerticalAxisBase)">
            <summary>
            Paints the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
            <param name="xaxis"></param>
            <param name="yaxis"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.ChartDimension">
            <summary>
            Chart series dimension
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Charting.ChartDimension.Horizontal">
            <summary>
            Horizontal dimension
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Charting.ChartDimension.Vertical">
            <summary>
            Vertical dimension
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.SerieDataKind">
            <summary>
            Kind of data
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Charting.SerieDataKind.Absolute">
            <summary>
            Absolute values
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Charting.SerieDataKind.Percentage">
            <summary>
            Percentage
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.SerieCollection">
            <summary>
            A colllection of <see cref="T:Microsoft.ExtendedReflection.Charting.SerieBase"/>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.SquareMarker">
            <summary>
            A square marker
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.SquareMarker.Paint(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World,System.Drawing.PointF)">
            <summary>
            Paints the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="w">The w.</param>
            <param name="p">The p.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.SubChart">
            <summary>
            A sub-chart
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.SubChart.#ctor(Microsoft.ExtendedReflection.Charting.TimeChart)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.TimeChart"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.SubChart.UpdateBoundingBoxes(System.Drawing.Graphics)">
            <summary>
            Updates the bounding boxes.
            </summary>
            <param name="g">The g.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.SubChart.Paint(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.TimeAxis)">
            <summary>
            Paints the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="xaxis">The xaxis.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.SubChart.ComputeWorldBoundingBox">
            <summary>
            Computes the world bounding box.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.SubChart.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.SubChart.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.SubChart.Legend">
            <summary>
            Gets the legend.
            </summary>
            <value>The legend.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.SubChart.World">
            <summary>
            Gets the world.
            </summary>
            <value>The world.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.SubChart.Series">
            <summary>
            Gets the series.
            </summary>
            <value>The series.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.SubChart.YAxis">
            <summary>
            Gets or sets the Y axis.
            </summary>
            <value>The Y axis.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.TimeAxis">
            <summary>
            The time axis
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.TimeAxis"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeAxis.UpdateWorld(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World)">
            <summary>
            Updates the world.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeAxis.Project(System.TimeSpan)">
            <summary>
            Projects the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeAxis.Paint(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World)">
            <summary>
            Paints the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeAxis.PaintTicks(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World)">
            <summary>
            Paints the ticks.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeAxis.Start">
            <summary>
            Gets or sets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeAxis.Step">
            <summary>
            Gets or sets the step.
            </summary>
            <value>The step.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeAxis.End">
            <summary>
            Gets or sets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.TimeChart">
            <summary>
            A time chart
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeChart.GetBackgroundBrush">
            <summary>
            Gets the background brush.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeChart.GetBackgroundPen">
            <summary>
            Gets the background pen.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeChart.GetChartBrush">
            <summary>
            Gets the chart brush.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeChart.GetStrokePen">
            <summary>
            Gets the stroke pen.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeChart.GetTitleBrush">
            <summary>
            Gets the title brush.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeChart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.TimeChart"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeChart.AddSubChart">
            <summary>
            Adds the sub chart.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeChart.Paint(System.Drawing.Bitmap)">
            <summary>
            Paints the specified bitmap.
            </summary>
            <param name="bmp">The bitmap.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeChart.Paint(System.Drawing.Image,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Paints the specified image.
            </summary>
            <param name="image">The image.</param>
            <param name="location">The location.</param>
            <param name="size">The size.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeChart.Charts">
            <summary>
            Gets the charts.
            </summary>
            <value>The charts.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeChart.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeChart.ChartColor">
            <summary>
            Gets or sets the color of the chart.
            </summary>
            <value>The color of the chart.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeChart.StrokeColor">
            <summary>
            Gets or sets the color of the stroke.
            </summary>
            <value>The color of the stroke.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeChart.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeChart.TitleFont">
            <summary>
            Gets or sets the title font.
            </summary>
            <value>The title font.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeChart.TitleColor">
            <summary>
            Gets or sets the color of the title.
            </summary>
            <value>The color of the title.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeChart.XAxis">
            <summary>
            Gets or sets the X axis.
            </summary>
            <value>The X axis.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.TimeRectangleF">
            <summary>
            A time vs data rectable
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeRectangleF.#ctor(System.TimeSpan,System.TimeSpan,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.TimeRectangleF"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeRectangleF.UpdateTime(System.TimeSpan,System.TimeSpan)">
            <summary>
            Updates the time.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeRectangleF.Start">
            <summary>
            Gets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeRectangleF.End">
            <summary>
            Gets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeRectangleF.Duration">
            <summary>
            Gets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeRectangleF.Bottom">
            <summary>
            Gets the bottom.
            </summary>
            <value>The bottom.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeRectangleF.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeRectangleF.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.TimeValue">
            <summary>
            A time vs Valu
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeValue.#ctor(System.TimeSpan,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.TimeValue"/> class.
            </summary>
            <param name="time">The time.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Charting.TimeValue.Time">
            <summary>
            Gets the time of this entry
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Charting.TimeValue.Value">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.TimeDataSource">
            <summary>
            Extracts the time field
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.TimeDataSource.#ctor(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Charting.TimeValue})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.TimeDataSource"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.TimeDataSource.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.ValueDataSource">
            <summary>
            Extracts the value field
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.ValueDataSource.#ctor(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Charting.TimeValue})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.ValueDataSource"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.ValueDataSource.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.VerticalSerie">
            <summary>
            A vertical line
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.VerticalSerie.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.VerticalSerie"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.VerticalSerie.HasDimension(Microsoft.ExtendedReflection.Charting.ChartDimension)">
            <summary>
            Determines whether the specified dimension has dimension.
            </summary>
            <param name="dimension">The dimension.</param>
            <returns>
            	<c>true</c> if the specified dimension has dimension; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.VerticalSerie.GetBoundingBox">
            <summary>
            Gets the bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.VerticalSerie.Paint(System.Drawing.Graphics,Microsoft.ExtendedReflection.Charting.World,Microsoft.ExtendedReflection.Charting.TimeAxis,Microsoft.ExtendedReflection.Charting.VerticalAxisBase)">
            <summary>
            Paints the specified g.
            </summary>
            <param name="g">The g.</param>
            <param name="world">The world.</param>
            <param name="xaxis">The xaxis.</param>
            <param name="yaxis">The yaxis.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.VerticalSerie.XData">
            <summary>
            Gets or sets the time.
            </summary>
            <value>The time.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Charting.World">
            <summary>
            The world
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.World.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Charting.World"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.World.Project(Microsoft.ExtendedReflection.Charting.TimeAxis,Microsoft.ExtendedReflection.Charting.VerticalAxisBase,System.TimeSpan,System.Single)">
            <summary>
            Projects the specified x.
            </summary>
            <param name="xaxis">The xaxis.</param>
            <param name="yaxis">The yaxis.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.World.Project(Microsoft.ExtendedReflection.Charting.TimeAxis,Microsoft.ExtendedReflection.Charting.VerticalAxisBase,System.TimeSpan[],System.Single[])">
            <summary>
            Projects the specified times.
            </summary>
            <param name="xaxis">The xaxis.</param>
            <param name="yaxis">The yaxis.</param>
            <param name="times">The times.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Charting.World.Project(Microsoft.ExtendedReflection.Charting.TimeAxis,Microsoft.ExtendedReflection.Charting.VerticalAxisBase,System.Collections.Generic.IEnumerable{System.TimeSpan},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Projects the specified times.
            </summary>
            <param name="xaxis">The xaxis.</param>
            <param name="yaxis">The yaxis.</param>
            <param name="times">The times.</param>
            <param name="ys">The ys.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.World.ScreenLocation">
            <summary>
            Gets or sets the screen port.
            </summary>
            <value>The screen port.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.World.ViewPort">
            <summary>
            Gets or sets the view port.
            </summary>
            <value>The view port.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Charting.World.WorldPort">
            <summary>
            Gets or sets the world port.
            </summary>
            <value>The world port.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.Bag">
            <summary>
            Helper methods for bags
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Bag.Empty``1">
            <summary>
            Gets an empty bag
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.Copyable">
            <summary>
            Helpers for the ICopyable interface
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Copyable.ToArray``1(Microsoft.ExtendedReflection.Collections.ICopyable{``0})">
            <summary>
            Copies the item to an array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.Enumerable">
            <summary>
            Enumerable helpers
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.Select``1(Microsoft.ExtendedReflection.Collections.ICountable{``0},System.Predicate{``0})">
            <summary>
            Selects values from values that match predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.ToArrayOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an enumerable to an array or null if the enumerable is null.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.TryGetLength``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>
            Tries to get the length of the underlying enumerable datastruture
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an enumerable to an array.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.ConvertAllOrEmptyToArray``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Converts all. If enumerable is null, returns null.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.ConvertAllToArray``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Converts all.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.ConvertAllToIndexable``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Converts all.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Trues for all.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.TrueForAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Trues for any.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies the delegate to all elements
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.EmptyOrEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates the specified enumerable.
            </summary>
            <param name="enumerable">The enumerable, or null.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.FindInstances``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Finds instances of T in the enumeration
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="enumeration">The enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.FindInstances``1(System.Collections.IEnumerable)">
            <summary>
            Finds instances of T in the enumeration
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.Cast``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Finds instances of T in the enumeration; FAILS in debug build when cast fails
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="enumeration">The enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.Cast``1(System.Collections.IEnumerable)">
            <summary>
            Finds instances of T in the enumeration; FAILS in debug build when cast fails
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.CastOrConvert``2(System.Collections.IEnumerable,System.Converter{``1,``0})">
            <summary>
            Tries to convert the instance if possible,
            finds instances of T in the enumeration; 
            FAILS in debug build when cast fails
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the first element of the enumeration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.TryFindAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)">
            <summary>
            Tries to find the first item that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <param name="predicate">The predicate.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element or default if the enumeration is empty or <code>null</code>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumeration"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the concatenated enumeration of left and right
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.As``1(System.Collections.IEnumerable)">
            <summary>
            Finds items that successfully cast to R
            </summary>
            <typeparam name="R"></typeparam>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.As``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Finds items that successfully cast to R
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Enumerable.SwallowException``1(System.Collections.Generic.IEnumerable{``0},Microsoft.ExtendedReflection.Utilities.Safe.SafeFunc{System.Exception,System.Boolean})">
            <summary>
            Enumerates a collection and move swallow exceptions
            thrown from the MoveNext() method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="swallower">returns true if the enumeration should swallow the exception and stop or let the exception bubble up</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.EqualityComparison`1">
            <summary>
            Returns true if left is equal to right
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.IMatrix`1">
            <summary>
            A 2-D matrix
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.IMatrix`1.Write(System.IO.TextWriter,Microsoft.ExtendedReflection.Utilities.Safe.SafeAction{System.IO.TextWriter,`0})">
            <summary>
            Pretty print the matrix to the writer
            </summary>
            <param name="writer">The writer.</param>
            <param name="itemWriter">The item writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.IMatrix`1.Column(System.Int32)">
            <summary>
            Gets the terms in column j
            </summary>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.IMatrix`1.Row(System.Int32)">
            <summary>
            Gets the terms in column j
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IMatrix`1.RowCount">
            <summary>
            Gets the row count
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IMatrix`1.ColumnCount">
            <summary>
            Gets the column count
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IMatrix`1.IsSquare">
            <summary>
            Gets a value if the matrix is squared
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IMatrix`1.Item(System.Int32)">
            <summary>
            Gets an indexer as a vector over the matrix
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IMatrix`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets the element at position (row, column)
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.IUndoable">
            <summary>
            A datatype with undo
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.IUndoable.Push">
            <summary>
            Creates a new context.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.IUndoable.Pop">
            <summary>
            Pops a context and undos all changes.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IUndoable.Depth">
            <summary>
            Gets the number of active contexts.
            </summary>
            <value>The depth.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.IEdge`1">
            <summary>
            A directed graph edge
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IEdge`1.Source">
            <summary>
            Gets the source vertex
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IEdge`1.Target">
            <summary>
            Gets the target vertex
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeEquatableEdge`1">
            <summary>
            An struct IEdge implementation
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableEdge`1.#ctor(`0,`0)">
            <summary>
            Initalizes a new instance of the edge
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableEdge`1.ToString">
            <summary>
            Gets a string representation of the edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableEdge`1.Equals(Microsoft.ExtendedReflection.Collections.SafeEquatableEdge{`0})">
            <summary>
            Gets a value indicating if edges are equal
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableEdge`1.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableEdge`1.Source">
            <summary>
            Gets the source
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableEdge`1.Target">
            <summary>
            Gets the target
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeEdge`1">
            <summary>
            An IEdge implementation
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEdge`1.#ctor(`0,`0)">
            <summary>
            Initalizes a new instance of the edge
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEdge`1.ToString">
            <summary>
            Gets a string representation of the edge
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEdge`1.Source">
            <summary>
            Gets the source
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEdge`1.Target">
            <summary>
            Gets the target
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2">
            <summary>
            A directed graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2"/> class.
            </summary>
            <param name="vertexCapacity">The vertex capacity.</param>
            <param name="diameter">The diameter.</param>
            <param name="vertexComparer">The vertex comparer.</param>
            <param name="edgeComparer">The edge comparer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2.ContainsVertex(`0)">
            <summary>
            Gets a value indicating if the graph contains a particular vertex
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2.OutEdges(`0)">
            <summary>
            Gets the out edge of a vertex
            </summary>
            <param name="vertex">The vertex.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2.OutEdgeCount(`0)">
            <summary>
            Gets the number of out edges from a vertex
            </summary>
            <param name="vertex">The vertex.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2.AddVertex(`0)">
            <summary>
            Adds the vertex.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2.AddVertexRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the vertex range.
            </summary>
            <param name="vertices">The vertices.</param>
            <returns>number of vertices added</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2.AddEdge(`1)">
            <summary>
            Adds the edge.
            </summary>
            <param name="edge">The edge.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2.AddEdgeRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds the edges.
            </summary>
            <param name="edges">The edges.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2.Vertices">
            <summary>
            Gets the vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2.VertexCount">
            <summary>
            Gets the vertex count.
            </summary>
            <value>The vertex count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2.Edges">
            <summary>
            Gets the edges.
            </summary>
            <value>The edges.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeDirectedGraph`2.EdgeCount">
            <summary>
            Gets the edge count.
            </summary>
            <value>The edge count.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1">
            <summary>
            A safe replacement for dictionary.
            </summary>
            <remarks>
            Safe here means that this class will not be instrumented.
            This implementation is deterministic, i.e. the hashcode of values does not affect the order in which elements are returned by the enumerator.
            </remarks>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.GetOrCreateValue``1(System.Int32,``0,Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary{`0}.ValueCreator{``0})">
            <summary>
            Gets or creates the value.
            </summary>
            <remarks>
            The purpose of the context argument is to enable statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="key">The key.</param>
            <param name="context">The context.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.SynchronizedGetOrCreateValue``1(System.Int32,``0,Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary{`0}.ValueCreator{``0})">
            <summary>
            Gets or creates the value.
            </summary>
            <remarks>
            The purpose of the context argument is to enable statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="key">The key.</param>
            <param name="context">The context.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.GetOrCreateValue(System.Int32,Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary{`0}.ValueCreator)">
            <summary>
            Gets or creates the value.
            </summary>
            <param name="key">The key.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
            <remarks>
            This method should be used with statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.SynchronizedGetOrCreateValue(System.Int32,Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary{`0}.ValueCreator)">
            <summary>
            Gets or creates the value.
            </summary>
            <param name="key">The key.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
            <remarks>
            This method should be used with statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.Add(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.AddRange(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int32,`0}})">
            <summary>
            Adds the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.AddRange(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int32,`0}[])">
            <summary>
            Adds the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.OverrideRange(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int32,`0}})">
            <summary>
            Overrides the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.OverrideRange(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int32,`0}[])">
            <summary>
            Overrides the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ClearAndTrim">
            <summary>
            Removes all elements, and trims the size of the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ChooseKey(System.Random)">
            <summary>
            Chooses (deterministically) some key of the dictionary
            </summary>
            <param name="random">random value generator, or <code>null</code> to return elements in (roughly) insertion order</param>
            <remarks>
            The set must be non-empty.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ContainsKey(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ContainsValue(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.CopyTo(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int32,`0}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.Remove(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.TryGetValue(System.Int32,`0@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ValueCreator`1">
            <summary>
            Value creator delegate.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ValueCreator">
            <summary>
            Value creator delegate.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.KeyCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.KeyCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary{`0})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.KeyCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.KeyCollection.CopyTo(System.Int32[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.KeyCollection.Contains(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.KeyCollection.Microsoft#ExtendedReflection#Collections#ISet{System#Int32}#Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.KeyCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.KeyCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.KeyCollection.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.KeyCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.KeyCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ValueCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ValueCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary{`0})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ValueCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ValueCollection.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ValueCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ValueCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ValueCollection.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ValueCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32WeakValueDictionary`1.ValueCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1">
            <summary>
            A safe replacement for dictionary.
            </summary>
            <remarks>
            Safe here means that this class will not be instrumented.
            This implementation is deterministic, i.e. the hashcode of values does not affect the order in which elements are returned by the enumerator.
            </remarks>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.GetOrCreateValue``1(System.Int64,``0,Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary{`0}.ValueCreator{``0})">
            <summary>
            Gets or creates value.
            </summary>
            <remarks>
            The purpose of the context argument is to enable statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="key">The key.</param>
            <param name="context">The context.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.SynchronizedGetOrCreateValue``1(System.Int64,``0,Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary{`0}.ValueCreator{``0})">
            <summary>
            Gets or creates value.
            </summary>
            <remarks>
            The purpose of the context argument is to enable statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="key">The key.</param>
            <param name="context">The context.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.GetOrCreateValue(System.Int64,Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary{`0}.ValueCreator)">
            <summary>
            Gets or creates the value.
            </summary>
            <param name="key">The key.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
            <remarks>
            This method should be used with statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.SynchronizedGetOrCreateValue(System.Int64,Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary{`0}.ValueCreator)">
            <summary>
            Gets or creates the value.
            </summary>
            <param name="key">The key.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
            <remarks>
            This method should be used with statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.Add(System.Int64,`0)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.AddRange(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int64,`0}})">
            <summary>
            Adds the range.
            </summary>
            <param name="entries">The entries.</param>i
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.AddRange(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int64,`0}[])">
            <summary>
            Adds the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.OverrideRange(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int64,`0}})">
            <summary>
            Overrides the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.OverrideRange(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int64,`0}[])">
            <summary>
            Overrides the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ClearAndTrim">
            <summary>
            Removes all elements, and trims the size of the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ContainsKey(System.Int64)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ContainsValue(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.CopyTo(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int64,`0}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ChangeValues(System.Converter{`0,`0})">
            <summary>
            Changes all values.
            </summary>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ConvertValues``1(System.Converter{`0,``0})">
            <summary>
            Converts this dictionary, given a converter for values.
            </summary>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.Remove(System.Int64)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.TryGetValue(System.Int64,`0@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.Item(System.Int64)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ValueCreator`1">
            <summary>
            Value creator delegate.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ValueCreator">
            <summary>
            Value creator delegate.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.KeyCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.KeyCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary{`0})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.KeyCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.KeyCollection.CopyTo(System.Int64[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.KeyCollection.Contains(System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.KeyCollection.Microsoft#ExtendedReflection#Collections#ISet{System#Int64}#Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.KeyCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.KeyCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.KeyCollection.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.KeyCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.KeyCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ValueCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ValueCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary{`0})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ValueCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ValueCollection.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ValueCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ValueCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ValueCollection.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ValueCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt64Dictionary`1.ValueCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3">
            <summary>
            A safe replacement for dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TContext">The type of the context.</typeparam>
            <remarks>
            The keys and values in this dictionary have a close relationship:
            keys can create values, and values can name their keys;
            this allows for a smaller memory footprint.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.#ctor(Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary{`0,`1,`2}.ValueCreator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3"/> class.
            </summary>
            <param name="valueCreator">The value creator.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.#ctor(Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary{`0,`1,`2}.ValueCreator,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3"/> class.
            </summary>
            <param name="valueCreator">The value creator.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.#ctor(Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary{`0,`1,`2}.ValueCreator,System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3"/> class.
            </summary>
            <param name="valueCreator">The value creator.</param>
            <param name="comparer">The comparer.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.ClearAndTrim">
            <summary>
            Removes all elements, and trims the size of the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.ContainsKey(`0)">
            <summary>
            Determines whether this dictionary contains the key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.CopyTo(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.GetOrCreateValue(`0,`2)">
            <summary>
            Adds the key, returns associated value.
            </summary>
            <param name="key">The key.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.SynchronizedGetOrCreateValue(`0,`2)">
            <summary>
            Adds the key, returns associated value.
            </summary>
            <param name="key">The key.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>whether the key was contained before</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.TryGetValue(`0,`1@)">
            <summary>
            Return value of key, if key was added previously.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.GetValueOrNull(`0)">
            <summary>
            Gets the value or null.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.Count">
            <summary>
            Gets the number of elements in this dictionary.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.Item(`0)">
            <summary>
            Gets the value with the specified key; fails if the value has not been created already.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.ValueCreator">
            <summary>
            Value creator delegate
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.KeyCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.KeyCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary{`0,`1,`2})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.KeyCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.KeyCollection.Contains(`0)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.KeyCollection.Microsoft#ExtendedReflection#Collections#ISet{TKey}#Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.KeyCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.KeyCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.KeyCollection.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.KeyCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.KeyCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.ValueCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.ValueCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary{`0,`1,`2})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.ValueCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.ValueCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.ValueCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.ValueCollection.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.ValueCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInternalizingDictionary`3.ValueCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32Set">
            <summary>
            A safe replacement for dictionary.
            </summary>
            <remarks>
            Safe here means that this class will not be instrumented.
            This implementation is deterministic, i.e. the hashcode of values does not affect the order in which elements are returned by the enumerator.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            
            </summary>
            <param name="initialElements"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.Contains(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.AddRange(System.Int32[])">
            <summary>
            Adds the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.RemoveRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.RemoveRange(System.Int32[])">
            <summary>
            Removes the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.ClearAndTrim">
            <summary>
            Removes all elements, and trims the size of the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.Add(System.Int32)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="key">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.Remove(System.Int32)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="key">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.Intersect(Microsoft.ExtendedReflection.Collections.SafeInt32Set)">
            <summary>
            Calculates the intersection of this set and the given set
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.ContainsAll(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets a value indicating if all values of <paramref name="values"/>
            are in the current set.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.Choose(System.Random)">
            <summary>
            Chooses (deterministically) some element of the set
            </summary>
            <param name="random">random value generator, or <code>null</code> to return elements in (roughly) insertion order</param>
            <remarks>
            The set must be non-empty.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.GetPermutation(System.Random)">
            <summary>
            Lazily enumerates all elements of the set, starting from a (deterministically) chosen element
            </summary>
            <param name="random">random value generator, or <code>null</code> to return elements in (roughly) insertion order</param>
            <remarks>
            The set must be non-empty.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.ToArray">
            <summary>
            Turns the elements into an array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.ToIndexable">
            <summary>
            Turns the elements into an indexable collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.ToSet">
            <summary>
            Converts to a set
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32Set.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeInt32Set.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeInt32Set.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeInt32Set.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3">
            <summary>
            A safe replacement for dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TContext">The type of the context.</typeparam>
            <remarks>
            The keys and values in this dictionary have a close relationship:
            keys can create values, and values can name their keys;
            this allows for a smaller memory footprint.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.#ctor(Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary{`0,`1,`2}.ValueCreator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3"/> class.
            </summary>
            <param name="valueCreator">The value creator.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.#ctor(Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary{`0,`1,`2}.ValueCreator,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3"/> class.
            </summary>
            <param name="valueCreator">The value creator.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.#ctor(Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary{`0,`1,`2}.ValueCreator,System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3"/> class.
            </summary>
            <param name="valueCreator">The value creator.</param>
            <param name="comparer">The comparer.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.ClearAndTrim">
            <summary>
            Removes all elements, and trims the size of the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.ContainsKey(`0)">
            <summary>
            Determines whether this dictionary contains the key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.CopyTo(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.GetOrCreateValue(`0,`2)">
            <summary>
            Adds the key, returns associated value.
            </summary>
            <param name="key">The key.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.SynchronizedGetOrCreateValue(`0,`2)">
            <summary>
            Adds the key, returns associated value.
            </summary>
            <param name="key">The key.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>whether the key was contained before</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.TryGetValue(`0,`1@)">
            <summary>
            Return value of key, if key was added previously.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.GetValueOrNull(`0)">
            <summary>
            Gets the value or null.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.Count">
            <summary>
            Gets the number of elements in this dictionary.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.Item(`0)">
            <summary>
            Gets the value with the specified key; fails if the value has not been created already.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.ValueCreator">
            <summary>
            Value creator delegate
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.KeyCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.KeyCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary{`0,`1,`2})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.KeyCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.KeyCollection.Contains(`0)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.KeyCollection.Microsoft#ExtendedReflection#Collections#ISet{TKey}#Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.KeyCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.KeyCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.KeyCollection.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.KeyCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.KeyCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.ValueCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.ValueCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary{`0,`1,`2})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.ValueCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.ValueCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.ValueCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.ValueCollection.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.ValueCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLargeInternalizingDictionary`3.ValueCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1">
            <summary>
            A safe linked list.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.AddFirst(Microsoft.ExtendedReflection.Collections.SafeLinkedList{`0}.Node)">
            <summary>
            Adds a node at the beginning.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.AddAfter(Microsoft.ExtendedReflection.Collections.SafeLinkedList{`0}.Node,Microsoft.ExtendedReflection.Collections.SafeLinkedList{`0}.Node)">
            <summary>
            Adds a node after another node.
            </summary>
            <param name="node">The node.</param>
            <param name="newNode">The new node.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.AddBefore(Microsoft.ExtendedReflection.Collections.SafeLinkedList{`0}.Node,Microsoft.ExtendedReflection.Collections.SafeLinkedList{`0}.Node)">
            <summary>
            Adds a node before another node.
            </summary>
            <param name="node">The node.</param>
            <param name="newNode">The new node.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.AddLast(Microsoft.ExtendedReflection.Collections.SafeLinkedList{`0}.Node)">
            <summary>
            Adds a node at the end.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Remove(Microsoft.ExtendedReflection.Collections.SafeLinkedList{`0}.Node)">
            <summary>
            Removes the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.RemoveFirst">
            <summary>
            Removes the first node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.RemoveLast">
            <summary>
            Removes the last node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.ToArray">
            <summary>
            Copies the linked list to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.ToIndexable">
            <summary>
            Copies the linked list into an indexable list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.First">
            <summary>
            Gets the first node, if any.
            </summary>
            <value>The first.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Last">
            <summary>
            Gets the last node, if any.
            </summary>
            <value>The last.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Node">
            <summary>
            A node of a linked list.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Node.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Node"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Node.List">
            <summary>
            Gets the list, if any.
            </summary>
            <value>The list.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Node.Next">
            <summary>
            Gets the next node, if any.
            </summary>
            <value>The next.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Node.Prev">
            <summary>
            Gets the previous node, if any.
            </summary>
            <value>The prev.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Node.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Enumerator">
            <summary>
            Enumerator
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeLinkedList`1.Enumerator.CurrentNode">
            <summary>
            Gets the node in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The node in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeMatrix`1">
            <summary>
            A simple 2-D matrix
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeMatrix`1"/> class.
            </summary>
            <param name="rowCount">The row count.</param>
            <param name="columnCount">The column count.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.#ctor(System.Int32,System.Int32,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeMatrix`1"/> class.
            </summary>
            <param name="rowCount">The row count.</param>
            <param name="columnCount">The column count.</param>
            <param name="items">The items (will be cloned).</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.#ctor(System.Int32,System.Int32,`0[][])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeMatrix`1"/> class.
            </summary>
            <param name="rowCount">The row count.</param>
            <param name="columnCount">The column count.</param>
            <param name="items">The items (will be cloned).</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.Column(System.Int32)">
            <summary>
            Gets the terms in column j
            </summary>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.Row(System.Int32)">
            <summary>
            Gets the terms in column j
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.GetData">
            <summary>
            Accesses the underlying array for fast access. Elements should be accessed
            using [i,j] -> i * ColumnCount + j
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.Write(System.IO.TextWriter,Microsoft.ExtendedReflection.Utilities.Safe.SafeAction{System.IO.TextWriter,`0})">
            <summary>
            Writes the content to the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="itemWriter">The item writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.RowCount">
            <summary>
            Gets the row count.
            </summary>
            <value>The row count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
            <value>The column count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.IsSquare">
            <summary>
            Gets a value if the matrix is squared
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.Item(System.Int32)">
            <summary>
            Gets the item at index i
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeMatrix`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the item
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2">
            <summary>
            An undoable dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeUndoableBase">
            <summary>
            Undoable base class that keeps track of the count
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeUndoableBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableBase.Push">
            <summary>
            Creates a new context.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableBase.Pop">
            <summary>
            Pops a context and undos all changes.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableBase.Depth">
            <summary>
            Gets the number of active contexts.
            </summary>
            <value>The depth.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.#ctor(Microsoft.ExtendedReflection.Collections.SafeDictionary{`0,`1})">
            <summary>
            This constructor takes ownership of the given dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether this dictionary contains the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.CopyTo(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.Push">
            <summary>
            Creates a new context.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.Pop">
            <summary>
            Pops a context and undos all changes.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.Comparer">
            <summary>
            Gets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableDictionary`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1">
            <summary>
            An undoable dictionary.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.#ctor(Microsoft.ExtendedReflection.Collections.SafeInt32Dictionary{`0})">
            <summary>
            This constructor takes ownership of the given dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.Add(System.Int32,`0)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.Remove(System.Int32)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.ContainsKey(System.Int32)">
            <summary>
            Determines whether this dictionary contains the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.TryGetValue(System.Int32,`0@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.CopyTo(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int32,`0}[],System.Int32)">
            <summary>
            Copies to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.Push">
            <summary>
            Creates a new context.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.Pop">
            <summary>
            Pops a context and undos all changes.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.Item(System.Int32)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.Microsoft#ExtendedReflection#Collections#IMap{System#Int32@TValue}#Comparer">
            <summary>
            Gets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableIntDictionary`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeUndoableLazyValue`1">
            <summary>
            An undoable value that is initialized once (unless that context is undo)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableLazyValue`1.#ctor(Microsoft.ExtendedReflection.Utilities.Factory{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeUndoableLazyValue`1"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableLazyValue`1.Push">
            <summary>
            Creates a new context.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableLazyValue`1.Pop">
            <summary>
            Pops a context and undos all changes.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableLazyValue`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeUndoableList`1">
            <summary>
            An undoable set.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeUndoableList`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableList`1.#ctor(Microsoft.ExtendedReflection.Collections.SafeList{`0})">
            <summary>
            This constructor takes ownership of the given set.
            </summary>
            <param name="set">The set.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableList`1.Add(`0)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableList`1.Push">
            <summary>
            Creates a new context.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableList`1.Pop">
            <summary>
            Pops a context and undos all changes.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableList`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the given index.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1">
            <summary>
            An undoable set.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1.#ctor(Microsoft.ExtendedReflection.Collections.SafeSet{`0})">
            <summary>
            This constructor takes ownership of the given set.
            </summary>
            <param name="set">The set.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1.Add(`0)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1.Contains(`0)">
            <summary>
            Checks whether the key is contained.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1.ToIndexable">
            <summary>
            Gets to indexable.
            </summary>
            <value>To indexable.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1.ToArray">
            <summary>
            Gets to array.
            </summary>
            <value>To array.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1.Push">
            <summary>
            Creates a new context.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1.Pop">
            <summary>
            Pops a context and undos all changes.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1.Comparer">
            <summary>
            Gets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableSet`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2">
            <summary>
            A safe implementation of a dictionary where the keys are (implicitly weak) references
            </summary>
            <remarks>
            Safe means that the code is not instrumented.
            This implementation is deterministic, i.e. the hashcode of values does not affect the order in which elements are returned by the enumerator.
            </remarks>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}})">
            <summary>
            
            </summary>
            <param name="initialElements"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="initialElements">The initial elements.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="capacity"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.Clear">
            <summary>
            Removes all elements.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry to the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to look up a value given its key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.AmortizedGC">
            <summary>
            Method that can be called occasionally to reallocate internal data structures to account for garbage collected entries
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.GC">
            <summary>
            GCs this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.Remove(`0)">
            <summary>
            Removes the element <code>t</code> from the set;
            if the element is in the set, it returns <code>true</code>, otherwise <code>false</code>.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.ContainsKey(`0)">
            <summary>
            Tests whether <code>t</code> is an element of the set
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.AddRange(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}})">
            <summary>
            Adds a range of elements
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.Count">
            <summary>
            An (upper bound) estimation of the number of elements in this set.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.Item(`0)">
            <summary>
            Indexer
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeWeakKeyDictionary`2.Values">
            <summary>
            Gets all values
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1">
            <summary>
            A safe implementation of a set of (implicitly weak) references
            </summary>
            <remarks>
            Safe means that the code is not instrumented.
            This implementation is deterministic, i.e. the hashcode of values does not affect the order in which elements are returned by the enumerator.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="initialElements"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeSet`1"/> class.
            </summary>
            <param name="initialElements">The initial elements.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="capacity"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.Clear">
            <summary>
            Removes all elements.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.Internalize(`0)">
            <summary>
            Adds the element if necessary and returns the element stored
            in the set
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.Add(`0)">
            <summary>
            Adds the element <code>t</code> to the set.
            If the element is already in the set, it returns false otherwise true.
            </summary>
            <param name="key">element to add</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.AmortizedGC">
            <summary>
            Method that can be called occasionally to reallocate internal data structures to account for garbage collected entries
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.GC">
            <summary>
            GCs this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.Remove(`0)">
            <summary>
            Removes the element <code>t</code> from the set;
            if the element is in the set, it returns <code>true</code>, otherwise <code>false</code>.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.Contains(`0)">
            <summary>
            Tests whether <code>t</code> is an element of the set
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.Intersect(Microsoft.ExtendedReflection.Collections.SafeSet{`0})">
            <summary>
            Calculates the intersection of this set and the given set
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of elements
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes a range of elements
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.ToArray">
            <summary>
            Turns the elements into an array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.ToIndexable">
            <summary>
            returns a new Object array containing the contents 
            of the List. Wrapped as a safe enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to on array. The resulting array may contain null objects for objects that have been garbage collected recently.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.GetEnumerator">
            <summary>
            Creates an enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.Count">
            <summary>
            An (upper bound) estimation of the number of elements in this set.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeWeakSet`1.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.Set">
            <summary>
            Set helpers
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Set.Empty``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an empty set.
            </summary>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Set.Empty``1">
            <summary>
            Returns an empty set.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Set.EmptyOrSet``1(Microsoft.ExtendedReflection.Collections.IFiniteSet{``0})">
            <summary>
            Gets the set if not null, otherwise empty set
            </summary>
            <typeparam name="T"></typeparam>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Set.One``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
            <summary>
            Creates a set with one element.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="first">The first.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Set.Two``1(System.Collections.Generic.IEqualityComparer{``0},``0,``0)">
            <summary>
            Creates a set with two elements.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Set.Enumerable``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Turns an enumerable into a set.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.Undoable">
            <summary>
            Undoable helpers
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Undoable.Popper(System.Action{System.Int32})">
            <summary>
            Returns an undoable that executes the specified action on each Pop.
            </summary>
            <param name="popAction">The pop action.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Undoable.Enumerable(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.IUndoable})">
            <summary>
            Returns a unified undoable.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Undoable.Array(Microsoft.ExtendedReflection.Collections.IUndoable[])">
            <summary>
            Creates an undoable from an array of undoables.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeUndoableValue`1">
            <summary>
            An undoable value
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableValue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeUndoableValue`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeUndoableValue`1"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableValue`1.Push">
            <summary>
            Creates a new context.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeUndoableValue`1.Pop">
            <summary>
            Pops a context and undos all changes.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeUndoableValue`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.AssemblyEngineOptions">
            <summary>
            Abstract base class for option commands that have an assembly
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.EngineOptions">
            <summary>
            Abstract base class for <see cref="T:Microsoft.ExtendedReflection.ComponentModel.IEngineOptions"/> implementations
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IEngineOptions">
            <summary>
            Default engine options
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IEngineOptions.GetAssemblyResolutionDirectories">
            <summary>
            Gets additional assembly resolution directories
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IEngineOptions.Diagnostic">
            <summary>
            Gets a value indicating if the engine is in diagnostic mode
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IEngineOptions.Verbosity">
            <summary>
            Gets the logger verbosity
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IEngineOptions.SourceControl">
            <summary>
            Gets the source control name
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IEngineOptions.SymbolPath">
            <summary>
            Gets the symbol path
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IEngineOptions.SourcePath">
            <summary>
            Gets the source path
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IEngineOptions.ClrVersion">
            <summary>
            Gets the target CLR version
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IEngineOptions.SilverlightVersion">
            <summary>
            Gets the target Silverlight version if any
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IEngineOptions.MsBuildPath">
            <summary>
            Path to the MSBuild command line tool
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.AssemblyResolutionDirectoriesShortName">
            <summary>
            Gets the short name for command line optins
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.#ctor">
            <summary>
            Initialixes a new instance  of options
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.WrongClr">
            <summary>
            Gets a value indicating if the .NET version of the current process is invalid with respect to the options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.WrongBitness">
            <summary>
            Gets a value indicating if the bitness of the current process is invalid with respect to the options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.AddResolutionDirectories(Microsoft.ExtendedReflection.Utilities.AssemblyResolver)">
            <summary>
            Add resolution directories
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.GetAssemblyResolutionDirectories">
            <summary>
            Tries to get the assembly resolution directory if any
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.AddAssemblyResolutionDirectory(System.String)">
            <summary>
            Adds a resolution directory
            </summary>
            <param name="directory"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.Diagnostic">
            <summary>
            Gets a value indicating if the engine is in diagnostic mode
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.Verbosity">
            <summary>
            Log verbosity
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.SourceControl">
            <summary>
            Gets or sets the source control.
            </summary>
            <value>The source control.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.SymbolPath">
            <summary>
            Gets or sets the symbol path.
            </summary>
            <value>The symbol path.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.SourcePath">
            <summary>
            Gets or sets the source path.
            </summary>
            <value>The source path.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.ProfilerInteraction">
            <summary>
            Gets or sets the default interaction options
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.DoNotCacheEvents">
            <summary>
            Gets or sets the events caching flag
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.ClrVersion">
            <summary>
            Gets or sets the target .NET version
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.ClrVersion2">
            <summary>
            Gets or sets the target .NET version to 2.0
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.ClrVersion4">
            <summary>
            Gets or sets the target .NET version to 4.0
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.SilverlightVersion">
            <summary>
            Gets or sets the Silverlight version for which Pex should try to resolve assemblies.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.TargetX86">
            <summary>
            Gets or sets a value to force the process as 32-bit.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.X64FailSilently">
            <summary>
            Gets or sets a value indicating if the x64 process should be restarted in x86 mode
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.MsBuildPath">
            <summary>
            Gets or sets the path to the msbuild executable
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineOptions.AssemblyResolutionDirectories">
            <summary>
            Additional search categories
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IAssemblyEngineOptions">
            <summary>
            Default engine options
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IAssemblyEngineOptions.TryLoadAssembly(Microsoft.ExtendedReflection.Utilities.AssemblyResolver,Microsoft.ExtendedReflection.Metadata.AssemblyEx@)">
            <summary>
            Tries to load the assembly
            </summary>
            <param name="resolver"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IAssemblyEngineOptions.TryReflectionOnlyLoadAssembly(Microsoft.ExtendedReflection.Utilities.AssemblyResolver,Microsoft.ExtendedReflection.Metadata.AssemblyEx@)">
            <summary>
            Tries to load the assembly in the ReflectionOnly context.
            </summary>
            <param name="resolver"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IAssemblyEngineOptions.Assembly">
            <summary>
            Gets the assembly name or path
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.AssemblyEngineOptions.TryLoadAssembly(Microsoft.ExtendedReflection.Utilities.AssemblyResolver,Microsoft.ExtendedReflection.Metadata.AssemblyEx@)">
            <summary>
            Tries to load an assembly.
            </summary>
            <param name="resolver"></param>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.AssemblyEngineOptions.TryReflectionOnlyLoadAssembly(Microsoft.ExtendedReflection.Utilities.AssemblyResolver,Microsoft.ExtendedReflection.Metadata.AssemblyEx@)">
            <summary>
            Tries to load an assembly for reflection only.
            </summary>
            <param name="resolver"></param>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.AssemblyEngineOptions.OverrideEnvironmentVariables(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Overrides the environment variables with the content of <see cref="P:Microsoft.ExtendedReflection.ComponentModel.AssemblyEngineOptions.EnvironmentVariables"/>
            </summary>
            <param name="startInfo">The start info.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.AssemblyEngineOptions.Assembly">
            <summary>
            Gets the assembly path
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.AssemblyEngineOptions.BreakOnStart">
            <summary>
            Break to the debugger before starting execution
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.AssemblyEngineOptions.BreakOnError">
            <summary>
            Breaks on error
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.AssemblyEngineOptions.BreakOnAssert">
            <summary>
            Breaks on error
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.AssemblyEngineOptions.EnvironmentVariables">
            <summary>
            A semicolon separated list of environment variables
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.ICacheManager">
            <summary>
            Controls components with caches
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ICacheManager.ClearCaches">
            <summary>
            Clears the caches.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.CacheManager.ClearCaches">
            <summary>
            Clears the caches.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.ComponentElementBase">
            <summary>
            Base class for component elements
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IComponentElement">
            <summary>
            An element of a component
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentElement.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ComponentElementBase.#ctor(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.ComponentElementBase"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentElementBase.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.ComponentServices">
            <summary>
            Implementation of <see cref="T:Microsoft.ExtendedReflection.ComponentModel.IComponentServices"/>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.ComponentServicesBase">
            <summary>
            Base class for component services
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ComponentServicesBase.#ctor(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.ComponentServicesBase"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ComponentServicesBase.GetService``1">
            <summary>
            Gets the service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ComponentServicesBase.GetOptionalService``1">
            <summary>
            Gets the optional service.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IComponentServices">
            <summary>
            Gets common services available to all components.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.TryGetWorkItemManager(Microsoft.ExtendedReflection.Feedback.IWorkItemManager@)">
            <summary>
            Tries to get the optional service workItem manager.
            </summary>
            <param name="workItemManager"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.Options">
            <summary>
            Gets the default engine options
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.SymbolManager">
            <summary>
            Gets the optional symbol manager.
            </summary>
            <value>The symbol manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.CancelManager">
            <summary>
            Gets the global cancel manager.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.CacheManager">
            <summary>
            Gets the cache manager
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.AssemblyResolver">
            <summary>
            Gets the assembly resolver.
            </summary>
            <value>The assembly resolver.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.TypeLoader">
            <summary>
            Gets the type loader.
            </summary>
            <value>The type loader.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.XmlDocumentationSource">
            <summary>
            Gets the XML documentation source.
            </summary>
            <value>The XML documentation source.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.ExceptionSpecs">
            <summary>
            Gets the exception specs.
            </summary>
            <value>The exception specs.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.SourceManager">
            <summary>
            Gets the source manager.
            </summary>
            <value>The source manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.SourceCoverageManager">
            <summary>
            Gets the optional source coverage manager
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.LanguageManager">
            <summary>
            Gets the language manager
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.FeedbackManager">
            <summary>
            Gets the feedback manager.
            </summary>
            <value>The feedback manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.SourceControlManager">
            <summary>
            Gets the source control manager.
            </summary>
            <value>The source control manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.DynamicCodeManager">
            <summary>
            Gets the dynamic code manager
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IComponentServices.InstrumentationManager">
            <summary>
            Gets the instrumentation manager
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.#ctor(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.ComponentServices"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.TryGetWorkItemManager(Microsoft.ExtendedReflection.Feedback.IWorkItemManager@)">
            <summary>
            Tries to get the workitem manager service if present
            </summary>
            <param name="workItemManager"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.Options">
            <summary>
            Gets the default engine options
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.SymbolManager">
            <summary>
            Gets the optional symbol manager.
            </summary>
            <value>The symbol manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.SourceManager">
            <summary>
            Gets the optional source manager.
            </summary>
            <value>The source manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.SourceCoverageManager">
            <summary>
            Gets the optional source coverage manager.
            </summary>
            <value>The source coverage manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.CancelManager">
            <summary>
            Gets the global cancel manager.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.CacheManager">
            <summary>
            Gets the cache manager.
            </summary>
            <value>The cache manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.AssemblyResolver">
            <summary>
            Gets the assembly resolver.
            </summary>
            <value>The assembly resolver.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.TypeLoader">
            <summary>
            Gets the type loader.
            </summary>
            <value>The type loader.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.ExceptionSpecs">
            <summary>
            Gets the exception specs.
            </summary>
            <value>The exception specs.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.XmlDocumentationSource">
            <summary>
            Gets the XML documentation source.
            </summary>
            <value>The XML documentation source.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.LanguageManager">
            <summary>
            Gets the language manager
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.FeedbackManager">
            <summary>
            Gets the feedback manager.
            </summary>
            <value>The feedback manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.SourceControlManager">
            <summary>
            Gets the source control manager.
            </summary>
            <value>The source control manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.DynamicCodeManager">
            <summary>
            Gets the dynamic code manager
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ComponentServices.InstrumentationManager">
            <summary>
            Gets the instrumentation manager
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.Engine">
            <summary>
            Engine that has all basic services.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.EngineBase">
            <summary>
            An abstract base class of <see cref="T:Microsoft.ExtendedReflection.ComponentModel.IEngine"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IEngine">
            <summary>
            An engine wraps around a container.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IContainer">
            <summary>
            Container of components
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IContainer.AddComponent(System.String,Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Adds the specified component.
            </summary>
            <param name="component">The component.</param>
            <param name="name">The unique, case-insensitive name to assign to the component.-or- null that leaves the component unnamed.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IContainer.DescribeInstalledComponents">
            <summary>
            Describes the installed components.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IContainer.Components">
            <summary>
            Gets all the components.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IServiceProvider">
            <summary>
            Service provider
            </summary>
            <remark>
            The service provider implement an initialization protocol as follows:
            During the initialization phase, only certain services may be queried early (<see cref="M:Microsoft.ExtendedReflection.ComponentModel.IServiceProvider.CanQueryServiceEarly(Microsoft.ExtendedReflection.Metadata.TypeEx)"/>).
            Once a non-early service is queried with <see cref="M:Microsoft.ExtendedReflection.ComponentModel.IServiceProvider.TryGetService(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.ComponentModel.IService@)"/>, the service provider leaves the initialization phase.
            <see cref="M:Microsoft.ExtendedReflection.ComponentModel.IServiceProvider.HasService(Microsoft.ExtendedReflection.Metadata.TypeEx)"/> does not trigger the end of an initialization phase.
            </remark>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IServiceProvider.CanQueryServiceEarly(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether a service type can be queried while new services are still being added.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IServiceProvider.HasService(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Checks whether a service type is available.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IServiceProvider.TryGetService(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.ComponentModel.IService@)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <param name="serviceObject">The service object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IServiceProvider.DescribeAvailableServices">
            <summary>
            Describes the available services.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IEngine.GetService``1">
            <summary>
            Gets the service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.IEngine.GetOptionalService``1">
            <summary>
            Gets an optional service.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IEngine.Log">
            <summary>
            Gets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineBase.#ctor(Microsoft.ExtendedReflection.ComponentModel.IContainer,Microsoft.ExtendedReflection.ComponentModel.IComponent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.EngineBase"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="initialComponents">The initial components.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineBase.GetService``1">
            <summary>
            Gets the service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineBase.GetOptionalService``1">
            <summary>
            Gets an optional service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineBase.AddComponent(System.String,Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Adds the specified component.
            </summary>
            <param name="name">The unique, case-insensitive name to assign to the component.-or- null that leaves the component unnamed.</param>
            <param name="component">The component.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineBase.DescribeInstalledComponents">
            <summary>
            Describes the installed components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineBase.HasService(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether a specified service is avaialble.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineBase.CanQueryServiceEarly(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether a service type can be queried while new services are still being added.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineBase.TryGetService``1(``0@)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceObject">The service object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineBase.TryGetService(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.ComponentModel.IService@)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <param name="serviceObject">The service object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineBase.DescribeAvailableServices">
            <summary>
            Describes the available services.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.EngineBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineBase.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineBase.Components">
            <summary>
            Gets all the components.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.EngineBase.Log">
            <summary>
            Gets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.#ctor(Microsoft.ExtendedReflection.ComponentModel.IContainer,Microsoft.ExtendedReflection.ComponentModel.IComponent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.Engine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddComponents">
            <summary>
            Adds the components.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddInstrumentationManager">
            <summary>
            Adds the instrumentation manager service
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddCacheManager">
            <summary>
            Adds the cache manager.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddSourceCoverageManager">
            <summary>
            Adds the source coverage manager.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddLog">
            <summary>
            Adds the log.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddExceptionMethodBehaviorComponents">
            <summary>
            Adds the exception method behavior components.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddCancelManager">
            <summary>
            Adds the cancel manager.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddSourcePathResolver">
            <summary>
            Adds the source path resolver.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddSymbolManager">
            <summary>
            Adds the symbol manager.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddSymbolManagerOptions">
            <summary>
            Adds the symbol manager options
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddLanguageManager">
            <summary>
            Adds the language manager
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddLanguageOptions">
            <summary>
            Adds the language options
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddFeedbackManager">
            <summary>
            Adds the feedback manager.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddSourceControlManager">
            <summary>
            Adds the source control manager.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddSourceManager">
            <summary>
            Adds the source manager.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Engine.AddDynamicCodeManager">
            <summary>
            Adds the dynamic code manager.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentElementBase">
            <summary>
            A base class for exploration component elements.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentElementBase.#ctor(Microsoft.ExtendedReflection.ComponentModel.IExplorationComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentElementBase"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentElementBase.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices">
            <summary>
            Services typically present when exploring multiple execution paths
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentServices">
            <summary>
            Services available for the execution of a multiple paths
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentServices.CallStackTraceBuilder">
            <summary>
            Optional call stack builder.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentServices.SolverOptions">
            <summary>
            Gets the model provider options.
            </summary>
            <value>The model provider options.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentServices.UninstrumentedMethodFilterManager">
            <summary>
            Gets the optional uninstrumented method filter manager
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentServices.StaticFieldStoreFilterManager">
            <summary>
            Gets the optional static field store filter manager
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentServices.CachedLog">
            <summary>
            Gets a caching log proxy
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentServices.TermManager">
            <summary>
            Gets the term manager.
            </summary>
            <value>The term manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentServices.MethodInterpretationManager">
            <summary>
            Gets the optional method interpretation manager.
            </summary>
            <value>The method interpretation manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentServices.DomainProvider">
            <summary>
            Gets the domain provider.
            </summary>
            <value>The domain provider.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentServices.FunctionInterpretationProvider">
            <summary>
            Gets the function interpretation provider.
            </summary>
            <value>The function interpretation provider.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentServices.SolverFactory">
            <summary>
            Gets the solver factory.
            </summary>
            <value>The solver factory.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentServices.InstructionInterpreterEventSource">
            <summary>
            Gets the optional instruction interpreter event source.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentServices.PathConditionBuilderEventSource">
            <summary>
            Gets the optional path condition builder event source.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IExplorationComponentServices.BranchCoverageManager">
            <summary>
            Gets the branch coverage manager
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices.#ctor(Microsoft.ExtendedReflection.ComponentModel.IExplorationComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices.TermManager">
            <summary>
            Gets the term manager.
            </summary>
            <value>The term manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices.MethodInterpretationManager">
            <summary>
            Gets the optional method interpretation manager.
            </summary>
            <value>The method interpretation manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices.CallStackTraceBuilder">
            <summary>
            Optional call stack builder.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices.DomainProvider">
            <summary>
            Gets the domains.
            </summary>
            <value>The domains.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices.FunctionInterpretationProvider">
            <summary>
            Gets the function interpretation provider.
            </summary>
            <value>The function interpretation provider.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices.SolverFactory">
            <summary>
            Gets the solver factory.
            </summary>
            <value>The solver factory.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices.SolverOptions">
            <summary>
            Gets the model provider options.
            </summary>
            <value>The model provider options.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices.UninstrumentedMethodFilterManager">
            <summary>
            Gets the optional uninstrumented method filter manager
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices.StaticFieldStoreFilterManager">
            <summary>
            Gets the optional static field store filter manager
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices.CachedLog">
            <summary>
            Gets a caching log proxy
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices.InstructionInterpreterEventSource">
            <summary>
            Gets the optional instruction interpreter event source.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices.PathConditionBuilderEventSource">
            <summary>
            Gets the optional path condition builder event source.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ExplorationComponentServices.BranchCoverageManager">
            <summary>
            Gets the branch coverage manager
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.ForwardingContainer">
            <summary>
            A container that inherits all services from a parent container
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.Container">
            <summary>
            A component container
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Container.#ctor(Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.Container"/> class.
            </summary>
            <param name="earlyServices">A list of services that can be queried while new services are still being added.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Container.AddComponent(System.String,Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Adds the specified component.
            </summary>
            <param name="name">The unique, case-insensitive name to assign to the component.-or- null that leaves the component unnamed.</param>
            <param name="component">The component.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Container.HasService(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether the specified service type has service.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Container.CanQueryServiceEarly(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether a service type can be queried while new services are still being added.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Container.TryGetService(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.ComponentModel.IService@)">
            <summary>
            Tries to get a service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceObject">The service object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Container.DescribeAvailableServices">
            <summary>
            Describes the available services.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Container.DescribeInstalledComponents">
            <summary>
            Describes the installed components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.Container.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.Container.Components">
            <summary>
            Gets all the components.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.ISite">
            <summary>
            Site
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ISite.Component">
            <summary>
            Gets the component associated with this site.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ISite.Container">
            <summary>
            Gets the container associated with this site.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ISite.Name">
            <summary>
            Gets or sets the optional name of the component associated with this site.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ForwardingContainer.#ctor(Microsoft.ExtendedReflection.ComponentModel.IServiceProvider,Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.ForwardingContainer"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="earlyServices">A list of services that can be queried while new services are still being added.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ForwardingContainer.DescribeInstalledComponents">
            <summary>
            Describes the installed components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ForwardingContainer.HasService(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Checks whether a service type is available.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ForwardingContainer.CanQueryServiceEarly(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether a service type can be queried while new services are still being added.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ForwardingContainer.TryGetService(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.ComponentModel.IService@)">
            <summary>
            Tries to get a service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceObject">The service object.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.ForwardingContainer.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.IPathComponentServices">
            <summary>
            Services available for the execution of a single path
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IPathComponentServices.State">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IPathComponentServices.PathConditionBuilder">
            <summary>
            The path condition builder of the main thread.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IPathComponentServices.ExecutionBounds">
            <summary>
            Optional execution bounds.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IPathComponentServices.ExecutionMonitor">
            <summary>
            Gets the execution monitor.
            </summary>
            <value>The execution monitor.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IPathComponentServices.ConditionValidator">
            <summary>
            Condition validator.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IPathComponentServices.CompressionManager">
            <summary>
            Optional compression manager.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IPathComponentServices.InputModelProvider">
            <summary>
            Gets the input model provider.
            </summary>
            <value>The input model provider.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.IPathComponentServices.BranchCoverageManager">
            <summary>
            Gets the branch coverage manager
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.PathComponentElementBase">
            <summary>
            A base class for exploration component elements.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.PathComponentElementBase.#ctor(Microsoft.ExtendedReflection.ComponentModel.IPathComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.PathComponentElementBase"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.PathComponentElementBase.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.PathComponentServices">
            <summary>
            A base class for path components.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.PathComponentServices.#ctor(Microsoft.ExtendedReflection.ComponentModel.IPathComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.ComponentModel.PathComponentBase"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.PathComponentServices.State">
            <summary>
            The current state.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.PathComponentServices.PathConditionBuilder">
            <summary>
            The path condition builder of the main thread.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.PathComponentServices.ExecutionBounds">
            <summary>
            Optional execution bounds.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.PathComponentServices.ConditionValidator">
            <summary>
            Condition validator.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.PathComponentServices.ExecutionMonitor">
            <summary>
            Gets the execution monitor.
            </summary>
            <value>The execution monitor.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.PathComponentServices.CompressionManager">
            <summary>
            Optional compression manager.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.PathComponentServices.InputModelProvider">
            <summary>
            Gets the input model provider.
            </summary>
            <value>The input model provider.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.ComponentModel.PathComponentServices.BranchCoverageManager">
            <summary>
            Gets the branch coverage manager
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.ComponentModel.ServiceProviderHelper">
            <summary>
            Static helper methods around a service provider
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ServiceProviderHelper.GetService``1(Microsoft.ExtendedReflection.ComponentModel.IServiceProvider)">
            <summary>
            Gets a required service.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ServiceProviderHelper.GetService(Microsoft.ExtendedReflection.ComponentModel.IServiceProvider,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets a required service.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.ComponentModel.ServiceProviderHelper.TryGetService``1(Microsoft.ExtendedReflection.ComponentModel.IServiceProvider,``0@)">
            <summary>
            Tries to get an optional service.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="service">The service.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.BranchCoverage">
            <summary>
            Default <see cref="T:Microsoft.ExtendedReflection.Coverage.IBranchCoverage"/> implementation
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.IBranchCoverage">
            <summary>
            Identifier of branch coverage information
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IBranchCoverage.GetHashedCappedBranchCoverage(System.Int32)">
            <summary>
            Obtains a hash of a capped branch coverage
            </summary>
            <param name="cap"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IBranchCoverage.IsGreaterAnywhereThan``1(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0},System.Int32)">
            <summary>
            Determines whether [is greater anywhere than] [the specified than].
            </summary>
            <param name="than">The than.</param>
            <param name="cap">The cap.</param>
            <returns>
            	<c>true</c> if [is greater anywhere than] [the specified than]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IBranchCoverage.IsGreaterAnywhereThan(Microsoft.ExtendedReflection.Coverage.IBranchCoverage,Microsoft.ExtendedReflection.Coverage.ICoverageFilter,Microsoft.ExtendedReflection.Coverage.CoverageDomain)">
            <summary>
            Determines whether [is greater anywhere than] [the specified than].
            </summary>
            <param name="other">The other.</param>
            <param name="coverageFilter">The coverage filter.</param>
            <param name="minCoverageDomain">The min coverage domain.</param>
            <returns>
            	<c>true</c> if [is greater anywhere than] [the specified than]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IBranchCoverage.IsGreaterAnywhereThanFiltered``1(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0},System.Int32)">
            <summary>
            Determines whether [is greater anywhere than] [the specified than].
            </summary>
            <param name="than">The than.</param>
            <param name="cap">The cap.</param>
            <returns>
            	<c>true</c> if [is greater anywhere than] [the specified than]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IBranchCoverage.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the coverage information as text.
            </summary>
            <param name="textWriter"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IBranchCoverage.GetHits(Microsoft.ExtendedReflection.Metadata.CodeLocation)">
            <summary>
            How often an offset of a method was hit.
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.IBranchCoverage.CoveredMethods">
            <summary>
            Gets a list of all covered methods.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.BranchCoverage.KeyEqualityComparer">
            <summary>
            Singleton instance of key equality comparer
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchCoverage.#ctor(System.Int32,Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageIndexer,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.BranchCoverage"/> class.
            </summary>
            <param name="uniqueId">unique identifier associated with indices</param>
            <param name="indexer">interface to lookup elements of indices</param>
            <param name="indices">indices, each representing a method and its branch coverage</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchCoverage.IsGreaterAnywhereThan(Microsoft.ExtendedReflection.Coverage.IBranchCoverage,Microsoft.ExtendedReflection.Coverage.ICoverageFilter,Microsoft.ExtendedReflection.Coverage.CoverageDomain)">
            <summary>
            Determines whether [is greater anywhere than] [the specified than].
            </summary>
            <param name="other">The other.</param>
            <param name="coverageFilter">The coverage filter.</param>
            <param name="minCoverageDomain">The min coverage domain.</param>
            <returns>
            	<c>true</c> if [is greater anywhere than] [the specified than]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchCoverage.IsGreaterAnywhereThan``1(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0},System.Int32)">
            <summary>
            Determines whether [is greater anywhere than] [the specified than].
            </summary>
            <param name="than">The than.</param>
            <param name="cap">The cap.</param>
            <returns>
            	<c>true</c> if [is greater anywhere than] [the specified than]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchCoverage.IsGreaterAnywhereThanFiltered``1(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0},System.Int32)">
            <summary>
            Determines whether [is greater anywhere than] [the specified than].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="than">The than.</param>
            <param name="cap">The cap.</param>
            <returns>
            	<c>true</c> if [is greater anywhere than] [the specified than]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchCoverage.GetHashedCappedBranchCoverage(System.Int32)">
            <summary>
            Obtains a hash of a capped branch coverage
            </summary>
            <param name="cap"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchCoverage.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the coverage information as text.
            </summary>
            <param name="textWriter"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchCoverage.GetHits(Microsoft.ExtendedReflection.Metadata.CodeLocation)">
            <summary>
            How often an offset of a method has been hit.
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.BranchCoverage.CoveredMethods">
            <summary>
            Gets a list of all covered methods.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag">
            <summary>
            A code branch tag
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag.Combine(Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag)">
            <summary>
            Combines the instance with the other tag.
            </summary>
            <param name="otherTag">The other tag.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.BranchTags.CountedBranchTagBase">
            <summary>
            A branch tag with counter
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchTags.CountedBranchTagBase.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.BranchTags.CountedBranchTagBase"/> class.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchTags.CountedBranchTagBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.BranchTags.CountedBranchTagBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchTags.CountedBranchTagBase.Combine(Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag)">
            <summary>
            Combines this tag with the specified other tag.
            </summary>
            <param name="otherTag">The other tag.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.BranchTags.CountedBranchTagBase.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.BranchTags.UnionBranchTag">
            <summary>
            A union of various tags
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchTags.UnionBranchTag.#ctor(Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.BranchTags.UnionBranchTag"/> class.
            </summary>
            <param name="tags">The tags.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchTags.UnionBranchTag.Combine(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag})">
            <summary>
            Combines the specified tags.
            </summary>
            <param name="tags">The tags.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchTags.UnionBranchTag.CopyTo(Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag[],System.Int32)">
            <summary>
            Copies to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchTags.UnionBranchTag.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchTags.UnionBranchTag.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.BranchTags.UnionBranchTag.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.BranchTags.UnionBranchTag.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1">
            <summary>
            A chunk of source code with metadata
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.Start">
            <summary>
            Gets the start
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.End">
            <summary>
            Gets the end
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.Hits">
            <summary>
            -1 -> not instrumented,
            0 -> not covered
            >1 -> covered
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.Offset">
            <summary>
            IL offset (-1 if not available)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.Domain">
            <summary>
            Gets the coverage domain
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.CoverageDifference">
            <summary>
            Gets the coverage difference
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.Tags">
            <summary>
            Gets the associated tags
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.SetMetadata(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Coverage.CoverageEntry,Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage{`0})">
            <summary>
            Sets the metadata.
            </summary>
            <param name="method">The method.</param>
            <param name="coverage">The coverage.</param>
            <param name="branchHits">The branch hits.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.ExtendedReflection.Coverage.CoverageDomain,Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkCoverageDifference,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="hits">The hits.</param>
            <param name="offset">The offset.</param>
            <param name="domain">The domain.</param>
            <param name="coverageDifference">The coverage difference.</param>
            <param name="tags">The tags.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.WriteXml(Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocument{`0},Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,Microsoft.ExtendedReflection.Collections.IFiniteMap{System.Int32,Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag},System.Int32)">
            <summary>
            Writes the XML.
            </summary>
            <param name="document">The document.</param>
            <param name="writer">The writer.</param>
            <param name="currentTags">The current tags.</param>
            <param name="nextOffset">The next offset.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.Coverage">
            <summary>
            Gets the coverage.
            </summary>
            <value>The coverage.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.BranchHits">
            <summary>
            Gets the branch hits.
            </summary>
            <value>The branch hits.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkCollection`1">
            <summary>
            A collection of chunks
            </summary>
            <typeparam name="TTag"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkCollection`1.Split(Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk{`0},Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk{`0},Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk{`0},Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk{`0})">
            <summary>
            Splits the specified orginal.
            </summary>
            <param name="orginal">The orginal.</param>
            <param name="left">The left.</param>
            <param name="middle">The middle.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkCollection`1.Merge(Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk{`0})">
            <summary>
            Merges the specified chunk.
            </summary>
            <param name="chunk">The chunk.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkCoverageDifference">
            <summary>
            Enumeration that describes whether
            a source chunk contains improved or regressed
            coverage when rendering differences between coverages
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkCoverageDifference.None">
            <summary>
            No difference
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkCoverageDifference.Worse">
            <summary>
            Worse coverage
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkCoverageDifference.Better">
            <summary>
            Increased coverage
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocument`1">
            <summary>
            A document constituted of chunks
            </summary>
            <typeparam name="TTag"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocument`1.GetSource(Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunk{`0})">
            <summary>
            Gets the source.
            </summary>
            <param name="chunk">The chunk.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocument`1.IsInBound(System.Int32,System.Int32)">
            <summary>
            Determines whether line, column is in bound of the document.
            </summary>
            <param name="line">The line.</param>
            <param name="column">The column.</param>
            <returns>
            	<c>true</c> if [is in bound] [the specified line]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocument`1.GetIndex(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="line">indexed from 1</param>
            <param name="column">indexed from 1</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocument`1.#ctor(Microsoft.ExtendedReflection.Symbols.ISourceDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocument`1"/> class.
            </summary>
            <param name="sourceDocument">The source document.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocument`1.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocument`1.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocument`1.Chunks">
            <summary>
            Gets the chunks.
            </summary>
            <value>The chunks.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocument`1.SourceDocument">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocument`1.RenderedUrlPrefix">
            <summary>
            Gets or sets the rendered URL prefix.
            </summary>
            <value>The rendered URL prefix.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocument`1.LineCount">
            <summary>
            Gets the number of lines
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocumentDictionary`1">
            <summary>
            A dictionary of source documents
            </summary>
            <typeparam name="TTag"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocumentDictionary`1.#ctor(Microsoft.ExtendedReflection.Symbols.ISourceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocumentDictionary`1"/> class.
            </summary>
            <param name="sourceManager">The source manager.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocumentDictionary`1.TryGetDocument(System.String,Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocument{`0}@)">
            <summary>
            Tries to get the document.
            </summary>
            <param name="url">The URL.</param>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceChunkDocumentDictionary`1.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.Coloring.SourceDocumentChunker`1">
            <summary>
            A chunker of document into source code chuhks
            </summary>
            <typeparam name="TTag"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceDocumentChunker`1.#ctor(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.Coloring.SourceDocumentChunker`1"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceDocumentChunker`1.ColorizeDocuments(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{`0},Microsoft.ExtendedReflection.Coverage.Coloring.SourceDocumentChunker{`0}.DocumentMissingDelegate)">
            <summary>
            Colorizes the documents.
            </summary>
            <param name="coverage">The coverage.</param>
            <param name="documentMissingDelegate">The document missing delegate.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Coloring.SourceDocumentChunker`1.ColorizeDocumentsWithOutInstrumentationInfo(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{`0},Microsoft.ExtendedReflection.Coverage.Coloring.SourceDocumentChunker{`0}.DocumentMissingDelegate,Microsoft.ExtendedReflection.Coverage.MethodInstrumentationInfo)">
            <summary>
            Colorizes the documents. Assumes the required instrumentation info is available in minfo
            </summary>
            <param name="coverage">The coverage.</param>
            <param name="documentMissingDelegate">The document missing delegate.</param>
            <param name="minfo">The method instrumentation info</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.Coloring.SourceDocumentChunker`1.DocumentMissingDelegate">
            <summary>
            Delegate called on missing documents
            </summary>
            <param name="methodDefinition"></param>
            <param name="coverage"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.CoverageHelper">
            <summary>
            Helper methods for coverage interfaces
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.CoverageHelper.GetBlockCoverage``1(Microsoft.ExtendedReflection.Coverage.CoverageDomain,Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0},Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Gets the block coverage.
            </summary>
            <param name="domain">The domain.</param>
            <param name="coverage">The coverage.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.CoverageHelper.GetBlockCoverageWithOutInstrumentation``1(Microsoft.ExtendedReflection.Coverage.CoverageDomain,Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0},Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Coverage.MethodInstrumentationInfo)">
            <summary>
            Gets the block coverage.
            </summary>
            <param name="domain">The domain.</param>
            <param name="coverage">The coverage.</param>
            <param name="method">The method.</param>
            <param name="minfo">The method instrumentation info</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.CoverageHelper.GetFilteredMethods``1(Microsoft.ExtendedReflection.Coverage.ICoverageFilter,Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0})">
            <summary>
            Gets the filtered methods.
            </summary>
            <param name="filter">The filter.</param>
            <param name="coverage">The coverage.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.CoverageHelper.GetBlockCoverage``1(Microsoft.ExtendedReflection.Coverage.CoverageDomain,Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0})">
            <summary>
            Gets the block coverage.
            </summary>
            <typeparam name="TTag">The type of the tag.</typeparam>
            <param name="domain">The domain.</param>
            <param name="coverage">The coverage.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.ISourceCoverageManager">
            <summary>
            A source coverage writer/renderer 
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.ISourceCoverageManager.TryWriteSourceCoverage``1(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0},System.String,System.String,System.String@)">
            <summary>
            Tries to write a branch coverage builder to an xml file
            </summary>
            <typeparam name="TTag">The type of the tag.</typeparam>
            <param name="coverage">The coverage.</param>
            <param name="outputPath">The output path.</param>
            <param name="configuration">configuration name</param>
            <param name="xmlFile">The XML file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.ISourceCoverageManager.TryRenderSourceCoverage(System.String,System.Int32,System.String,System.String@)">
            <summary>
            Tries to render a source coverage report file to an html report
            </summary>
            <param name="reportFile"></param>
            <param name="requiredDynamicCoveragePercentile"></param>
            <param name="serverRoot"></param>
            <param name="reportHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.ISourceCoverageManager.TryRenderSourceCoverages(System.String,System.Int32,System.String)">
            <summary>
            Tries to render a batch of coverage reports under a given path
            </summary>
            <param name="path"></param>
            <param name="requiredDynamicCoveragePercentile"></param>
            <param name="serverRoot"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.ISourceCoverageManager.TryWriteMinimalSourceCoverage``1(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0},System.String,System.String,System.String)">
            <summary>
            Tries to write minimal source coverage information including methods and hits to xml file
            </summary>
            <typeparam name="TTag"></typeparam>
            <param name="coverage"></param>
            <param name="outputPath"></param>
            <param name="configuration"></param>
            <param name="xmlFile"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.ISourceCoverageManager.TryReadMinimalSourceCoverage``1(System.String,Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0}@,Microsoft.ExtendedReflection.Coverage.MethodInstrumentationInfo@,System.String@)">
            <summary>
            Reads minimal source coverage information from xml file and populates tagged branch coverage builder
            </summary>
            <typeparam name="TTag"></typeparam>
            <param name="xmlFile"></param>
            <param name="coverage"></param>
            <param name="minfo"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.ISourceCoverageManager.TryWriteSourceCoverageWithOutInstrumentation``1(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0},System.String,Microsoft.ExtendedReflection.Coverage.MethodInstrumentationInfo,System.String,System.String@)">
            <summary>
            Tries to write a branch coverage builder to an xml file
            </summary>
            <typeparam name="TTag">The type of the tag.</typeparam>
            <param name="coverage">The coverage.</param>
            <param name="outputPath">The output path.</param>
            <param name="minfo">instrumentation info</param>
            <param name="configuration">configuration name</param>
            <param name="xmlFile">The XML file.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.MethodInstrumentationInfo">
            <summary>
            Holds the minimal method instrumentation inforation
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodInstrumentationInfo.TryGetBasicBlockStartOffsets(Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.Collections.Generic.IEnumerable{System.Int32}@)">
            <summary>
            Retrieves the basic block offsets
            </summary>
            <param name="methodDefinition"></param>
            <param name="offsets"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodInstrumentationInfo.AddCodePosition(Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Adds a code position to the dictionary
            </summary>
            <param name="methodDefinition"></param>
            <param name="offset"></param>
            <param name="isBasicOffset"></param>
            <param name="branchLabels"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodInstrumentationInfo.GetInstructionCoverage(Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.Int32[])">
            <summary>
            Gets instruction coverage from the loaded data
            </summary>
            <param name="methodDefinition"></param>
            <param name="branchHits"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodInstrumentationInfo.GetBranchesTargettingInstruction``1(Microsoft.ExtendedReflection.Metadata.MethodDefinition,``0[])">
            <summary>
            Gets the targetting mapping from the loaded data
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodDefinition"></param>
            <param name="branchData"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodInstrumentationInfo.Merge(Microsoft.ExtendedReflection.Coverage.MethodInstrumentationInfo)">
            <summary>
            Merges two method instrumentation informations
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.SourceCoverageManager">
            <summary>
            A manager to render coverage data
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.SourceCoverageManager.TryWriteSourceCoverage``1(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0},System.String,System.String,System.String@)">
            <summary>
            Tries to write a branch coverage builder to an xml file
            </summary>
            <typeparam name="TTag">The type of the tag.</typeparam>
            <param name="coverage">The coverage.</param>
            <param name="outputPath">The output path.</param>
            <param name="configuration">configuration name</param>
            <param name="xmlFile">The XML file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.SourceCoverageManager.TryWriteSourceCoverageWithOutInstrumentation``1(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0},System.String,Microsoft.ExtendedReflection.Coverage.MethodInstrumentationInfo,System.String,System.String@)">
            <summary>
            Tries to write a branch coverage builder to an xml file
            </summary>
            <typeparam name="TTag">The type of the tag.</typeparam>
            <param name="coverage">The coverage.</param>
            <param name="outputPath">The output path.</param>
            <param name="minfo">instrumentation info</param>
            <param name="configuration">configuration name</param>
            <param name="xmlFile">The XML file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.SourceCoverageManager.TryRenderSourceCoverages(System.String,System.Int32,System.String)">
            <summary>
            Tries to render a batch of coverage reports under a given path
            </summary>
            <param name="path"></param>
            <param name="requiredDynamicCoveragePercentile"></param>
            <param name="serverRoot"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.SourceCoverageManager.TryRenderSourceCoverage(System.String,System.Int32,System.String,System.String@)">
            <summary>
            Tries to render a source coverage report file to an html report
            </summary>
            <param name="reportFile"></param>
            <param name="requiredDynamicCoveragePercentile"></param>
            <param name="serverRoot"></param>
            <param name="reportHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.SourceCoverageManager.TryWriteMinimalSourceCoverage``1(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0},System.String,System.String,System.String)">
            <summary>
            Tries to write minimal source coverage information including methods and hits to xml file
            </summary>
            <typeparam name="TTag"></typeparam>
            <param name="coverage"></param>
            <param name="outputPath"></param>
            <param name="configuration"></param>
            <param name="xmlFile"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.SourceCoverageManager.TryReadMinimalSourceCoverage``1(System.String,Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{``0}@,Microsoft.ExtendedReflection.Coverage.MethodInstrumentationInfo@,System.String@)">
            <summary>
            Reads minimal source coverage information from xml file and populates tagged branch coverage builder
            </summary>
            <typeparam name="TTag"></typeparam>
            <param name="xmlFile"></param>
            <param name="taggedCoverage"></param>
            <param name="minfo"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.SourceCoverageManager.TryGetMethodFromAttributes(System.Xml.XmlReader,Microsoft.ExtendedReflection.Metadata.MethodDefinition@)">
            <summary>
            Reads method attributes and gets the method
            </summary>
            <param name="xreader"></param>
            <param name="currentMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.SourceCoverageManager.WriteMethodHits``1(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage{``0})">
            <summary>
            Dumps the hits information to the XML
            </summary>
            <typeparam name="TTag"></typeparam>
            <param name="writer"></param>
            <param name="branchHits"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.Filters.AndCoverageFilter">
            <summary>
            Combines two coverage filters
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.ICoverageFilter">
            <summary>
            Filter for coverage data
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.ICoverageFilter.IsIgnored(Microsoft.ExtendedReflection.Metadata.ModuleEx)">
            <summary>
            Determines whether the specified module is ignored.
            </summary>
            <param name="module">The module.</param>
            <returns>
            	<c>true</c> if the specified module is ignored; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.ICoverageFilter.TryGetDomain(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Coverage.CoverageDomain@)">
            <summary>
            Gets the coverage domain of the method
            </summary>
            <param name="method">The method.</param>
            <param name="domain">The domain.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Filters.AndCoverageFilter.And(Microsoft.ExtendedReflection.Coverage.ICoverageFilter,Microsoft.ExtendedReflection.Coverage.ICoverageFilter)">
            <summary>
            Combines the <paramref name="left"/>
            and <paramref name="right"/>
            coverage filters
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Filters.AndCoverageFilter.IsIgnored(Microsoft.ExtendedReflection.Metadata.ModuleEx)">
            <summary>
            Gets a value indicating if the module is ignored
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Filters.AndCoverageFilter.TryGetDomain(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Coverage.CoverageDomain@)">
            <summary>
            Gets the coverage domain of the method
            </summary>
            <param name="method"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Filters.AndCoverageFilter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.CachingCoverageFilter">
            <summary>
            Cached proxy for coverage filters
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.CachingCoverageFilter.#ctor(Microsoft.ExtendedReflection.Coverage.ICoverageFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.CachingCoverageFilter"/> class.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.CachingCoverageFilter.Dump(Microsoft.ExtendedReflection.Logging.IEventLog)">
            <summary>
            Dumps the current filter decisions
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.CachingCoverageFilter.IsIgnored(Microsoft.ExtendedReflection.Metadata.ModuleEx)">
            <summary>
            Gets a value indicating if the module is ignored
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.CachingCoverageFilter.TryGetDomain(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Coverage.CoverageDomain@)">
            <summary>
            Gets the coverage domain of the method
            </summary>
            <param name="method">The method.</param>
            <param name="domain">The domain.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.CachingCoverageFilter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterPriority>2</filterPriority>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.Filters.CollectionCoverageFilter">
            <summary>
            Combines a collection of coverage fitlers
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Filters.CollectionCoverageFilter.#ctor(Microsoft.ExtendedReflection.ComponentModel.IComponent,System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Coverage.ICoverageFilter})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.Filters.CollectionCoverageFilter"/> class.
            </summary>
            <param name="host"></param>
            <param name="filters">The filters.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Filters.CollectionCoverageFilter.IsIgnored(Microsoft.ExtendedReflection.Metadata.ModuleEx)">
            <summary>
            Gets a value indicating if the module is ignored
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Filters.CollectionCoverageFilter.TryGetDomain(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Coverage.CoverageDomain@)">
            <summary>
            Gets the coverage domain of the method
            </summary>
            <param name="method">The method.</param>
            <param name="domain">The domain.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Filters.CollectionCoverageFilter.ToString">
            <summary>
            Gets a string representation of the coverage filter
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.Filters.UnknownCoverageFilter">
            <summary>
            Filter that always returns unknown
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Filters.UnknownCoverageFilter.IsIgnored(Microsoft.ExtendedReflection.Metadata.ModuleEx)">
            <summary>
            Gets a value indicating if the module is ignored
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Filters.UnknownCoverageFilter.TryGetDomain(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Coverage.CoverageDomain@)">
            <summary>
            Gets the coverage domain of the method
            </summary>
            <param name="method">The method.</param>
            <param name="domain">The domain.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.Filters.UnknownCoverageFilter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.IBranchCoverageBuilder">
            <summary>
            A builder for branch coverage data
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IBranchCoverageBuilder.GetMethodBranchCoverageBuilder(System.Int32)">
            <summary>
            Gets the builder for a given method index
            </summary>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IBranchCoverageBuilder.ToBranchCoverage(Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageIndexer)">
            <summary>
            Gets the branch coverage vector for the given indexer
            </summary>
            <param name="indexer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IBranchCoverageBuilder.ToBranchCoverage(Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageIndexer,Microsoft.ExtendedReflection.Coverage.IBranchCoverage)">
            <summary>
            Gets the branch coverage vector for the given indexer
            </summary>
            <param name="indexer">The indexer.</param>
            <param name="baseCoverage">The base coverage.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageBuilder">
            <summary>
            A builder for method branch coverage
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageBuilder.Hit(System.Int32)">
            <summary>
            Logs a hit on a code location
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageBuilder.ToMethodBranchCoverage(Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageIndexer)">
            <summary>
            Converts data to a <see cref="T:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverage"/> instance
            </summary>
            <param name="indexer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageBuilder.ToMethodBranchCoverage(Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageIndexer,Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverage)">
            <summary>
            Converts data to a <see cref="T:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverage"/> instance,
            minus the base coverage
            </summary>
            <param name="indexer">The indexer.</param>
            <param name="baseCoverage">The base coverage.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.BranchCoverageBuilder">
            <summary>
            Default <see cref="T:Microsoft.ExtendedReflection.Coverage.IBranchCoverageBuilder"/> implementation
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchCoverageBuilder.GetMethodBranchCoverageBuilder(System.Int32)">
            <summary>
            Gets the builder for a given method index
            </summary>
            <param name="methodIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchCoverageBuilder.ToBranchCoverage(Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageIndexer,Microsoft.ExtendedReflection.Coverage.IBranchCoverage)">
            <summary>
            Toes the branch coverage.
            </summary>
            <param name="methodIndexer">The method indexer.</param>
            <param name="baseCoverage">The base coverage.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.BranchCoverageBuilder.ToBranchCoverage(Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageIndexer)">
            <summary>
            Toes the branch coverage.
            </summary>
            <param name="methodIndexer">The method indexer.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.IPathBranchCoverageManager">
            <summary>
            A manager for path branch coverage
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IPathBranchCoverageManager.CreateBranchCoverageBuilder">
            <summary>
            Creates a branch coverage builder
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.IPathBranchCoverageManager.BranchCoverage">
            <summary>
            Gets the total branch coverage builder
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverageBuilder">
            <summary>
            Default implementation of <see cref="T:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageBuilder"/>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverageIndexer">
            <summary>
            An efficient method branch coverage indexer, internalizer
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageIndexer">
            <summary>
            Interface to retrieve hashed capped branch coverage
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageIndexer.GetIndex(Microsoft.ExtendedReflection.Coverage.IndexedMethodBranchCoverageKey)">
            <summary>
            Gets the index of an indexed method branch coverage key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageIndexer.GetIndexedMethodBranchCoverageKey(System.Int32)">
            <summary>
            Gets the method branch coverage key
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageIndexer.GetHashedCappedMethodBranchCoverage(System.Int32[],System.Int32)">
            <summary>
            Get hashed capped branch coverage
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageIndexer.GetBranchCoverage(Microsoft.ExtendedReflection.Collections.IFiniteMap{System.Int32,Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverage})">
            <summary>
            Gets the branch coverage, given a map of method indices
            </summary>
            <param name="methodCoverages"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageIndexer.GetMethodBranchCoverage(System.Int32[])">
            <summary>
            Gets the branch coverage given an array of hits.
            </summary>
            <param name="blocks"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverageIndexer.DumpStatistics(Microsoft.ExtendedReflection.Logging.DumpTreeWriter)">
            <summary>
            Dumps the statistics
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverageIndexer.GetIndex(Microsoft.ExtendedReflection.Coverage.IndexedMethodBranchCoverageKey)">
            <summary>
            Gets the index of an indexed method branch coverage key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverageIndexer.GetIndexedMethodBranchCoverageKey(System.Int32)">
            <summary>
            Gets the method branch coverage key
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverageIndexer.GetBranchCoverage(Microsoft.ExtendedReflection.Collections.IFiniteMap{System.Int32,Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverage})">
            <summary>
            Gets the branch coverage, given a map of method indices
            </summary>
            <param name="methodCoverages"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverageIndexer.GetMethodBranchCoverage(System.Int32[])">
            <summary>
            Gets the branch coverage given an array of hits.
            </summary>
            <param name="blocks"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverageIndexer.GetHashedCappedMethodBranchCoverage(System.Int32[],System.Int32)">
            <summary>
            Get hashed capped branch coverage
            </summary>
            <param name="indices"></param>
            <param name="cap"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverageIndexer.DumpStatistics(Microsoft.ExtendedReflection.Logging.DumpTreeWriter)">
            <summary>
            Dumps the statistics
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.PathBranchCoverageManager">
            <summary>
            Default implementation of <see cref="T:Microsoft.ExtendedReflection.Coverage.IPathBranchCoverageManager"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.PathBranchCoverageManager.CreateBranchCoverageBuilder">
            <summary>
            Creates a branch coverage builder
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.PathBranchCoverageManager.BranchCoverage">
            <summary>
            Gets the total branch coverage builder
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.FileHeaderWriter">
            <summary>
            A simple writer helper for file headers
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.FileHeaderWriter.CopyrightTag">
            <summary>
            The copyright tag
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.FileHeaderWriter.AutoGeneratedTag">
            <summary>
            The auto-generated tag
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FileHeaderWriter.#ctor">
            <summary>
            Initializes a new instance of the file header writer
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FileHeaderWriter.WriteCopyright(System.String,System.String)">
            <summary>
            Appends a StyleCop friendly copyright message
            </summary>
            <param name="_company"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FileHeaderWriter.WriteElement(System.String,System.String)">
            <summary>
            Appends an xml element to the header
            </summary>
            <param name="element"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FileHeaderWriter.WriteCopyright(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Appends a StyleCop friendly copyright message from the assembly copyright 
            and company attributes
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FileHeaderWriter.WriteAutogenerated(System.String)">
            <summary>
            Writes an auto-generated flag
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FileHeaderWriter.ToString">
            <summary>
            Renders the writer and resets it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FileHeaderWriter.ExpandFileName(System.String,System.String)">
            <summary>
            Expands $(FileName) to the file name
            </summary>
            <param name="content"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.CSharp.CSharpFormattedExpression">
            <summary>
            A formatted expression is an expression with precedence information.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter">
            <summary>
            Emitter in F# syntax
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter">
            <summary>
            An emitter for metadata.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.IMethodBodyCreator">
            <summary>
            A creator of method bodies
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyCreator.CreateMethodBodyWriter(Microsoft.ExtendedReflection.Emit.IMethodBodyWriterContext,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Creates a method body.
            </summary>
            <param name="context">The context.</param>
            <param name="visibilityContext">The visibility context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.AddAssemblyAlias(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference,System.String)">
            <summary>
            Adds an assembly alias
            </summary>
            <param name="assembly"></param>
            <param name="alias"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.GetOrCreateAssemblyAlias(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference)">
            <summary>
            Gets or creats a new assembly alias for the given reference
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.ImportNamespace(System.String)">
            <summary>
            Adds a namespace to the list of imported namespaces
            </summary>
            <param name="namespace"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.WriteAssemblyInfo(System.IO.TextWriter,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.ICustomAttribute})">
            <summary>
            Writes the assembly info.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="attributes">the assembly attributes</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.WriteModuleInfo(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition)">
            <summary>
            Writes the module info.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.WriteType(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Writes the type definition.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="typeDefinition">The type definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.GetTypeName(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Collections.IIndexable{System.String},Microsoft.ExtendedReflection.Collections.IIndexable{System.String})">
            <summary>
            Pretty formats the type name
            </summary>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <param name="genericMethodParameters">The generic method parameters.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.WriteAssembly(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition)">
            <summary>
            Writes the specified module as text.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.WriteMethod(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Writes the specified text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.WriteExpression(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Writes the specified text writer.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.WriteComment(System.IO.TextWriter,System.String)">
            <summary>
            Writes the comment.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.IsPure">
            <summary>
            Whether only proper (compilable) syntax of the target language was used.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.ImportedNamespaces">
            <summary>
            Gets the set of namespaces assumed to be available during writing.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.AssemblyAliases">
            <summary>
            Tries to get a custom assembly alias.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter.IndentString">
            <summary>
            Gets or sets the indent string.
            </summary>
            <value>The indent string.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.FSharp.IFSharpWriterWithSafety">
            <summary>
            A writer that holds a safe/unsafe code state
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.IFSharpWriterWithSafety.MakeUnsafe">
            <summary>
            Makes the content unsafe.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.FSharp.IFSharpWriterWithSafety.Unsafe">
            <summary>
            Gets a value indicating whether this content is unsafe.
            </summary>
            <value><c>true</c> if unsafe; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.#ctor(Microsoft.ExtendedReflection.Emit.LanguageNamespaceMode,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter"/> class.
            </summary>
            <param name="namespaceMode">The namespace mode.</param>
            <param name="preferredLineWidth">Width of the preferred line.</param>
            <param name="sortMembers">Sort members</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.MakeUnsafe">
            <summary>
            Makes the unsafe.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.ImportNamespace(System.String)">
            <summary>
            Adds a namespace to the list of 'using' namespaces
            </summary>
            <param name="namespace"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.AddAssemblyAlias(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference,System.String)">
            <summary>
            Adds an assembly alias
            </summary>
            <param name="assembly"></param>
            <param name="alias"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.GetOrCreateAssemblyAlias(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference)">
            <summary>
            Gets or creates a new alias for the assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.IsPartial(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Determines whether the specified type definition is partial.
            Returns <code>true</code>.
            </summary>
            <param name="typeDefinition">The type definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.CreateMethodBodyWriter(Microsoft.ExtendedReflection.Emit.IMethodBodyWriterContext,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Creates the method body this.writer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.WriteAssembly(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition)">
            <summary>
            Writes the specified module as text.
            </summary>
            <param name="textWriter">The text this.writer.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.WriteMethod(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.WriteExpression(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.WriteAssemblyInfo(System.IO.TextWriter,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.ICustomAttribute})">
            <summary>
            Writes the assembly info.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="attributes"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.WriteModuleInfo(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition)">
            <summary>
            Writes the module info.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.WriteType(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Writes the type definition.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="typeDefinition">The type definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.GetTypeName(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Collections.IIndexable{System.String},Microsoft.ExtendedReflection.Collections.IIndexable{System.String})">
            <summary>
            Pretty formats the type name
            </summary>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <param name="genericMethodParameters">The generic method parameters.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.IsPure">
            <summary>
            Whether only proper (compilable) F# syntax was used.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.Unsafe">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter"/> is unsafe.
            </summary>
            <value><c>true</c> if unsafe; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.ImportedNamespaces">
            <summary>
            Set of namespaces used during writing.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.IndentString">
            <summary>
            Gets or sets the indent.
            </summary>
            <value>The indent.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.AssemblyAliases">
            <summary>
            Gets the assembly aliases
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitorWithAccessors`1">
            <summary>
            Metadata visitor with accessor filtering support
            </summary>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1">
            <summary>
            A visitor of metadata elements.
            </summary>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitAssembly(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition)">
            <summary>
            Visits the assembly.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitModuleDefinitions(`0,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IModuleDefinition})">
            <summary>
            Visits the module definition collection.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="modules">The modules.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitModule(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IModuleDefinition)">
            <summary>
            Visits the module.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="module">The module.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMemberDefinitionContainer(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinitionContainer)">
            <summary>
            Visits the member definition container.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="container">The container.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMemberDefinitions(`0,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition})">
            <summary>
            Visits the member definition collection.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="memberDefinitions">The member definitions.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMemberDefinition(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition)">
            <summary>
            Visits the member definition.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="memberDefinition">The member definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitCustomAttributes(`0,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.ICustomAttribute})">
            <summary>
            Visits the custom attributes.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="customAttributes">The custom attributes.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitCustomAttribute(`0,Microsoft.ExtendedReflection.Metadata.ICustomAttribute)">
            <summary>
            Visits the custom attribute.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMethod(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Visits the method.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitCustomAttributeArgument(`0,Microsoft.ExtendedReflection.Metadata.AttributeArgument)">
            <summary>
            Visits the custom attribute argument.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitCustomAttributeConstructorArgument(`0,Microsoft.ExtendedReflection.Metadata.AttributeArgument.ConstructorArgument)">
            <summary>
            Visits the custom attribute argument.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitCustomAttributeNamedArgument(`0,Microsoft.ExtendedReflection.Metadata.AttributeArgument.NamedArgument)">
            <summary>
            Visits the custom attribute argument.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitCustomAttributeFieldValue(`0,Microsoft.ExtendedReflection.Metadata.AttributeArgument.FieldValue)">
            <summary>
            Visits the custom attribute argument.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitCustomAttributePropertyValue(`0,Microsoft.ExtendedReflection.Metadata.AttributeArgument.PropertyValue)">
            <summary>
            Visits the custom attribute argument.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMetadataExpression(`0,Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Visits the metadata expression.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="metadataExpression">The metadata expression.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMetadataArrayExpression(`0,Microsoft.ExtendedReflection.Metadata.MetadataExpression.ArrayExpression)">
            <summary>
            Visits the metadata array expression.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="arrayExpression">The array expression.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMetadataTypeOfExpression(`0,Microsoft.ExtendedReflection.Metadata.MetadataExpression.TypeOfExpression)">
            <summary>
            Visits the metadata type of expression.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="typeOfExpression">The type of expression.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMetadataI1Expression(`0,Microsoft.ExtendedReflection.Metadata.MetadataExpression.I1Expression)">
            <summary>
            Visits the metadata i1 expression.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="i1Expression">The i1 expression.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMetadataI2Expression(`0,Microsoft.ExtendedReflection.Metadata.MetadataExpression.I2Expression)">
            <summary>
            Visits the metadata i2 expression.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="i2Expression">The i2 expression.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMetadataI4Expression(`0,Microsoft.ExtendedReflection.Metadata.MetadataExpression.I4Expression)">
            <summary>
            Visits the metadata i4 expression.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="i4Expression">The i4 expression.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMetadataI8Expression(`0,Microsoft.ExtendedReflection.Metadata.MetadataExpression.I8Expression)">
            <summary>
            Visits the metadata i8 expression.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="i8Expression">The i8 expression.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMetadataR4Expression(`0,Microsoft.ExtendedReflection.Metadata.MetadataExpression.R4Expression)">
            <summary>
            Visits the metadata r4 expression.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="r4Expression">The r4 expression.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMetadataR8Expression(`0,Microsoft.ExtendedReflection.Metadata.MetadataExpression.R8Expression)">
            <summary>
            Visits the metadata r8 expression.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="r8Expression">The r8 expression.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMetadataNullExpression(`0,Microsoft.ExtendedReflection.Metadata.MetadataExpression.NullExpression)">
            <summary>
            Visits the metadata null expression.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="nullExpression">The null expression.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMetadataStringExpression(`0,Microsoft.ExtendedReflection.Metadata.MetadataExpression.StringExpression)">
            <summary>
            Visits the metadata string expression.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="stringExpression">The string expression.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitEventDefinition(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IEventDefinition)">
            <summary>
            Visits the event definition.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="eventDefinition">The event definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitPropertyDefinition(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyDefinition)">
            <summary>
            Visits the property definition.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="propertyDefinition">The property definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMethodDefinition(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Visits the method definition.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="methodDefinition">The method definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitFieldDefinition(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IFieldDefinition)">
            <summary>
            Visits the field definition.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="fieldDefinition">The field definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitTypeDefinition(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Visits the type definition.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="typeDefinition">The type definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitOverrides(`0,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IOverride})">
            <summary>
            Visits the overrides.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="overrides">The overrides.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitOverride(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IOverride)">
            <summary>
            Visits the override.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="override">The @override.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitBaseType(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Visits the type of the base.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="baseType">Type of the base.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitDeclaredInterfaces(`0,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Visits the declared interfaces.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="declaredInterfaces">The declared interfaces.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitDeclaredInterface(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Visits the declared interface.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="declaredInterface">The declared interface.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitGenericTypeParameterDefinitions(`0,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IGenericParameterDefinition})">
            <summary>
            Visits the generic type parameter definitions.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="genericParameterDefinitions">The generic parameter definitions.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitGenericMethodParameterDefinitions(`0,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IGenericParameterDefinition})">
            <summary>
            Visits the generic method parameter definitions.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="genericParameterDefinitions">The generic parameter definitions.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitGenericTypeParameterDefinition(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IGenericParameterDefinition)">
            <summary>
            Visits the generic type parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="genericParameterDefinition">The generic parameter definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitGenericMethodParameterDefinition(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IGenericParameterDefinition)">
            <summary>
            Visits the generic method parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="genericParameterDefinition">The generic parameter definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitGenericParameterDefinition(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IGenericParameterDefinition)">
            <summary>
            Visits the generic parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="genericParameterDefinition">The generic parameter definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitConstraint(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IConstraint)">
            <summary>
            Visits the constraint.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitConstraintType(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Visits the type of the constraint.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitType(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Visits the type.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitGenericTypeParameter(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Visits the generic type parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitGenericMethodParameter(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Visits the generic method parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitPointerType(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Visits the type of the pointer.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitManagedPointerType(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Visits the type of the managed pointer.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitMdArrayType(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Visits the type of the md array.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitSzArrayType(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Visits the type of the sz array.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitValueType(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Visits the type of the value.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitClassType(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Visits the type of the class.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitGenericTypeArguments(`0,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Visits the generic type arguments.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="genericArguments">The generic arguments.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitParameters(`0,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition})">
            <summary>
            Visits the parameters.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.VisitParameter(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition)">
            <summary>
            Visits the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterDefinition">The parameter definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.TryGetGenericTypeArgumentInContext(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType}@)">
            <summary>
            Tries to get the generic type arguments in context
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.Instantiate(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            When implementing an instantiated interface, we need to instanciate types 
            with care
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.Instantiate(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            When instantiation a type, take generic context into account
            </summary>
            <param name="type"></param>
            <param name="genericTypeArguments"></param>
            <param name="genericMethodArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.PushGenericTypeArgumentsInContext(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Pushes a set of genric type arguments in context
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.PopGenericTypeArgumentsInContext">
            <summary>
            Pops the generic type arguments context
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitor`1.SortMembers">
            <summary>
            Gets or sets a value indicating whether the members should be sorted.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitorWithAccessors`1.IsAccessor(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Determines whether the specified member definition is accessor.
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <returns>
            	<c>true</c> if the specified member definition is accessor; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitorWithAccessors`1.TryGetAccessor(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition@)">
            <summary>
            Tries to get the accessor of the method
            </summary>
            <param name="methodDefinition"></param>
            <param name="accessor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataVisitorWithAccessors`1.VisitMemberDefinitions(`0,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition})">
            <summary>
            Visits the member definition collection. Updates
            the accessor list.        
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="memberDefinitions">The member definitions.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpAssemblyWriter.Writer.ShouldUseNewLine(System.Boolean,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition})">
            <summary>
            Tries to estimate whether the parameter list should
            be emitted on a single or multiple line basis.
            </summary>
            <param name="isStatic"></param>
            <param name="parameters"></param>
            <returns></returns>
            <remarks>
            This method is not precise because it does not know
            the position of the caret.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.FSharp.FSharpFormattedExpression">
            <summary>
            A formatted expression is an expression with precedence information.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper">
            <summary>
            Various helpers to format F#
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.IsEscapingChar(System.Char)">
            <summary>
            Determines whether the character is escaping
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.ContainsEscapingChar(System.String)">
            <summary>
            Determines whether the strings contains a character that must be escaped.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.ContainsEscapingChar(System.String,System.Boolean@)">
            <summary>
            Determines whether the strings contains a character that must be escaped.
            </summary>
            <param name="string"></param>
            <param name="allSame">whether all characters in the string are equal</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.Escape(System.String)">
            <summary>
            Escapes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.AppendEscapedChar(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Char)">
            <summary>
            Appends the escaped char.
            </summary>
            <param name="stringBuilder">The string builder.</param>
            <param name="char">The char.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.AppendUnicodeEscapedChar(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Char)">
            <summary>
            Appends the escaped char.
            </summary>
            <param name="stringBuilder">The string builder.</param>
            <param name="char">The char.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.WriteEscapedChar(System.IO.TextWriter,System.Char)">
            <summary>
            Appends the escaped char.
            </summary>
            <param name="writer">The writer.</param>
            <param name="char"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.QuoteChar(System.Char)">
            <summary>
            Quotes the character.
            </summary>
            <param name="char">The char.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.AppendQuotedChar(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Char)">
            <summary>
            Writes the quoted character.
            </summary>
            <param name="builder">The string builder.</param>
            <param name="char">The char.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.WriteQuotedChar(System.IO.TextWriter,System.Char)">
            <summary>
            Writes the quoted character.
            </summary>
            <param name="writer">The writer.</param>
            <param name="char">The char.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.QuoteString(System.String,System.Int32)">
            <summary>
            Quotes the string.
            </summary>
            <param name="string"></param>
            <param name="ellipseAfterMaxChars">if non-negative, states the maximum number of characters to be quoted after which an ellipse is used to shorten the rest</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.WriteQuotedString(System.IO.TextWriter,System.String,System.Int32)">
            <summary>
            Quotes the string.
            </summary>
            <param name="writer"></param>
            <param name="string"></param>
            <param name="ellipseAfterMaxChars">if non-negative, states the maximum number of characters to be quoted after which an ellipse is used to shorten the rest</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.IsIdentifierStartCharacter(System.Char)">
            <summary>
            Gets a value identifying if a character is suitable as the first character of a F# identifier
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.IsIdentifierPartCharacter(System.Char)">
            <summary>
            Gets a value identifying if a character is suitable as the non-first character of a F# identifier
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.IsCallableIdentifier(System.String)">
            <summary>
            Gets a value to determine if a string is a possible identifier
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpHelper.IsInvalidGenericConstraint(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type can be used in the F# type constraint
            </summary>
            <remarks>
            A class-type constraint must satisfy the following rules:
            	The type must be a class type (not implemented)
            	The type must not be sealed (not implemented)
            	The type must not be one of the following types: System.Array, System.Delegate, System.Enum, or System.ValueType (implemented)
            	The type must not be object. Because all types derive from object, such a constraint would have no effect if it were permitted (implemented)
            	At most one constraint for a given type parameter can be a class type (not implemented
            </remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.ILanguage">
            <summary>
            An code language, used to generate code
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ILanguage.CreateAssemblyWriter">
            <summary>
            Creates a fresh assembly writer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ILanguage.CreateAssemblyWriter(Microsoft.ExtendedReflection.Emit.LanguageNamespaceMode,System.Int32,System.Boolean)">
            <summary>
            Creates a fresh assembly writer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ILanguage.CreateBodyWriter(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Creates a method body writer
            </summary>
            <param name="writer">The writer.</param>
            <param name="visibility">The visibility.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ILanguage.CreateBodyWriter(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.VisibilityContext,System.Int32)">
            <summary>
            Creates a method body writer
            </summary>
            <param name="writer">The writer.</param>
            <param name="visibility">The visibility.</param>
            <param name="preferredLineWidth">Width of the preferred line.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ILanguage.Name">
            <summary>
            Gets the language short name
            </summary>
            <remarks>
            This name should match the project extension name ('.{name}proj')
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ILanguage.FileExtension">
            <summary>
            Gets the file extension, including the leading dot
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodBody">
            <summary>
            An abstract method body.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodBody.UsingNamespaces">
            <summary>
            Gets the namespaces used in the body
            </summary>
            <value>The using namespaces.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter">
            <summary>
            A writer using F# syntax.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter">
            <summary>
            A write of method bodies; towards a replacement of CodeDom.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.CreateBody">
            <summary>
            Creates the body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Push(System.Byte)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Push(System.Int16)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Push(System.Int32)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Push(System.Int64)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Push(System.Single)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Push(System.Double)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Push(System.Decimal)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Pushes the specified local.
            </summary>
            <param name="local">The local.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Pushes the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes the static field.
            </summary>
            <param name="staticField">The static field.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Push(System.String)">
            <summary>
            Pushes the specified string value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushNull">
            <summary>
            Pushes a null value.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushDefault(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Pushes the default value of a type.
            </summary>
            <param name="type"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushPointerToNowhere">
            <summary>
            Pushes pointer to nowhere.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushPointerToValue">
            <summary>
            Pushes (read-only) pointer to operand value.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushPointerToBoundedIUniform">
            <summary>
            Pushes (read-only) pointer to a compound with a bounded length.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushIsTypedPointer(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Pushes a check whether a pointer is typed.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushPointerToStaticField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes pointer to a static field.
            </summary>
            <param name="staticField"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushPointerToInstanceFieldMap(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes pointer to a instance field map.
            </summary>
            <param name="instanceField"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushPointerToArgument(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Pushes pointer to argument.
            </summary>
            <param name="parameter"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushPointerToLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Pushes pointer to local variable.
            </summary>
            <param name="local"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushPointerToStackTop">
            <summary>
            Pushes pointer to stack top;
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Pushes the type.
            </summary>
            <param name="type"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushTypeReference(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference)">
            <summary>
            Pushes the type reference.
            </summary>
            <param name="type"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushMethod(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Pushes the method.
            </summary>
            <param name="method"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Fill">
            <summary>
            Pushes a map filled with the same element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Fuse">
            <summary>
            Updates a map by copying a range from another map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Move">
            <summary>
            Moves all indices of a map by an offset
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Update">
            <summary>
            Updates a map with a key-value pair.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.PushSnippet(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Pushes an undefined value.
            </summary>
            <param name="type"></param>
            <param name="text"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Unary(Microsoft.ExtendedReflection.Metadata.UnaryOperator)">
            <summary>
            Performs a unary operation.
            </summary>
            <param name="operator">The operator.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.LogicalNot">
            <summary>
            Performs a logical negation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Binary(Microsoft.ExtendedReflection.Metadata.BinaryOperator)">
            <summary>
            Performs a binary operation.
            </summary>
            <param name="operator"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.IsAssignable">
            <summary>
            Checks whether the first operand is a type whose values are assignable to the second operand type.
            </summary>
            <remarks>
            The result is a boolean.
            </remarks>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.MdIndex(System.Int32)">
            <summary>
            Turns a list of integers into an md-index.
            </summary>
            <param name="rank"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Select(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Selects from a map at a given index.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.SelectObjectProperty(Microsoft.ExtendedReflection.Interpretation.ObjectProperty)">
            <summary>
            Selects an object property.
            </summary>
            <param name="objectProperty"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.SelectField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a field of an object or a struct.
            </summary>
            <param name="instanceField"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.SelectMethod(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Selects a method from the vtable of an object.
            </summary>
            <param name="virtualMethod"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.SelectArrayElementType">
            <summary>
            Selects the element type of an array type.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.SelectBoxValueType">
            <summary>
            Selects the value type of a box type.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.SelectPointerToElement">
            <summary>
            Selects a pointer to an element given the base address of a compound and an index into a numbered element of the compound.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.SelectPointerToOffset(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Selects a pointer to an element given the base address of a compound and an offset measured in the size of the given element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.SelectPointerToStructField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a pointer to a field given the address of a struct.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.SelectPointerToObjectField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a pointer to a field given an object reference.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.New(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Creates a new object by calling the specified constructor.
            </summary>
            <param name="constructor">The constructor.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Box(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Creates a new box
            </summary>
            <param name="boxedValueType">Type of the boxed value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.NewSzArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Creates a new sz array, whose length is taken from the stack.
            </summary>
            <param name="elementType">Type of the sz-array elements.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.NewMdArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Int32)">
            <summary>
            Creates a new md array. Pairs of lowerbound and length will be taken from the stack.
            </summary>
            <param name="elementType">Type of the md-array elements.</param>
            <param name="rank">The rank.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.NewSzArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Int32)">
            <summary>
            Creates a new sz array, with a fixed number of elements taken from the stack.
            </summary>
            <param name="elementType">Type of the sz-array elements.</param>
            <param name="length">The length.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Callstatic(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Callinstance(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Callvirt(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Callvirts the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.IfThenElse">
            <summary>
            Conditional.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.ShortCircuitAnd">
            <summary>
            Logical and.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.LoadIndirect(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Loads a value from an address. This
            creates a statement.
            </summary>
            <param name="elementLayout">The element layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.IsInst(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Checks whether the reference on the stack is assignable to the specified reference type.
            </summary>
            <param name="referenceType">Type of the reference.</param>
            <returns></returns>
            <remarks>
            The result is a reference type.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.UnboxAny(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Unboxes a boxed value. This
            creates a statement.
            </summary>
            <param name="elementLayout">The element layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Statement">
            <summary>
            Turns the current expression into a statement.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Return(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Turns the current expression into a return-statement.
            </summary>
            <param name="type">type of returned value; optional</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Return">
            <summary>
            Return statement for method with no return value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Throw">
            <summary>
            Turns the current expression into a throw-statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.StoreIndirect(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Stores the expression to an address. This
            creates a statement.
            </summary>
            <param name="elementLayout">The element layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Store(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Stores the expression to the specified local. This 
            creates a statement.
            </summary>
            <param name="local">The local.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Store(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Stores the expression to the specified parameter. This 
            creates a statement.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Storestatic(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Stores the expression to the specified field. This
            creates a statement.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Storeinstance(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Stores the expression to the specified field. This
            creates a statement.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.StoreArrayElement(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Stores the expression to the specified sz or md array element. This
            creates a statement.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.DeclareLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Declares the local.
            </summary>
            <param name="type">The type.</param>
            <param name="preferredName">The preferred name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginDeclareLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Begins to declare a local variable.
            </summary>
            <param name="type">type of local variable</param>
            <param name="preferredName">The preferred name.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndDeclareLocal(System.Boolean,System.Boolean)">
            <summary>
            Ends to declare a local variable.
            </summary>
            <param name="strict">Whether a strictly or lazily initialized variable should be created</param>
            <param name="mayChangeType">whether the code writer may change the type</param>
            <returns>new local variable</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginIfThenElse">
            <summary>
            Takes a conditional expression, and starts an if-then-else statement.
            </summary>
            <remarks>
            The protocol of an if-then-else statement is: 
            <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginIfThenElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndIfThenElse"/>.
            or
            <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginIfThenElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndIfThenElse"/>.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginThen">
            <summary>
            Marks beginning of then-block; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndThen">
            <summary>
            Marks end of then-block; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginElse">
            <summary>
            Marks beginning of else-block; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndElse">
            <summary>
            Marks end of else-block; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndIfThenElse">
            <summary>
            Marks end of if-then-else
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginTryCatchFinally">
            <summary>
            Starts an exception handling region.
            </summary>
            <remarks>
            The protocol of an eh statement is: 
            <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginTryCatchFinally"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginTry"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndTry"/>; 
            <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginCatch(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndCatch"/>;
            <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginFinally"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndFinally"/>;
            <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndTryCatchFinally"/>;
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginTry">
            <summary>
            Marks the beginning of a 'try' block.<see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndTry">
            <summary>
            Marks the end of a 'try' block.<see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginCatch(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Marks the beginning of a 'catch' block.<see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <param name="declareLocal">Whether to store the exception in a newly declared local.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndCatch">
            <summary>
            Marks the end of a 'catch' block.<see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginFinally">
            <summary>
            Marks the beginning of a 'finally' block.<see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndFinally">
            <summary>
            Marks the end of a 'finally' block.<see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndTryCatchFinally">
            <summary>
            Marks the beginning of a eh region.<see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginUsingScope">
            <summary>
            Starts a 'using' region
            </summary>
            <remarks>
            The protocol of an eh statement is: 
            <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginUsingScope"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginUsingScope"/>; 
            ... 
            <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndUsingDeclaration(System.Boolean,System.Boolean)"/>; 
            <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginUsing"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndUsing"/>;
            <see cref="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndUsingScope"/>;
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.UsingDeclaration(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Marks a using header without local
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginUsingDeclaration(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Marks the begining of the using header
            </summary>
            <param name="type">The type.</param>
            <param name="preferredName">Name of the preferred.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndUsingDeclaration(System.Boolean,System.Boolean)">
            <summary>
            Marks the end of the using declaration.
            </summary>
            <param name="strict">if set to <c>true</c> [strict].</param>
            <param name="mayChangeType">if set to <c>true</c> [may change type].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginUsing">
            <summary>
            Matks the beginning of the using body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndUsing">
            <summary>
            Marks the end of the using body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndUsingScope">
            <summary>
            Marks the end of using scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.BeginCommentBlock">
            <summary>
            Marks the begin of the comment block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.EndCommentBlock">
            <summary>
            Marks the end of the comment block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.Comment(System.String)">
            <summary>
            Writes a line comment
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.UsingNamespaces">
            <summary>
            Gets the list of imported namespace
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter.IsPure">
            <summary>
            Whether the statements and expressions written so far can be represented as proper code
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.#ctor(Microsoft.ExtendedReflection.Emit.ILanguageManager,System.IO.TextWriter,Microsoft.ExtendedReflection.Emit.IMethodBodyWriterContext,Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Emit.LanguageNamespaceMode,System.Int32)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="languageManager">The language manager.</param>
            <param name="textWriter">The text writer.</param>
            <param name="context">The context.</param>
            <param name="visibilityContext">the context (if any) relative to which the expression may directly reference other members without using reflection</param>
            <param name="namespaceMode">The namespace mode.</param>
            <param name="lineWidth">Width of the line.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.SetBaseCtorCall(Microsoft.ExtendedReflection.Emit.FSharp.FSharpFormattedExpression)">
            <summary>
            Assign the base ctor call
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.CreateBody">
            <summary>
            Creates the body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.MakeUnsafe">
            <summary>
            Makes this body unsafe.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginDeclareLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Begins to declare a local variable.
            </summary>
            <param name="type">The type.</param>
            <param name="preferredName">The preferred name.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndDeclareLocal(System.Boolean,System.Boolean)">
            <summary>
            Ends to declare a local variable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.DeclareLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Declares the local.
            </summary>
            <param name="type">The type.</param>
            <param name="preferredName">The preferred name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.StoreIndirect(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Stores the expression to an address. This
            creates a statement.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Store(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Stores the expression to the specified local. This 
            creates a statement.
            </summary>
            <param name="local">The local.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Store(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Stores the expression to the specified parameter. This 
            creates a statement.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Storeinstance(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Stores the expression to the specified field. This
            creates a statement.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Storestatic(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Stores the expression to the specified field. This
            creates a statement.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.StoreArrayElement(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Stores the expression to the specified array element. This
            creates a statement.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginIfThenElse">
            <summary>
            Takes a conditional expression, and starts an if-then-else statement.
            </summary>
            <remarks>
            The protocol of an if-then-else statement is: 
            <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginIfThenElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndIfThenElse"/>.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginThen">
            <summary>
            Marks beginning of then-block; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndThen">
            <summary>
            Marks end of then-block; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginElse">
            <summary>
            Marks beginning of else-block; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndElse">
            <summary>
            Marks end of else-block; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndIfThenElse">
            <summary>
            Marks end of if-then-else
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginTryCatchFinally">
            <summary>
            Takes a conditional expression, and starts an if-then-else statement.
            </summary>
            <remarks>
            The protocol of an if-then-else statement is: 
            <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginIfThenElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndIfThenElse"/>.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginTry">
            <summary>
            Marks the beginning of a 'try' block.<see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndTry">
            <summary>
            Marks the end of a 'try' block.<see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginCatch(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Marks the beginning of a 'catch' block.<see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <param name="declareLocal">Whether to store the exception in a newly declared local.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndCatch">
            <summary>
            Marks the end of a 'catch' block.<see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginFinally">
            <summary>
            Marks the beginning of a 'finally' block.<see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndFinally">
            <summary>
            Marks the end of a 'finally' block.<see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndTryCatchFinally">
            <summary>
            Marks the beginning of a eh region.<see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginUsingScope">
            <summary>
            Starts a 'using' region
            </summary>
            <returns></returns>
            <remarks>
            The protocol of an eh statement is:
            <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginUsingScope"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndUsingDeclaration(System.Boolean,System.Boolean)"/>;
            ...
            <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndUsingDeclaration(System.Boolean,System.Boolean)"/>;
            <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginUsing"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndUsing"/>;
            <see cref="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndUsingScope"/>;
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginUsingDeclaration(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Marks the begining of the using header
            </summary>
            <param name="type">The type.</param>
            <param name="preferredName">Name of the preferred.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndUsingDeclaration(System.Boolean,System.Boolean)">
            <summary>
            Marks the end of the using declaration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.UsingDeclaration(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Marks a using header without local
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginUsing">
            <summary>
            Matks the beginning of the using body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndUsing">
            <summary>
            Marks the end of the using body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndUsingScope">
            <summary>
            Marks the end of using scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Throw">
            <summary>
            Turns the current expression into a throw-statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Statement">
            <summary>
            Turns the current expression into a statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Return(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Turns the current expression into a return-statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Return">
            <summary>
            Return statement for method with no return value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Push(System.Byte)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Push(System.Int16)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Fill">
            <summary>
            Pushes a map filled with the same element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Fuse">
            <summary>
            Updates a map by copying a range from another map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Move">
            <summary>
            Moves all indices of a map by an offset
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Update">
            <summary>
            Updates a map with a key-value pair.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushSnippet(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Pushes an undefined value
            </summary>
            <param name="type"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushPointerToNowhere">
            <summary>
            Pushes pointer to nowhere.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushPointerToValue">
            <summary>
            Pushes (read-only) pointer to operand value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushPointerToBoundedIUniform">
            <summary>
            Pushes (read-only) pointer to a compound with a bounded length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushIsTypedPointer(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Pushes a check whether a pointer is typed.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushPointerToStaticField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes pointer to a static field.
            </summary>
            <param name="staticField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushPointerToInstanceFieldMap(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes pointer to a instance field map.
            </summary>
            <param name="instanceField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushPointerToArgument(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Pushes pointer to argument.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushPointerToLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Pushes pointer to local variable.
            </summary>
            <param name="local"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushPointerToStackTop">
            <summary>
            Pushes pointer to stack top;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.SelectMethod(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Selects a method from the vtable of an object.
            </summary>
            <param name="virtualMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.SelectArrayElementType">
            <summary>
            Selects the element type of an array type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.SelectBoxValueType">
            <summary>
            Selects the value type of a box type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.SelectPointerToElement">
            <summary>
            Selects a pointer to an element given the base address of a compound and an index into a numbered element of the compound.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.SelectPointerToOffset(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Selects a pointer to an element given the base address of a compound and an offset measured in the size of the given element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.SelectPointerToStructField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a pointer to a field given the address of a struct.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.SelectPointerToObjectField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a pointer to a field given an object reference.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Pushes the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushTypeReference(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference)">
            <summary>
            Pushes the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushMethod(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Pushes the method.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Push(System.Int32)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Push(System.Int64)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Push(System.Single)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Push(System.Double)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Push(System.Decimal)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushNull">
            <summary>
            Pushes a null value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Push(System.String)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Pushes the specified local.
            </summary>
            <param name="local">The local.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Pushes the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.PushDefault(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Pushes the default value of a type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.IsInst(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Checks whether the reference on the stack is assignable to the specified reference type.
            </summary>
            <param name="referenceType">Type of the reference.</param>
            <returns></returns>
            <remarks>
            The result is a reference type.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.LoadIndirect(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Loads a value from an address. This
            creates a statement.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.UnboxAny(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Loads a value from an address. This
            creates a statement.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.BeginCommentBlock">
            <summary>
            Marks the begin of the comment block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.EndCommentBlock">
            <summary>
            Marks the end of the comment block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Comment(System.String)">
            <summary>
            Writes a line comment
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Unary(Microsoft.ExtendedReflection.Metadata.UnaryOperator)">
            <summary>
            Performs a unary operation.
            </summary>
            <param name="operator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.LogicalNot">
            <summary>
            Performs a logical negation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Binary(Microsoft.ExtendedReflection.Metadata.BinaryOperator)">
            <summary>
            Performs a binary operation.
            </summary>
            <param name="operator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.IsAssignable">
            <summary>
            Checks whether the first operand is a type whose values are assignable to the second operand type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.SelectField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a field of an object or a struct, given an object reference of a struct value.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.MdIndex(System.Int32)">
            <summary>
            Turns a list of integers into an md-index.
            </summary>
            <param name="rank"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Select(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Selects from a map at a given index.
            </summary>
            <param name="indexType"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.SelectObjectProperty(Microsoft.ExtendedReflection.Interpretation.ObjectProperty)">
            <summary>
            Selects an object property.
            </summary>
            <param name="objectProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes the field.
            </summary>
            <param name="staticField">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.NewSzArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Creates a new sz-array.
            </summary>
            <param name="elementType">Type of the sz-array elements.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Box(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Creates a new box.
            </summary>
            <param name="boxedValueType">Type of the boxed value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.NewSzArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Int32)">
            <summary>
            Creates a new sz-array.
            </summary>
            <param name="elementType">Type of the sz-array elements.</param>
            <param name="length">The length.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.NewMdArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Int32)">
            <summary>
            Creates a new md array. Pairs of lowerbound and length will be taken from the stack.
            </summary>
            <param name="elementType">Type of the md-array elements.</param>
            <param name="rank">The rank.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.New(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Creates a new object by calling the specified constructor.
            </summary>
            <param name="constructor">The constructor.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Callstatic(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Callinstance(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Callvirt(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Callvirts the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.IfThenElse">
            <summary>
            Conditional.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.ShortCircuitAnd">
            <summary>
            Logical and.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.IsPure">
            <summary>
            Whether only syntactically correct F# code has been created
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.FSharp.FSharpMethodBodyWriter.Unsafe">
            <summary>
            Whether unsafe code has been created
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal">
            <summary>
            Interface describing the meta-data of a local variable;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) variable , but can be a variable under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal.Name">
            <summary>
            Name, if available, or <code>null</code>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.ILanguageHelpersProvider">
            <summary>
            Interface to provide auxiliary helper methods
            to language emitter.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ILanguageHelpersProvider.ByteToBooleanMethod">
            <summary>
            Optional; gets a static helper method that takes a byte and returns a boolean; can be null.
            </summary>
            <value>The byte to boolean method.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ILanguageHelpersProvider.IsInstMethod">
            <summary>
            Optional; gets a generic static helper method that takes an object, and tries to cast it to the generic parameter type; returns null if cast fails.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.ICodeFixSource">
            <summary>
            A source of CodeFix
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.ICodeFixSource.TryGetCodeFix(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Feedback.CodeFix}@)">
            <summary>
            Tries to get the code fixes
            </summary>
            <param name="fixes"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.ICoveredBlockSource">
            <summary>
            A source of covered block information
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.ICoveredBlockSource.TryGetCoveredBlocks(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the covered blocks data
            </summary>
            <param name="deltaCovered"></param>
            <param name="deltaTotal"></param>
            <param name="absCovered"></param>
            <param name="absTotal"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.INamedValueSource">
            <summary>
            A source of <see cref="T:Microsoft.ExtendedReflection.Feedback.NamedValue"/> instance
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.INamedValueSource.TryGetNamedValues(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Feedback.NamedValue}@)">
            <summary>
            Tries to get the named values if any
            </summary>
            <param name="namedValues"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.ISourceCodeSource">
            <summary>
            A component that renders itself to code
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.ISourceCodeSource.TryGetSourceCode(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage},System.String@)">
            <summary>
            A compent that returns source code
            </summary>
            <param name="languageFactory"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.IUrlSource">
            <summary>
            Embeds a link to a document
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IUrlSource.TryGetUrl(System.String@)">
            <summary>
            Tries to get the URL.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.LdrBoard.LdrBoardObj.UsersId">
            <remarks/>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.LdrBoard.LdrBoardObj.AppsName">
            <remarks/>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.LdrBoard.LdrBoardObj.AppsId">
            <remarks/>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.LdrBoard.LdrBoardObj.FeaturesId">
            <remarks/>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.LdrBoard.LdrBoardObj.UserPoints">
            <remarks/>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.LeaderBoard">
            <summary>
            A facade for the http://codebox/leaderboard service
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.LeaderBoard.PingAsync(System.Int32,System.Int32,System.Int32,System.String[])">
            <summary>
            Asynchronously pings the service and increments the users points.
            </summary>
            <param name="appID">registered AppID</param>
            <param name="featureID">registered FeatureID</param>
            <param name="points"></param>
            <param name="excludedUsers">users that should not log data</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.LeaderBoard.Service.#ctor">
            <remarks/>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.LeaderBoard.Service.BeginInsertIntoLeaderBoard(Microsoft.ExtendedReflection.Feedback.LdrBoard.LdrBoardObj,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.LeaderBoard.Service.InsertIntoLeaderBoardAsync(Microsoft.ExtendedReflection.Feedback.LdrBoard.LdrBoardObj)">
            <remarks/>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.LeaderBoard.Service.InsertIntoLeaderBoardAsync(Microsoft.ExtendedReflection.Feedback.LdrBoard.LdrBoardObj,System.Object)">
            <remarks/>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.NamedValue">
            <summary>
            A class that represents a frozen value
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.NamedValue.Name">
            <summary>
            Name of generated value
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.NamedValue.Value">
            <summary>
            String representation of generated value
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.NamedValue.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.NamedValue"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.NamedValue.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.NamedValue.FromLoggedXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates a generated value from previously logged xml.
            </summary>
            <param name="navigator">The navigator.</param>
            <exception cref="T:System.InvalidOperationException">when an error occurrs</exception>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.NamedValue.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes to an xml writer
            </summary>
            <param name="writer"></param>
            <param name="elementName"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.NamedValue.Equals(Microsoft.ExtendedReflection.Feedback.NamedValue)">
            <summary>
            Gets a value indicating whether the name value is equal to other
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.NamedValue.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.NamedValueCollection">
            <summary>
            A container for named values
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.NamedValueCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.NamedValueCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.NamedValueCollection.AddValue(System.String,System.String)">
            <summary>
            Adds the value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.NamedValueCollection.TryGetValue(System.String,Microsoft.ExtendedReflection.Feedback.NamedValue@)">
            <summary>
            Tries to query the value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.NamedValueCollection.WriteValues(System.IO.TextWriter)">
            <summary>
            Writes the values.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.NamedValueCollection.HasValues">
            <summary>
            Gets a value indicating whether any values are stored in the collection
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.NamedValueCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.NamedValueCollection.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.NamedValueTable`1">
            <summary>
            A table of generated values
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.NamedValueTable`1.Add(`0)">
            <summary>
            Adds the source and it's generated values
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.NamedValueTable`1.GetValues">
            <summary>
            Gets the generated values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.NamedValueTable`1.GetValues(`0)">
            <summary>
            Gets the generated values of the given source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.NamedValueTable`1.Freeze">
            <summary>
            While frozen, the properties of this class are constant; incoming events are queued until the return value is disposed.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.NamedValueTable`1.Names">
            <summary>
            Gets the current list of value names
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Feedback.NamedValueTable`1.NameAdded">
            <summary>
            Raised when new value names were added to the set
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Feedback.NamedValueTable`1.ValuesAdded">
            <summary>
            Raised when a new set of values is added to the table
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsBuilder">
            <summary>
            An mutable class containing instrumentation settings.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsBuilder.#ctor">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsBuilder.AddAssembly(System.String,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds the assembly
            </summary>
            <param name="assemblyName"></param>
            <param name="level">instrumentation level</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsBuilder.AddNamespace(System.String,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds the namespace
            </summary>
            <param name="namespace"></param>
            <param name="level">instrumentation level</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsBuilder.AddType(System.String,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds the type
            </summary>
            <param name="type"></param>
            <param name="level">instrumentation level</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsBuilder.AddSubstitionAssembly(System.String)">
            <summary>
            Adds a substitution assembly
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsBuilder.AddFullTrustAssembly(System.String)">
            <summary>
            Adds a full trust assembly
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsBuilder.SerializableName">
            <summary>
            Converts to a serializable name
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsBuilder.TrackGCAddresses">
            <summary>
            Gets or sets the GC addresses tracking
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsBuilder.Flags">
            <summary>
            Gets or sets the flags
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsBuilder.Bitness">
            <summary>
            Gets or sets the bitness
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsBuilder.Diagnostic">
            <summary>
            Gets or sets the diagnostic flag
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsBuilder.SilverlightVersion">
            <summary>
            Gets or sets the silverlight version (v3.0, v4.0)
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationAssemblyProvider">
            <summary>
            A provider for assemblies that contain assembly settings
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationAssemblyProvider.GetInstrumentationAssemblies(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Tries to get the instrumentation settings
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationAssemblyReflector">
            <summary>
            A provider that inspects an assembly and returns additional assembly instruction
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationAssemblyReflector.GetInstrumentationAssemblies(Microsoft.ExtendedReflection.ComponentModel.IComponent,Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Tries to get the instrumentation settings
            </summary>
            <param name="host"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager">
            <summary>
            A manager that enables to build an instrumentation configuration
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.GetSettings">
            <summary>
            Gets a snapshort of the current settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.TryReflectAssembly(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Reflect instrumentation options from attributes on the assembly
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.AddSettings(Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName)">
            <summary>
            Merges the settings into the manager settings
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.EnableTrackGCAddresses">
            <summary>
            Enables the tracking of garbage-collected objects.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.EnableDiagnostic">
            <summary>
            Enables diagnostic
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.TrySetBitness(Microsoft.ExtendedReflection.Monitoring.Bitness)">
            <summary>
            Tries to specify the process bitness
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.TrySetSilverlightVersion(System.String)">
            <summary>
            Tries to set the Silverlight version
            </summary>
            <param name="silverlightVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.AddInstrumentationFlags(Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags)">
            <summary>
            Adds the instrumentation flags.
            </summary>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.AddAssembly(System.String,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds an assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="instrumentationLevel">The instrumentation level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.AddAssembly(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds an assembly.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="instrumentationLevel">The instrumentation level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.AddAssembly(Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds an assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="instrumentationLevel">The instrumentation level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.AddAssembly(System.Reflection.AssemblyName,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds an assembly.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="instrumentationLevel">The instrumentation level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.AddFullTrustAssembly(System.String)">
            <summary>
            Adds a full trust assembly.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.AddNamespace(System.String,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds a namespace.
            </summary>
            <param name="namespace">The namespace.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.AddSubstitutionAssembly(System.String)">
            <summary>
            Adds an substitution assembly. Must be fully qualified file name.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.AddType(System.String,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds a type.
            </summary>
            <param name="type">The type.</param>
            <param name="instrumentationLevel">The instrumentation level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationManager.AddType(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds a type.
            </summary>
            <param name="typeDefinition">The type definition.</param>
            <param name="instrumentationLevel">The instrumentation level.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationProvider">
            <summary>
            A provider for instrumentation settings
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationProvider.TryGetInstrumentationSettings(Microsoft.ExtendedReflection.ComponentModel.IComponent,Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName@)">
            <summary>
            Tries to get the instrumentation settings
            </summary>
            <param name="host"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationTarget">
            <summary>
            Detailed instrumentation info
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationTarget.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationTarget.Level">
            <summary>
            Gets the instrumentation level.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.IInstrumentationTarget.SerializableName">
            <summary>
            Gets the serializable name.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.TryAddAssemblyReflector(Microsoft.ExtendedReflection.Instrumentation.IInstrumentationAssemblyReflector)">
            <summary>
            Gets the assembly reflectors.
            </summary>
            <param name="assemblyReflector"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.GetSettings">
            <summary>
            Gets a snapshot of the current settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.TryReflectAssembly(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Reflect instrumentation options from attributes on the assembly
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.AddSettings(Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName)">
            <summary>
            Merges the settings into the manager settings
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.AddInstrumentationFlags(Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags)">
            <summary>
            Adds the instrumentation flags.
            </summary>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.EnableTrackGCAddresses">
            <summary>
            Enables the tracking of garbage-collected objects.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.EnableDiagnostic">
            <summary>
            Enables diagnostic
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.TrySetSilverlightVersion(System.String)">
            <summary>
            Tries to set the Silverlight version
            </summary>
            <param name="silverlightVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.TrySetBitness(Microsoft.ExtendedReflection.Monitoring.Bitness)">
            <summary>
            Enables  an x86 process bitness
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.AddSubstitutionAssembly(System.String)">
            <summary>
            Adds an substitution assembly. Must be fully qualified file name.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.AddFullTrustAssembly(System.String)">
            <summary>
            Adds a full trust assembly.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.AddAssembly(System.Reflection.AssemblyName,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds an assembly.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="instrumentationLevel">The instrumentation level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.AddAssembly(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds an assembly.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="instrumentationLevel">The instrumentation level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.AddAssembly(Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds an assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="instrumentationLevel">The instrumentation level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.AddAssembly(System.String,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds an assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="instrumentationLevel">The instrumentation level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.AddNamespace(System.String,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds a namespace.
            </summary>
            <param name="namespace">The namespace.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.AddType(System.Type,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds a type.
            </summary>
            <param name="type">The type.</param>
            <param name="instrumentationLevel">The instrumentation level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.AddType(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds a type.
            </summary>
            <param name="typeDefinition">The type definition.</param>
            <param name="instrumentationLevel">The instrumentation level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.AddType(System.String,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Adds a type.
            </summary>
            <param name="type">The type.</param>
            <param name="instrumentationLevel">The instrumentation level.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.AssemblyReflectors">
            <summary>
            Gets the assembly reflectors
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.InstrumentationInfo.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.InstrumentationInfo"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.InstrumentationInfo.UpdateLevel(Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Updates the level.
            </summary>
            <param name="level">The level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.InstrumentationInfo.Matches(Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Checks whether this instrumentation info has the requested instrumentation level.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.InstrumentationInfo.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.InstrumentationInfo.Level">
            <summary>
            Gets the instrumentation level.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationManager.InstrumentationInfo.SerializableName">
            <summary>
            Gets the serializable name
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Instrumentation.InstrumentationProviderBase`1">
            <summary>
            Abstract base class for instyrumentation providers
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationProviderBase`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the provider
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationProviderBase`1.TryGetInstrumentationSettings(Microsoft.ExtendedReflection.ComponentModel.IComponent,Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName@)">
            <summary>
            Tries to get the settings.
            </summary>
            <param name="host"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationProviderBase`1.Owner">
            <summary>
            Gets the owner
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionEngine">
            <summary>
            A specialized engine to reflect instrumentation options
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionEngine.#ctor(Microsoft.ExtendedReflection.ComponentModel.IContainer,Microsoft.ExtendedReflection.Utilities.AssemblyResolver,Microsoft.ExtendedReflection.ComponentModel.EngineOptions)">
            <summary>
            Initialies a new instance of the engine
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionEngine.AddComponents">
            <summary>
            Adds the required components
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionEngine.TryReflectInstrumentation(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName[],System.String[],Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName@)">
            <summary>
            Tries to reflect the instrumentation settings from a given assembly
            </summary>
            <param name="assemblyFile"></param>
            <param name="_instrumentationProviderAssemblies"></param>
            <param name="_searchDirectories"></param>
            <param name="instrumentationSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionEngine.Driver.GetInstrumentationSettings">
            <summary>
            Tries to get the instrumentation settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionEngine.Driver.TryReflectInstrumentation(Microsoft.ExtendedReflection.Utilities.AssemblyResolver,System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName[])">
            <summary>
            Tries to reflect the instrumentation options
            </summary>
            <param name="resolver"></param>
            <param name="assemblyFullPath"></param>
            <param name="_instrumentationProviderAssemblies"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionResult">
            <summary>
            Outcomes when reflecting an assembly
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionResult.Unknown">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionResult.Success">
            <summary>
            Successfully loaded the assembly
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionResult.AssemblyDoesNotExist">
            <summary>
            Assembly file location not found
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionResult.CannotLoadAssembly">
            <summary>
            Failed to load the assembly
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionResult.CannotReflectAssembly">
            <summary>
            Failed to reflect over the assembly
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionResult.MustTargetX86">
            <summary>
            The x86 paltform should be targeted
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionResult.MustTargetX64OrItanium">
            <summary>
            The x64 or Itanium platform should be targeted
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionResult.ExternalProfilerRegistered">
            <summary>
            An external profilter is already registered
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName">
            <summary>
            An immutable class containing instrumentation settings.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.#ctor(Microsoft.ExtendedReflection.Instrumentation.InstrumentationTargetName[],Microsoft.ExtendedReflection.Instrumentation.InstrumentationTargetName[],Microsoft.ExtendedReflection.Instrumentation.InstrumentationTargetName[],System.String[],System.String[],System.Boolean,Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags,Microsoft.ExtendedReflection.Monitoring.Bitness,System.Boolean,System.String)">
            <summary>
            Initializea a new instance of the settings.
            </summary>
            <param name="_assemblies"></param>
            <param name="_namespaces"></param>
            <param name="_types"></param>
            <param name="_substitutionAssemblies"></param>
            <param name="_fullTrustAssemblies"></param>
            <param name="trackGCAddresses"></param>
            <param name="flags"></param>
            <param name="bitness"></param>
            <param name="diagnostic"></param>
            <param name="_silverlightVersion"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.TryGetSilverlightVersion(System.String@)">
            <summary>
            Tries to get the silverlight version if any
            </summary>
            <param name="silverlightVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.GetAssemblies(Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Gets the assemblies with the given instrumentation level.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.GetNamespaces(Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Gets the namespaces with the given instrumentation level.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.GetTypes(Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Gets the types with the given instrumentation level.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.Dump(Microsoft.ExtendedReflection.Logging.IEventLog)">
            <summary>
            Logs the instrumentation.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.Assemblies">
            <summary>
            Gets the assemblies with instrumentation info.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.Namespaces">
            <summary>
            Gets the namespaces with instrumentation info.
            </summary>
            <value>The namespaces.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.Types">
            <summary>
            Gets the types with instrumentation info.
            </summary>
            <value>The types.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.SubstitutionAssemblies">
            <summary>
            Gets the substitution assemblies. Must be fully qualified file names.
            </summary>
            <value>The substitution assemblies.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.FullTrustAssemblies">
            <summary>
            Gets the full trust assemblies.
            </summary>
            <value>The full trust assemblies.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.TrackGCAddresses">
            <summary>
            Gets a value indicating whether to track garbage-collected objects.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.InstrumentationFlags">
            <summary>
            Gets the instrumentation flags.
            </summary>
            <value>The instrumentation flags.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.Bitness">
            <summary>
            Gets a value indicating if the process bitness
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName.Diagnostic">
            <summary>
            Gets a value indicatig if diagnostic mode should be enabled
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Instrumentation.InstrumentationTargetName">
            <summary>
            A serializable instrumentation target
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Instrumentation.InstrumentationTargetName.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.InstrumentationLevel)">
            <summary>
            Initializes a new instance of the target
            </summary>
            <param name="target"></param>
            <param name="level"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationTargetName.Target">
            <summary>
            Gets the target
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Instrumentation.InstrumentationTargetName.Level">
            <summary>
            Gets the level
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IPathConditionBuilderEventSource">
            <summary>
            Event source for path condition builder
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IPathConditionBuilderEventSource.EnterFrameHandler">
            <summary>
            Occurs when a frame is entered.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IPathConditionBuilderEventSource.LeaveFrameHandler">
            <summary>
            Occurs when a frame is left.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IPathConditionBuilderEventSource.ReachedHandler">
            <summary>
            Occurs when a code position is reached.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IPathConditionBuilderEventSource.NextNodeHandler">
            <summary>
            Occurs when a condition that involves the inputs induces a transition to the next execution node.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderNextNodeEventArgs">
            <summary>
            Event args
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderEventArgs">
            <summary>
            Base class for path condition builder event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderEventArgs.PathConditionBuilder">
            <summary>
            The associated path condition builder.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderEventArgs"/> class.
            </summary>
            <param name="pathConditionBuilder">The path condition builder.</param>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderNextNodeEventArgs.Node">
            <summary>
            The node represented the added path condition.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderNextNodeEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder,Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="pathConditionBuilder"></param>
            <param name="node"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderFrameEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderFrameEventArgs.Frame">
            <summary>
            Frame
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderFrameEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder,Microsoft.ExtendedReflection.Interpretation.States.IFrame)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="pathConditionBuilder"></param>
            <param name="frame"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderMonitor">
            <summary>
            Default implementation of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IPathConditionBuilderEventSource"/>.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderMonitor.EnterFrameHandler">
            <summary>
            Occurs when a frame is entered.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderMonitor.LeaveFrameHandler">
            <summary>
            Occurs when a frame is left.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderMonitor.ReachedHandler">
            <summary>
            Occurs when a code position is reached.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderMonitor.NextNodeHandler">
            <summary>
            Occurs when a path condition is added.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderReachedEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderReachedEventArgs.Method">
            <summary>
            The reached method.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderReachedEventArgs.CodeLabel">
            <summary>
            The code label reached within <see cref="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderReachedEventArgs.Method"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.PathConditionBuilderReachedEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder,Microsoft.ExtendedReflection.Metadata.Method,System.Int32)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="pathConditionBuilder"></param>
            <param name="Method"></param>
            <param name="codeLabel"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunctionKind">
            <summary>
            Kinds of supported string functions
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunctionKind.Contains">
            <summary>
            Contains: Ref x Ref -> I1
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunctionKind.IndexOf">
            <summary>
            IndexOf: Ref x Ref x I4 x I4 -> I4
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunctionKind.LastIndexOf">
            <summary>
            LastIndexOf: Ref x Ref x I4 x I4 -> I4
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunctionKind.Equality">
            <summary>
            Equality: Ref x Ref -> I1
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunctionKind.GetHashCode">
            <summary>
            GetHashCode: Ref -> I4
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunctionKind.IsMatch">
            <summary>
            IsMatch: String x String x I4 -> I1
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction">
            <summary>
            Base class for functions representing an aspect of a string operation
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Kind">
            <summary>
            Kind of string function
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.IsProperStackBoolean(System.Boolean[])">
            <summary>
            Computes whether the application of this function yields zero or one in <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>.
            </summary>
            <param name="argumentsAreProperStackBooleans"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.IsStatic">
            <summary>
            For pretty-printing purposes
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.ShortName">
            <summary>
            Name of this function
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.ResultLayout">
            <summary>
            The result layout of an application of this function.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.ParameterLayouts">
            <summary>
            Instance methods/constructors have the receiver as the first parameter.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods">
            <summary>
            String functions for particular methods
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.Substring">
            <summary>
            Substring
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.Substring.Method">
            <summary>
            The substring method
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.Remove">
            <summary>
            Remove
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.Remove.Method">
            <summary>
            The remove method
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.IndexOf">
            <summary>
            IndexOf
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.IndexOf.Method">
            <summary>
            The IndexOf method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.IndexOf.Int32Result">
            <summary>
            The integer result of a IndexOf call
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.LastIndexOf">
            <summary>
            LastIndexOf
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.LastIndexOf.Method">
            <summary>
            The LastIndexOf method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.LastIndexOf.Int32Result">
            <summary>
            The integer result of a LastIndexOf call
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.Concat">
            <summary>
            Concat
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.Concat.Method">
            <summary>
            The concat method
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.Equality">
            <summary>
            Equality
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.Equality.Method">
            <summary>
            The Equality method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.Equality.BooleanResult">
            <summary>
            The boolean result of an Equality operation
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.GetHashCode">
            <summary>
            GetHashCode
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.GetHashCode.Method">
            <summary>
            The GetHashCode method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.GetHashCode.Int32Result">
            <summary>
            The I4 result of an GetHashCode operation
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.Contains">
            <summary>
            Contains
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.Contains.Method">
            <summary>
            The contains method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.Contains.BooleanResult">
            <summary>
            The boolean result of a Contains call
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.IsMatch">
            <summary>
            IsMatch
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.IsMatch.Method">
            <summary>
            The IsMatch method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MethodInterpretation.StringProviders.StringFunction.Methods.IsMatch.BooleanResult">
            <summary>
            The integer result of a LastIndexOf call
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.R8TermWidener">
            <summary>
            Widens term for numeric operations
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.R8TermWidener.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.R8TermWidener"/> class.
            </summary>
            <param name="termManager">The term manager.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.R8TermWidener.WidenTerm(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Widens the term. Returns null if widening failed.
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.R8TermWidener.Mul(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Widens the result of the operation
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.R8TermWidener.Div(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Widens the result of the operation
            </summary>
            <param name="quotient">The quotient.</param>
            <param name="denominator">The denominator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.R8TermWidener.Add(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Widens the result of the operation
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.R8TermWidener.Sub(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Widens the result of the operation
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.R8TermWidener.Exp(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Widens the result of the operation
            </summary>
            <param name="base">The @base.</param>
            <param name="exponent">The exponent.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.DebugTraceLogger">
            <summary>
            A component that redirects Debug messages to the logger
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DebugTraceLogger.Initialize">
            <summary>
            Initializes this instance. Will be called exactly once.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DebugTraceLogger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.HyperlinkEventArgs">
            <summary>
            A link to a url.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.ITooltipSource">
            <summary>
            A source of tooltip string
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.ITooltipSource.TryGetTooltip(System.String@)">
            <summary>
            Tries to get the tooltip.
            </summary>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.HyperlinkEventArgs.ImageKeyName">
            <summary>
            Gets the default image key name
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.HyperlinkEventArgs.DgmlImageKeyName">
            <summary>
            Gets the graph image key name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.HyperlinkEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.HyperlinkEventArgs"/> class.
            </summary>
            <param name="title"></param>
            <param name="url"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.HyperlinkEventArgs.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the content of the event to Xml
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.HyperlinkEventArgs.FromXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Builds an event args from an xml navigator
            </summary>
            <param name="nav"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.HyperlinkEventArgs.Title">
            <summary>
            Gets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.HyperlinkEventArgs.Url">
            <summary>
            Gets the url.
            </summary>
            <value>The url.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.HyperlinkEventArgs.ImageKey">
            <summary>
            Gets the image key
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ReflectionEventLevel">
            <summary>
            Reflection event level
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ReflectionEventLevel.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ReflectionEventLevel.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ReflectionEvent">
            <summary>
            Reflection event
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ReflectionEvent.#ctor(Microsoft.ExtendedReflection.Logging.ReflectionEventLevel,Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.ReflectionEvent"/> class.
            </summary>
            <param name="level">The level.</param>
            <param name="targetName">Name of the target.</param>
            <param name="attributeTypeName">Name of the attribute type.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ReflectionEvent.TryGetAttributeTypeName(Microsoft.ExtendedReflection.Metadata.Names.TypeName@)">
            <summary>
            Tries to get the name of the attribute type.
            </summary>
            <value>The name of the attribute type.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ReflectionEvent.TryGetCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get a code update.
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ReflectionEvent.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ReflectionEvent.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Deserializes XML to an reflection event.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ReflectionEvent.Equals(Microsoft.ExtendedReflection.Logging.ReflectionEvent)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ReflectionEvent.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ReflectionEvent.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ReflectionEvent.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ReflectionEvent.Level">
            <summary>
            Gets the event level.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ReflectionEvent.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ReflectionEvent.AttributeTypeShortName">
            <summary>
            Gets the short name of the attribute type.
            </summary>
            <value>The short name of the attribute type.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ReflectionEvent.TargetName">
            <summary>
            Gets the name of the target.
            </summary>
            <value>The name of the target.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ReflectionEvent.WikiTopic">
            <summary>
            Gets the help topic.
            </summary>
            <value>The help topic.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ReflectionEventEventArgs">
            <summary>
            Reflection event event args
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ReflectionEventEventArgs.#ctor(Microsoft.ExtendedReflection.Logging.ReflectionEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.ReflectionEventEventArgs"/> class.
            </summary>
            <param name="reflectionEvent">The reflection event.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ReflectionEventEventArgs.ReflectionEvent">
            <summary>
            Gets the reflection event.
            </summary>
            <value>The reflection event.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.SourceCoverageEventArgs">
            <summary>
            Source coverage event args
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SourceCoverageEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.SourceCoverageEventArgs"/> class.
            </summary>
            <param name="xmlCoverageFile">The XML coverage file.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.SourceCoverageEventArgs.XmlCoverageFile">
            <summary>
            Gets the source coverage.
            </summary>
            <value>The source coverage.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.TextLoggerBase">
            <summary>
            Abstract base class for event text logger 
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TextLoggerBase.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TextLoggerBase.Initialize">
            <summary>
            Caches values
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TextLoggerBase.WriteCritical(System.String,System.String)">
            <summary>
            Writes a critical message
            </summary>
            <param name="category"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TextLoggerBase.WriteError(System.String,System.String)">
            <summary>
            Writes an error message
            </summary>
            <param name="category"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TextLoggerBase.WriteWarning(System.String,System.String)">
            <summary>
            Writes a warning message
            </summary>
            <param name="category"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TextLoggerBase.WriteMessage(System.String,System.String)">
            <summary>
            Writes a message
            </summary>
            <param name="category"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TextLoggerBase.WriteNoisy(System.String,System.String)">
            <summary>
            Writes a noisy message
            </summary>
            <param name="category"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TextLoggerBase.WriteVerbose(System.String,System.String)">
            <summary>
            Writes a verbose message
            </summary>
            <param name="category"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TextLoggerBase.WriteExecutionStep(System.String,System.Object[])">
            <summary>
            Writes a formatted execution step
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TextLoggerBase.WriteExecutionStep(System.String)">
            <summary>
            Writes an execution step
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.TextLoggerBase.Writer">
            <summary>
            Gets the indented writer
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builder.ICompilationConditional">
            <summary>
            A member that may be enclosed in a conditional symbol
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builder.ICompilationConditional.TryGetCompilationSymbol(System.String@)">
            <summary>
            Gets the conditional symbol name
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builder.ISourceLocationHintable">
            <summary>
            A instance that provides a hint on a customized file name to be saved
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builder.ISourceLocationHintable.TryGetFileNameHint(System.String@)">
            <summary>
            Gets a hint about the desired filename, without the extension.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builder.SourceLocationHintableHelper">
            <summary>
            Helpers for ISourceLocationHintable
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builder.SourceLocationHintableHelper.Bucketize``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Bucketizes element by hinted location
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="defaultLocation"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Collections.SafeTypeSet">
            <summary>
            A set for IType instance. This sets contains
            a fast lookup for live types, using the GlobalIndex,
            and a slower lookup with TypeName.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Collections.SafeTypeSet.#ctor">
            <summary>
            Initializes a new instance of the set
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Collections.SafeTypeSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Initializes a new instance of the set
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Collections.SafeTypeSet.#ctor(Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Initializes a new instance of the set
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Collections.SafeTypeSet.Contains(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value that indicates if the type is contained in the set
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Collections.SafeTypeSet.AddRange(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Add the types to the set and returns the number of types added
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Collections.SafeTypeSet.AddRange(Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Add the types to the set and returns the number of types added
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Collections.SafeTypeSet.Add(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Adds the type to the set. Returns true if the item was added;
            false if it was already in the set.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Collections.SafeTypeSet.Clear">
            <summary>
            Clears the data structure
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Collections.SafeTypeSet.ClearAndTrim">
            <summary>
            Clears and trims the backing array structures
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Collections.SafeTypeSet.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Collections.SafeTypeSet.Count">
            <summary>
            Gets the number of elements in the set
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Engine.DelegateInstantiationType">
            <summary>
            Possible return values from the delegate lookup
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Engine.DelegateInstantiationType.Undefined">
            <summary>
            Undefied result
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Engine.DelegateInstantiationType.Success">
            <summary>
            Successfully instantiated a delegate
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Engine.DelegateInstantiationType.NotSupported">
            <summary>
            Some parameter types are not supported
            </summary>
        </member>
        <member name="F:Microsoft.Moles.Engine.DelegateInstantiationType.NotFound">
            <summary>
            The signature was not found in the list of supported delegates
            </summary>
        </member>
        <member name="T:Microsoft.Moles.Engine.IDelegateTypePool">
            <summary>
            A pool of delegates
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Engine.IDelegateTypePool.TryGetDelegateType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,System.Boolean,Microsoft.ExtendedReflection.Metadata.Interfaces.IType@,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod@)">
            <summary>
            Tries to instantiate a delegate for the given method signature
            </summary>
            <param name="declaringType"></param>
            <param name="method"></param>
            <param name="useThisParameter"></param>
            <param name="delegateType"></param>
            <param name="invokeDelegateMethod"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Moles.Engine.DelegateTypePool">
            <summary>
            A queryable collection of delegate types
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Engine.DelegateTypePool.#ctor">
            <summary>
            Instantiates a new pool
            </summary>
        </member>
        <member name="M:Microsoft.Moles.Engine.DelegateTypePool.AddDelegate(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Adds the delegate.
            </summary>
            <param name="td">The td.</param>
        </member>
        <member name="M:Microsoft.Moles.Engine.DelegateTypePool.AddInvokeMethod(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Adds the delegate.
            </summary>
            <param name="invokeMethod">The invoke method.</param>
        </member>
        <member name="M:Microsoft.Moles.Engine.DelegateTypePool.TryGetDelegateType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,System.Boolean,Microsoft.ExtendedReflection.Metadata.Interfaces.IType@,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod@)">
            <summary>
            Tries the type of the get delegate.
            </summary>
            <param name="declaringType">Type of the declaring.</param>
            <param name="method">The method.</param>
            <param name="useThisParameter">if set to <c>true</c> [use this parameter].</param>
            <param name="delegateType">Type of the delegate.</param>
            <param name="invokeDelegateMethod">The invoke delegate method.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataInternalizers">
            <summary>
            Helper method that internalizes metadata names
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataInternalizers.Clear">
            <summary>
            Clears the caches
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataInternalizers.CollectDeadReferences">
            <summary>
            Calls a GC and removes weak references that no longer point to an object
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataInternalizers.InternalizeString(System.String)">
            <summary>
            Internalizes the specified metadata name.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataInternalizers.InternalizeName``1(``0)">
            <summary>
            Internalizes the specified metadata name.
            </summary>
            <typeparam name="TName">The type of the name.</typeparam>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataInternalizers.InternalizeAttributeArgument``1(``0)">
            <summary>
            Internalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataInternalizers.InternalizeMetadataExpression``1(``0)">
            <summary>
            Internalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataInternalizers.InternalizeCodeUpdate``1(``0)">
            <summary>
            Internalizes the code update.
            </summary>
            <typeparam name="TCodeUpdate">The type of the code update.</typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataInternalizers.InternalizeStackFrame(Microsoft.ExtendedReflection.Symbols.StackFrameName)">
            <summary>
            Internalizes the stackframe.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataInternalizers.InternalizeStackTrace(Microsoft.ExtendedReflection.Symbols.StackTraceName)">
            <summary>
            Internalizes the stack trace.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MethodDefinitionLookUp">
            <summary>
            Looks up method definition from the name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodDefinitionLookUp.#ctor(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Constructor for method definition look up
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodDefinitionLookUp.TryLookupMethodDefinition(System.String,System.String,System.String,System.String,Microsoft.ExtendedReflection.Metadata.MethodDefinition@)">
            <summary>
            Attempts to lookup the method from the module specified
            </summary>        
            <param name="name"></param>
            <param name="type"></param>
            <param name="token"></param>
            <param name="module"></param>
            <param name="currentMethod"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.SystemMethods">
            <summary>
            This class provides access to all basic system methods.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemMethods.ObjectGetType">
            <summary>
            A method representing <see cref="T:System.Object"/>.GetType.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemMethods.TypeGetElementType">
            <summary>
            A method representing <see cref="T:System.Type"/>.GetElementType.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemMethods.TypeIsAssignableFrom">
            <summary>
            A method representing <see cref="T:System.Type"/>.IsAssignableFrom.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.SystemMethods.IsOverride(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Determines whether the specified actual method overrides the virtual method.
            </summary>
            <param name="virtualMethod">The virtual method.</param>
            <param name="actualMethod">The actual method.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.InstructionComparer">
            <summary>
            This class provides some utility function to compare instructions.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.InstructionComparer.CompareInstructions(Microsoft.ExtendedReflection.Metadata.Instruction,Microsoft.ExtendedReflection.Metadata.Instruction,System.Boolean)">
            <summary>
            Compares two instructions whether they are equal or not
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.InstructionComparer.CompareFunctionCallInstructions(Microsoft.ExtendedReflection.Metadata.Instruction,Microsoft.ExtendedReflection.Metadata.Instruction)">
            <summary>
            Compares two function call instructions related to OpCodes: Call, Callvirt, and Newobj
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.InstructionComparer.CompareParameters(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Compares two sets of parameters whether these sets are equal or not
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.InstructionComparer.CompareMethodSignatures(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Compares method definition signatures
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.StaticPurityChecker">
            <summary>
            Analyzes a method and returns whether it is a pure or impure method
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.StaticPurityChecker.IsPureAndTerminates(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Analyzes a method and returns whether it is a pure or impure method;
            in particular, terminating means that it cannot StackOverflow.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MethodBodyEqualityComparer">
            <summary>
            Compares two method bodies instruction by instruction for an exact match
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MethodBodyEqualityComparer.ConstantOpCodes">
            <summary>
            Constructor that initializes the set of opcodes
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MethodBodyEqualityComparer.ignorePrimitiveValues">
            <summary>
            A flag that ignores primitive values while comparing method bodies
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodBodyEqualityComparer.#ctor(System.Boolean)">
            <summary>
            Constructor that initializes the set of opcodes
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodBodyEqualityComparer.Equals(Microsoft.ExtendedReflection.Metadata.MethodBodyEx,Microsoft.ExtendedReflection.Metadata.MethodBodyEx)">
            <summary>
            Compares two method bodies instruction by instruction
            </summary>
            <remarks> 
            </remarks>
            <value>method body 1 and method body 2.</value>
            <returns></returns>            
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodBodyEqualityComparer.GetHashCode(Microsoft.ExtendedReflection.Metadata.MethodBodyEx)">
            <summary>
            computes hash code based on the opcodes in the method body
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MethodBodyCallSequenceComparer">
            <summary>
            Compares two method bodies only based on sequence of instructions instead of all instructions in the method body
            TODO: Caching needs to be done on already analyzed pure methods for improving performance
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodBodyCallSequenceComparer.#ctor">
            <summary>
            Constructor call for sequence comparer
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodBodyCallSequenceComparer.Equals(Microsoft.ExtendedReflection.Metadata.MethodBodyEx,Microsoft.ExtendedReflection.Metadata.MethodBodyEx)">
            <summary>
            Compares two method bodies based on method call instructions. returns true if they include only the same sequence of method calls
            </summary>
            <remarks> 
            </remarks>
            <value>method body 1 and method body 2.</value>
            <returns></returns>            
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodBodyCallSequenceComparer.TryGetNextFunctionCall(Microsoft.ExtendedReflection.Metadata.MethodBodyEx,System.Int32,System.Int32@,Microsoft.ExtendedReflection.Metadata.Instruction@)">
            <summary>
            Given current instruction and an offset, returns the next function call based on purity flag
            If purity flag is not set, next function call in the instruction list is returned
            If purity flag is set, next impure function call in the instruction list is returned
            </summary>        
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MethodBodyCallSequenceComparer.GetHashCode(Microsoft.ExtendedReflection.Metadata.MethodBodyEx)">
            <summary>
            computes hash code based on the opcodes in the method body. 
            This function treats call and callvirt opcodes as the same
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MethodBodyCallSequenceComparer.IgnorePureMethods">
            <summary>
            Flag for ignoring pure methods while comparing sequences
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem">
            <summary>
            A gradient term matrix
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem.Write(System.IO.TextWriter)">
            <summary>
            Writes to the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem.GetModelBuilder">
            <summary>
            Gets a reseted model builder, cached
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem.TryGetObjectiveConstraints(System.Double[],System.Double[])">
            <summary>
            Tries to compute the value of the objective constraints at a given point
            </summary>
            <param name="point"></param>
            <param name="objectives"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem.TryGetGradient(System.Double[],System.Double[])">
            <summary>
            Tries to compute the value of the objective constraints at a given point
            </summary>
            <param name="point">The point.</param>
            <param name="gradient">The gradient.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem.TryGetGradientAndValueAtPoint(System.Double[],System.Double[],System.Double@)">
            <summary>
            Tries the gradient and object value at a given point.
            </summary>
            <param name="point">The point.</param>
            <param name="gradient">The gradient.</param>
            <param name="objective">The objective.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem.TryGetArithmeticModelAtPoint(System.Double[],Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticModel@)">
            <summary>
            Tries the get arithmetic model at a given point.
            </summary>
            <param name="point">The point.</param>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem.TryCreate(Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolvingContext,Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem@)">
            <summary>
            Tries to compute the jacobian of a constraint list
            </summary>
            <param name="termManager">The term manager.</param>
            <param name="context">The solving context.</param>
            <param name="problem">The problem.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem.Context">
            <summary>
            Gets the arithmetic solving context
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem.ObjectiveConstraints">
            <summary>
            Gets the normalized objective constraints.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem.ObjectiveConstraint">
            <summary>
            Gets the normalized object constraint
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem.Variables">
            <summary>
            Gets the problem variables
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem.Gradient">
            <summary>
            Gets the term jacobian.
            </summary>
            <value>The terms.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticOptimizationProblem.GradientVector">
            <summary>
            Get the gradients vector
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver">
            <summary>
            Derives numerical terms
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver"/> class.
            </summary>
            <param name="termManager"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.Clear">
            <summary>
            Clears all internalized values.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.VisitTerm(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Internal use only; do not call from the outside.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.Derive(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Derives the specified term.
            </summary>
            <param name="formulaTerm">The formula term.</param>
            <param name="variableTerm">The variable term.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.VisitFunctionApplication(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Visitor for an invocation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="function">function</param>
            <param name="time">value that represents the invocation time</param>
            <param name="arguments">method arguments</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.VisitUnary(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.UnaryOperator,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a unary operation.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.VisitBinary(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a binary operation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operator">binary operator</param>
            <param name="left">left operand value</param>
            <param name="right">right operand value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.VisitSelect(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a selection.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="compound">compound value</param>
            <param name="index">index into compound</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.VisitObjectProperty(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ObjectProperty)">
            <summary>
            Visitor for an object property.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="reference">object reference</param>
            <param name="property">object property</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.VisitSymbol(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ISymbolId)">
            <summary>
            Visitor for a symbol.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="key">identifier of symbol</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.VisitAc1(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermAc1Set)">
            <summary>
            Visitor for an associative, commutative operation with a unit.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operandSet"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.VisitI4(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.VisitI8(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,System.Int64)">
            <summary>
            Visitor for an integer constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.VisitR4(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,System.Single)">
            <summary>
            Visitor for a floating-point constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermDeriver.VisitR8(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,System.Double)">
            <summary>
            Visitor for a floating-point constant.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value">constant</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Visitors.TermUninterpretedArithmeticDetectorBase`1">
            <summary>
            Detects arithmetic constraints for which no decision procedures exist
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermUninterpretedArithmeticDetectorBase`1.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Visitors.TermUninterpretedArithmeticDetectorBase`1"/> class.
            </summary>
            <param name="termManager"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermUninterpretedArithmeticDetectorBase`1.UninterpretedArithmeticConversion(`0,Microsoft.ExtendedReflection.Metadata.UnaryOperator,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Method invoked when a term that represents an uninterpreted arithmetic conversion is discovered.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="operator">The operator.</param>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermUninterpretedArithmeticDetectorBase`1.UninterpretedArithmeticOperation(`0,Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Method invoked when a binary floating point operation is discovered.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="operator">The operator.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermUninterpretedArithmeticDetectorBase`1.UninterpretedArithmeticOperation(`0,Microsoft.ExtendedReflection.Interpretation.ITermAc1Set)">
            <summary>
            Method invoked when an Ac1 uninterpreted arithmetic operation is discovered.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="operandSet">The operand set.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermUninterpretedArithmeticDetectorBase`1.UninterpretedArithmeticOperation(`0,Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Method invoked when an Ac1 uninterpreted arithmetic operation is discovered.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="mathFunction">The math function.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermUninterpretedArithmeticDetectorBase`1.IsFloatOrDecimal(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Returns a value indicating if the term is a R4 or R8 or Decimal
            </summary>
            <param name="layout"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermUninterpretedArithmeticDetectorBase`1.VisitUnary(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.UnaryOperator,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a unary operation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operator">unary operator</param>
            <param name="operand">operand value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermUninterpretedArithmeticDetectorBase`1.VisitBinary(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a binary operation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operator">binary operator</param>
            <param name="left">left operand value</param>
            <param name="right">right operand value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermUninterpretedArithmeticDetectorBase`1.VisitAc1(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermAc1Set)">
            <summary>
            Visitor for an associative, commutative operation with a unit.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operandSet"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermUninterpretedArithmeticDetectorBase`1.VisitFunctionApplication(`0,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Visitor for an invocation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="function">function</param>
            <param name="time">value that represents the invocation time</param>
            <param name="arguments">method arguments</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MathMetadata">
            <summary>
            Metadata for the System.Math type
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MathType">
            <summary>
            The System.Math type
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.FloorDecimal">
            <summary>
            The System.Math.Floor(Decimal) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.FloorDouble">
            <summary>
            The System.Math.Floor(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.CeilingDecimal">
            <summary>
            The System.Math.Ceiling(Decimal) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.CeilingDouble">
            <summary>
            The System.Math.Ceiling(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.AcosDouble">
            <summary>
            The System.Math.Acos(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.AsinDouble">
            <summary>
            The System.Math.Asin(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.AtanDouble">
            <summary>
            The System.Math.Atan(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.Atan2DoubleDouble">
            <summary>
            The System.Math.Atan2(Double, Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.CosDouble">
            <summary>
            The System.Math.Cos(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.CoshDouble">
            <summary>
            The System.Math.Cosh(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.SinDouble">
            <summary>
            The System.Math.Sin(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.TanDouble">
            <summary>
            The System.Math.Tan(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.SinhDouble">
            <summary>
            The System.Math.Sinh(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.TanhDouble">
            <summary>
            The System.Math.Tanh(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.RoundDouble">
            <summary>
            The System.Math.Round(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.RoundDoubleInt32">
            <summary>
            The System.Math.Round(Double, Int32) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.RoundDoubleMidpointRounding">
            <summary>
            The System.Math.Round(Double, MidpointRounding) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.RoundDoubleInt32MidpointRounding">
            <summary>
            The System.Math.Round(Double, Int32, MidpointRounding) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.RoundDecimal">
            <summary>
            The System.Math.Round(Decimal) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.RoundDecimalInt32">
            <summary>
            The System.Math.Round(Decimal, Int32) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.RoundDecimalMidpointRounding">
            <summary>
            The System.Math.Round(Decimal, MidpointRounding) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.RoundDecimalInt32MidpointRounding">
            <summary>
            The System.Math.Round(Decimal, Int32, MidpointRounding) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.TruncateDecimal">
            <summary>
            The System.Math.Truncate(Decimal) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.TruncateDouble">
            <summary>
            The System.Math.Truncate(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.SqrtDouble">
            <summary>
            The System.Math.Sqrt(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.LogDouble">
            <summary>
            The System.Math.Log(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.Log10Double">
            <summary>
            The System.Math.Log10(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.ExpDouble">
            <summary>
            The System.Math.Exp(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.PowDoubleDouble">
            <summary>
            The System.Math.Pow(Double, Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.IEEERemainderDoubleDouble">
            <summary>
            The System.Math.IEEERemainder(Double, Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.AbsSByte">
            <summary>
            The System.Math.Abs(SByte) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.AbsInt16">
            <summary>
            The System.Math.Abs(Int16) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.AbsInt32">
            <summary>
            The System.Math.Abs(Int32) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.AbsInt64">
            <summary>
            The System.Math.Abs(Int64) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.AbsSingle">
            <summary>
            The System.Math.Abs(Single) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.AbsDouble">
            <summary>
            The System.Math.Abs(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.AbsDecimal">
            <summary>
            The System.Math.Abs(Decimal) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MaxSByteSByte">
            <summary>
            The System.Math.Max(SByte, SByte) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MaxByteByte">
            <summary>
            The System.Math.Max(Byte, Byte) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MaxInt16Int16">
            <summary>
            The System.Math.Max(Int16, Int16) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MaxUInt16UInt16">
            <summary>
            The System.Math.Max(UInt16, UInt16) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MaxInt32Int32">
            <summary>
            The System.Math.Max(Int32, Int32) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MaxUInt32UInt32">
            <summary>
            The System.Math.Max(UInt32, UInt32) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MaxInt64Int64">
            <summary>
            The System.Math.Max(Int64, Int64) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MaxUInt64UInt64">
            <summary>
            The System.Math.Max(UInt64, UInt64) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MaxSingleSingle">
            <summary>
            The System.Math.Max(Single, Single) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MaxDoubleDouble">
            <summary>
            The System.Math.Max(Double, Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MaxDecimalDecimal">
            <summary>
            The System.Math.Max(Decimal, Decimal) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MinSByteSByte">
            <summary>
            The System.Math.Min(SByte, SByte) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MinByteByte">
            <summary>
            The System.Math.Min(Byte, Byte) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MinInt16Int16">
            <summary>
            The System.Math.Min(Int16, Int16) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MinUInt16UInt16">
            <summary>
            The System.Math.Min(UInt16, UInt16) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MinInt32Int32">
            <summary>
            The System.Math.Min(Int32, Int32) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MinUInt32UInt32">
            <summary>
            The System.Math.Min(UInt32, UInt32) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MinInt64Int64">
            <summary>
            The System.Math.Min(Int64, Int64) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MinUInt64UInt64">
            <summary>
            The System.Math.Min(UInt64, UInt64) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MinSingleSingle">
            <summary>
            The System.Math.Min(Single, Single) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MinDoubleDouble">
            <summary>
            The System.Math.Min(Double, Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.MinDecimalDecimal">
            <summary>
            The System.Math.Min(Decimal, Decimal) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.LogDoubleDouble">
            <summary>
            The System.Math.Log(Double, Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.SignSByte">
            <summary>
            The System.Math.Sign(SByte) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.SignInt16">
            <summary>
            The System.Math.Sign(Int16) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.SignInt32">
            <summary>
            The System.Math.Sign(Int32) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.SignInt64">
            <summary>
            The System.Math.Sign(Int64) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.SignSingle">
            <summary>
            The System.Math.Sign(Single) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.SignDouble">
            <summary>
            The System.Math.Sign(Double) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.SignDecimal">
            <summary>
            The System.Math.Sign(Decimal) method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.MathMetadata.BigMulInt32Int32">
            <summary>
            The System.Math.BigMul(Int32, Int32) method
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName">
            <summary>
            A serializable <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IConstraint"/> implementation
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.Name">
            <summary>
            Internal superclass of all metadata names
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.Name.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.Name"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.Name.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.Name.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.Name.FromXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates a name for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.Name.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.Name.Equals(System.Object)">
            <summary>
            Checks equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.Name.GetHashCode">
            <summary>
            Gets hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.Name.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Equality.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.Name.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Inequality.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.Name.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IConstraint">
            <summary>
            A generic type parameter.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IConstraint.Attributes">
            <summary>
            Set of constraints
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IConstraint.Types">
            <summary>
            Types the instantiation must be compatible with.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IConstraint.SerializableName">
            <summary>
            Gets a serializable version of this constraint
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName.FromConstraint(Microsoft.ExtendedReflection.Metadata.Interfaces.IConstraint)">
            <summary>
            Create an instance from a IConstraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName.FromName(System.Reflection.GenericParameterAttributes,Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Creates a constraint from names
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName.FromType(System.Type)">
            <summary>
            Creates a constraint name from a generic parameter type
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName.Empty">
            <summary>
            The constraint that represents no constraints
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName.Equals(Microsoft.ExtendedReflection.Metadata.Names.ConstraintName)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName.Equals(System.Object)">
            <summary>
            Checks equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName.GetHashCode">
            <summary>
            Gets hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Loads a ConstraintName instance from an xml stream
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName.Attributes">
            <summary>
            Gets the constraint attributes
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName.Types">
            <summary>
            Types the instantiation must be compatible with.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ConstraintName.XmlElementName">
            <summary>
            Gets the name of the XML element.
            </summary>
            <value>The name of the XML element.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.GenericParameterDefinitionName">
            <summary>
            A serializable instance of <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IGenericParameterDefinition"/>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IGenericParameterDefinition">
            <summary>
            A generic parameter definition.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IGenericParameterDefinition.Name">
            <summary>
            Name of generic parameter, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IGenericParameterDefinition.Constraint">
            <summary>
            Constraint
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IGenericParameterDefinition.CustomAttributes">
            <summary>
            The custom attributes.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IGenericParameterDefinition.SerializableName">
            <summary>
            Gets a serialiable name of this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.GenericParameterDefinitionName.FromName(System.String,Microsoft.ExtendedReflection.Metadata.Names.ConstraintName,Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName[])">
            <summary>
            Create a new instance from names
            </summary>
            <param name="name">The name.</param>
            <param name="constraint">The constraint.</param>
            <param name="customAttributes">The custom attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.GenericParameterDefinitionName.FromType(System.Type)">
            <summary>
            Creates a GenericParameterDefinitionName from a generic parameter type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.GenericParameterDefinitionName.FromGenericParameterDefinition(Microsoft.ExtendedReflection.Metadata.Interfaces.IGenericParameterDefinition)">
            <summary>
            Creates a new instance from a generic parameter definition
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.GenericParameterDefinitionName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.GenericParameterDefinitionName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Reads the instance from an XML document.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.GenericParameterDefinitionName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.GenericParameterDefinitionName.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.GenericParameterDefinitionName.Name">
            <summary>
            Name of generic parameter, if any.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.GenericParameterDefinitionName.Constraint">
            <summary>
            Gets the constraint
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.GenericParameterDefinitionName.CustomAttributes">
            <summary>
            Gets the custom attributes.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment">
            <summary>
            Enviroment variables used by the ExtendedReflection profiler
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.MscorlibStubsNamespace">
            <summary>
            Namespace containing special stub types.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.MscorlibStubShortNamePrefix">
            <summary>
            Gets the prefix that is appended to method name to create mscorlib stub names.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.SubstitutionRedirectNameSuffix">
            <summary>
            Gets the suffix that is appended to the method name for redirection substitutions
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.SubstitutionLateRedirectNameSuffix">
            <summary>
            Gets the suffix that is appended to the method name for late redirection
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCOR_ENABLE_PROFILING">
            <summary>
            Set to <see cref="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.ProfilerGUID"/> to enable profiling with clr monitor.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCOR_PROFILER">
            <summary>
            Set to '1' to enable profiling
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCOR_PROFILER_PATH">
            <summary>
            .NET 4.0 registration free activation
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCOMPLUS_Version">
            <summary>
            Sets the CLR version
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCOMPLUS_InstallRoot">
            <summary>
            Sets the CLR root path
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCOMPLUS_DefaultVersion">
            <summary>
            Sets the custom CLR version
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_PROTECT_ALL_CCTORS">
            <summary>
            Set to file name to create detailed log file. Only available in debug build.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_ERASE_CCTOR_TYPES">
            <summary>
            Set to a column separate list of type names for which static cctor should be wiped out.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_ERASE_FINALIZER_TYPES">
            <summary>
            Set to a column separate list of type names for which static cctor should be wiped out.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_INSTRUMENT_TYPES">
            <summary>
            List of types separated by commas.
            </summary>
            <remarks>
            The value '*' indicates that all types are monitored, unless there exists an exclusion.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_INSTRUMENT_NAMESPACES">
            <summary>
            List of namespaces separated by commas.
            </summary>
            <remarks>
            The value '*' indicates that all types are monitored, unless there exists an exclusion.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_INSTRUMENT_ASSEMBLIES">
            <summary>
            List of assembly display names separated by commas.
            </summary>
            <remarks>
            The value '*' indicates that all assemblies are monitored, unless there exists an exclusion.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_INSTRUMENT_TYPES_EXCLUSIONS">
            <summary>
            List of types separated by commas.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_INSTRUMENT_NAMESPACES_EXCLUSIONS">
            <summary>
            List of types separated by commas.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_INSTRUMENT_ASSEMBLIES_EXCLUSIONS">
            <summary>
            List of assembly display names separated by commas.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_PROTECT_TYPES">
            <summary>
            List of types separated by commas.
            </summary>
            <remarks>
            The value '*' is not supported.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_INJECT_TYPES">
            <summary>
            List of types separated by commas.
            </summary>
            <remarks>
            The value '*' indicates that all types are injected, unless there exists an exclusion.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_INJECT_NAMESPACES">
            <summary>
            List of namespaces separated by commas.
            </summary>
            <remarks>
            The value '*' indicates that all namespaces are injected, unless there exists an exclusion.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_INJECT_ASSEMBLIES">
            <summary>
            List of assembly display names separated by commas.
            </summary>
            <remarks>
            The value '*' indicates that all assemblies are injected, unless there exists an exclusion.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_INJECT_TYPES_EXCLUSIONS">
            <summary>
            List of types separated by commas.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_INJECT_NAMESPACES_EXCLUSIONS">
            <summary>
            List of types separated by commas.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_INJECT_ASSEMBLIES_EXCLUSIONS">
            <summary>
            List of assembly display names separated by commas.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_USER_ASSEMBLY">
            <summary>
            Assembly that holds user-defined execution monitor.
            </summary>
            <remarks>
            If this environment variable is set, the user execution monitor is started
            automatically.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_USER_TYPE">
            <summary>
            Type that holds user-defined execution monitor in <see cref="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_USER_ASSEMBLY"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_FLAGS">
            <summary>
            Flags that control the instrumentation.
            </summary>
            <seealso cref="T:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags"/>
            <seealso cref="T:Microsoft.ExtendedReflection.Monitoring.ControllerSetUp"/>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_OBJECTS">
            <summary>
            Flag that controls whether GC addresses should be tracked.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_SUBSTITUTIONS">
            <summary>
            Comma-separated list of file names.
            The files must be assemblies that contain substitutions.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_EXTERNAL_PROFILERS">
            <summary>
            Comma-separated list of profiler CLSID.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_CLSID">
            <summary>
            Environment variable that gives the CLSID of the extended reflection profiler
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_DISABLE_MSCORLIB_SUPPRESSIONS">
            <summary>
            Environment variable used to disable instrumentation suppression
            for mscorlib.
            </summary>
            <remarks>
            Use if you know what you are doing.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_INITIALIZED">
            <summary>
            Enviroment variable used to check whether the profiler is attached.
            </summary>
            <remarks>
            This environment variable is set by the profiler itself.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_INSTRUMENT_ATTRIBUTE">
            <summary>
            Specifies a single attribute that acts as __InstrumentAttribute
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.EnvCLRMONITOR_SESSION_ID">
            <summary>
            An unique string that identifies the process being executed. Use when hooking to IIS or services.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.ProfilerGUID">
            <summary>
            GUID string of clr monitor profiler.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.TryUnstubName(System.String,System.String@)">
            <summary>
            Determines whether the name is a stub (i.e. prefixed with $stub$ or other special names).
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.DisableProfilingEnvironment">
            <summary>
            Ensures that child processes are not monitored
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.IsSameNetRuntime(System.Collections.Specialized.StringDictionary,System.Collections.Specialized.StringDictionary)">
            <summary>
            Determines whether the processes have the same .net runtime environment variables
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.IsSameInstrumentation(System.Collections.Specialized.StringDictionary,System.Collections.Specialized.StringDictionary)">
            <summary>
            Determines whether the instrumentation settings are the same.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            	<c>true</c> if [is same instrumentation] [the specified left]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.ClearProfilerGUID">
            <summary>
            Clears the CLR profiler environment variables and returns the registered profiler GUID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.CheckOtherProfilerAlreadyLoaded">
            <summary>
            Checks that other profilers have not been to set up to be loaded,
            prints error message if necessary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.ClearCLRVersion">
            <summary>
            Clear environment settings that force a particular CLR version
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.IsProfilerRegistered">
            <summary>
            Checks if a profiler GUID has been registered
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.IsProfilerEnabled">
            <summary>
            Gets a value indicating if COR_ENABLE_PROFILING is set to a non-null value
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.ControllerEnvironment.IsMonitoringEnabled">
            <summary>
            Checks whether monitoring is enabled at all.
            </summary>
            <remarks>
            This flag is cached, so it is safe to reset 
            the profiler environment variables after the call
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticModel">
            <summary>
            An arithmetic model.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticModelBuilder">
            <summary>
            A mutable builder of <see cref="T:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticModel"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticModelBuilder.TryAssign(Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticVariable,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Assigns a new value to a node.
            </summary>
            <returns>whether the assignment was successful; it might fail when the new value violates (implicit) side constraints</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticModelBuilder.Reset">
            <summary>
            Undoes all assignments.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticModelBuilder.ToArithmeticModel">
            <summary>
            Creates an immutable <see cref="T:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticModel"/>
            which represents the current state of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticVariable">
            <summary>
            An arithmetic variable is involved 
            in constraint systems representing a
            hard arithmetic problems.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticVariable.Layout">
            <summary>
            Gets the layout of the <see cref="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticVariable.Term"/>.
            </summary>
            <value>The layout.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticVariable.Term">
            <summary>
            Gets the term.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticVariable.Constraints">
            <summary>
            Gets the constraints which involve this variable.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolver">
            <summary>
            An arithmetic solver uses heuristics to solve constraint systems involving 
            hard arithmetic problems, including floating point arithmetic.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolver.TryGetArithmeticModel(Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolvingContext,Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticModel@)">
            <summary>
            Tries to the get an arithmetic model.
            </summary>
            <param name="context">The context.</param>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolverManager">
            <summary>
            Service that manages a set of <see cref="T:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolverManager"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolverManager.AddSolver(Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolver)">
            <summary>
            Adds the solver.
            </summary>
            <param name="solver">The solver.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolverManager.Solvers">
            <summary>
            Gets the solver list
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolvingContext">
            <summary>
            An arithmetic solving context encapsulates a particular 
            solving problem.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolvingContext.CreateArithmeticModelBuilder(Microsoft.ExtendedReflection.Reasoning.IModel)">
            <summary>
            Creates an arithmetic model builder, starting from a particular model.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolvingContext.IsValidModel(Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticModel)">
            <summary>
            Determines whether the given model fulfills the constraints of all nodes.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolvingContext.Variables">
            <summary>
            Gets the variables.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolvingContext.Random">
            <summary>
            Gets a random value generator.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolvingContext.HasTimedOut">
            <summary>
            Gets a value indicating whether the time is up.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolvingContext.InitialModel">
            <summary>
            Gets the starting model.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticSolverManager">
            <summary>
            Implements the IArithmeticSolverManager interface
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticSolverManager.AddSolver(Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolver)">
            <summary>
            Adds the solver.
            </summary>
            <param name="solver">The solver.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticSolverManager.Microsoft#ExtendedReflection#Reasoning#ArithmeticSolving#IArithmeticSolver#TryGetArithmeticModel(Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolvingContext,Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticModel@)">
            <summary>
            Tries to the get an arithmetic model.
            </summary>
            <param name="context">The context.</param>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.ArithmeticSolverManager.Solvers">
            <summary>
            Gets the solver list
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ModelDomainValidator">
            <summary>
            The model domain validator checks whether a model adheres to the invariants of a <see cref="T:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ModelDomainValidator.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Interpretation.ISymbolId},Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Reasoning.IModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Reasoning.ModelCache"/> class.
            </summary>
            <param name="roots">The roots.</param>
            <param name="termManager">The term manager.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ModelDomainValidator.CheckInvariants(Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider,System.String@)">
            <summary>
            Checks the invariants of the given <paramref name="domainProvider"/>.
            </summary>
            <param name="domainProvider">The domain provider.</param>
            <param name="reason">If the check fails, the reason for the failure.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ModelDomainValidator.Dispose">
            <summary>
            Frees memory, but does not render instance obsolete.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.AssemblyNameFilter">
            <summary>
            A stack frame filter based on the method assembly name.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.AssemblyNameFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the filter
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.AssemblyNameFilter.Exclude(Microsoft.ExtendedReflection.Symbols.StackFrameName)">
            <summary>
            Gets a value indicating whether the stack frame should be excluded
            </summary>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.ISourceDocument">
            <summary>
            A source document
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISourceDocument.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the content to a text writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.ISourceDocument.Url">
            <summary>
            Gets the url of this source document
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.ISourceDocument.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.ISourceDocument.LineOffsets">
            <summary>
            Gets the line offsets; array must not be mutated by caller.
            </summary>
            <value>The line offsets.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.ISourceManager">
            <summary>
            Source manager
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.ISourceManager.TryGetSource(System.String,Microsoft.ExtendedReflection.Symbols.ISourceDocument@)">
            <summary>
            Tries to get the source text for a given url.
            </summary>
            <param name="url">The URL.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverage">
            <summary>
            Identifier of method branch coverage information
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverage.GetCappedHashCode(System.Int32)">
            <summary>
            Gets the capped hash code.
            </summary>
            <param name="cap">The cap.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverage.Hits">
            <summary>
            How often the indexed branches were hit.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverage.HitIndices">
            <summary>
            An enumeration of indices that has non-zero hits.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverage.Max">
            <summary>
            How often was any branch covered at most.
            </summary>
            <value>The max.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverage.UniqueIndex">
            <summary>
            Unique index of this method branch coverage
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.IMethodCoverage">
            <summary>
            Identifier of method coverage information
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IMethodCoverage.GetHashedCappedMethodCoverage(System.Int32)">
            <summary>
            Obtains a hash of a capped method coverage
            </summary>
            <param name="cap"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IMethodCoverage.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the coverage information as text.
            </summary>
            <param name="textWriter"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.IMethodCoverage.CoveredMethods">
            <summary>
            Gets a list of all covered methods.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.IndexedMethodBranchCoverageKey">
            <summary>
            Method Branch Coverage with Method index
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.IndexedMethodBranchCoverageKey.Index">
            <summary>
            Method index
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.IndexedMethodBranchCoverageKey.MethodBranchCoverage">
            <summary>
            Method branch coverage
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IndexedMethodBranchCoverageKey.#ctor(System.Int32,Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverage)">
            <summary>
            Creates an instance.
            </summary>
            <param name="index"></param>
            <param name="methodBranchCoverage"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.IndexedMethodBranchCoverageKey.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverage">
            <summary>
            Default implementaiton of a <see cref="T:Microsoft.ExtendedReflection.Coverage.IMethodBranchCoverage"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverage.UniqueIndex">
            <summary>
            The unique index of this coverage information.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverage.#ctor(Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverage"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="uniqueIndex">Unique index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverage.GetCappedHashCode(System.Int32)">
            <summary>
            Gets the capped hash code.
            </summary>
            <param name="cap">The cap.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverage.Microsoft#ExtendedReflection#Coverage#IMethodBranchCoverage#UniqueIndex">
            <summary>
            The unique index of this coverage information.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverage.Hits">
            <summary>
            How often the indexed branches were hit.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverage.HitIndices">
            <summary>
            An enumeration of indices that has non-zero hits.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.MethodBranchCoverage.Max">
            <summary>
            How often was any branch covered at most.
            </summary>
            <value>The max.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.CoverageDomain">
            <summary>
            Domains for coverage data
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.CoverageDomain.Unknown">
            <summary>
            Unknown domain, used by filter when returning a value
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.CoverageDomain.SystemCode">
            <summary>
            Coverage should be ignored
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.CoverageDomain.UserOrTestCode">
            <summary>
            Coverage should be displayed but excluded for statistics.
            This is the default domain
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.CoverageDomain.UserCodeUnderTest">
            <summary>
            Coverage should be included
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.CoverageEntry">
            <summary>
            A coverage result
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.CoverageEntry.#ctor(Microsoft.ExtendedReflection.Coverage.CoverageDomain,Microsoft.ExtendedReflection.Coverage.CoverageUnit,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.CoverageEntry"/> class.
            </summary>
            <param name="domain">The domain.</param>
            <param name="unit">The unit.</param>
            <param name="covered">The covered.</param>
            <param name="total">The total.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.CoverageEntry.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.CoverageEntry.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.CoverageEntry.Domain">
            <summary>
            Gets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.CoverageEntry.Unit">
            <summary>
            Gets the unit.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.CoverageEntry.Covered">
            <summary>
            Gets the covered.
            </summary>
            <value>The covered.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.CoverageEntry.Total">
            <summary>
            Gets the total.
            </summary>
            <value>The total.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.CoverageEntry.CoveredRatio">
            <summary>
            Gets the covered ratio.
            </summary>
            <value>The covered ratio.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.CoverageEntry.CoveredPercent">
            <summary>
            Gets the covered percent.
            </summary>
            <value>The covered percent.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.CoverageUnit">
            <summary>
            Coverage type
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.CoverageUnit.Block">
            <summary>
            Basic block coverage
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.CoverageUnit.MethodTouched">
            <summary>
            Method touched ratio
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.MethodCoverage">
            <summary>
            Default <see cref="T:Microsoft.ExtendedReflection.Coverage.IMethodCoverage"/> implementation
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.MethodCoverage.KeyEqualityComparer">
            <summary>
            Singleton instance of key equality comparer
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodCoverage.#ctor(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.Int32,System.Int32}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.MethodCoverage"/> class.
            </summary>
            <param name="methods">The methods.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodCoverage.GetHashedCappedMethodCoverage(System.Int32)">
            <summary>
            Obtains a hash of a capped method coverage
            </summary>
            <param name="cap"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.MethodCoverage.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the coverage information as text.
            </summary>
            <param name="textWriter"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.MethodCoverage.CoveredMethods">
            <summary>
            Gets a list of all covered methods.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.MethodCoverage.Key">
            <summary>
            Gets the key.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.MethodCoverageEntry`1">
            <summary>
            Coverage data about a method
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.MethodCoverageEntry`1.Hits">
            <summary>
            Coverage hits
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.MethodCoverageEntry`1.Domain">
            <summary>
            Covergage domain 
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1">
            <summary>
            A branch coverage builder with tags
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1._coverages">
            <summary>
            Maps a method definition to a sequence of integers, each representing the number of times 
            the branch identified by the index into the array has been 'hit'.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.#ctor(Microsoft.ExtendedReflection.Coverage.ICoverageFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1"/> class.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.GetMethods(Microsoft.ExtendedReflection.Coverage.CoverageDomain)">
            <summary>
            Gets the methods.
            </summary>
            <param name="domain">The domain.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.Max(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{`0})">
            <summary>
            Combines (using max) current builder with other
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.AddOtherTag(Microsoft.ExtendedReflection.Metadata.CodeLocation,Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag)">
            <summary>
            Adds the other tag.
            </summary>
            <param name="location">The location.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.Max(Microsoft.ExtendedReflection.Coverage.IBranchCoverage)">
            <summary>
            Maxes the specified other.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.TryGetMethodEntries(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Coverage.MethodCoverageEntry{`0}@)">
            <summary>
            Tries to get the method entries.
            </summary>
            <param name="method">The method.</param>
            <param name="cov">The cov.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.TryGetMethodHits(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Coverage.CoverageDomain@,System.Int32[]@)">
            <summary>
            Tries to get the method hits.
            </summary>
            <param name="method">The method.</param>
            <param name="domain">The domain.</param>
            <param name="hits">The hits.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.GetMethodHitsSummary(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Tries to get the method summary.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.Hit(Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.Int32,Microsoft.ExtendedReflection.Coverage.CoverageDomain)">
            <summary>
            Adds a hit to the tagged coverage builders
            </summary>
            <param name="method"></param>
            <param name="index"></param>
            <param name="domain"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.CoverageFilter">
            <summary>
            Gets the coverage filter
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.MethodCoverageEntries">
            <summary>
            Gets the method coverage entries.
            </summary>
            <value>The method coverage entries.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder`1.Methods">
            <summary>
            Gets the methods.
            </summary>
            <value>The methods.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage`1">
            <summary>
            Annotated method branch coverage
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage`1.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage`1"/> class.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage`1.Hits">
            <summary>
            Array of hits
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage`1.Tags">
            <summary>
            Array of tags
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage`1._otherTags">
            <summary>
            Additional tags
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage`1.AddOtherTag(System.Int32,Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag)">
            <summary>
            Adds the other tag.
            </summary>
            <param name="offset">The offset.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage`1.AddOtherTags(Microsoft.ExtendedReflection.Collections.IFiniteMap{System.Int32,Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag})">
            <summary>
            Adds the other tags.
            </summary>
            <param name="otherTags">The other tags.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage`1.Resize(System.Int32)">
            <summary>
            Resizes the specified new length.
            </summary>
            <param name="newLength">The new length.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage`1.Invariant">
            <summary>
            Invariant for this instance.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage`1.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Coverage.TaggedMethodBranchCoverage`1.OtherTags">
            <summary>
            Gets the other tags map
            </summary>
            <value>The other tags.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.SafeTermConstructor`1">
            <summary>
            A safe wrapper around a term constructor.
            </summary>
            <typeparam name="Term"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.SafeTermConstructor`1.#ctor(Microsoft.ExtendedReflection.DataAccess.ITermConstructor{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.DataAccess.SafeTermConstructor`1"/> class.
            </summary>
            <param name="constructor">The constructor.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.DataAccess.SafeTermDestructor`1">
            <summary>
            A safe wrapper around a term destructor.
            </summary>
            <typeparam name="Term"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.DataAccess.SafeTermDestructor`1.#ctor(Microsoft.ExtendedReflection.DataAccess.ITermDestructor{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.DataAccess.SafeTermDestructor`1"/> class.
            </summary>
            <param name="destructor">The destructor.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject">
            <summary>
            Pipes to the console
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.IManagedProject">
            <summary>
            An abstaction of a managed project
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IManagedProject.OpenItem(Microsoft.ExtendedReflection.Emit.ManagedProjectItemKind,System.String)">
            <summary>
            Opens the file.
            </summary>
            <param name="kind">The kind.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IManagedProject.OpenItem(Microsoft.ExtendedReflection.Emit.ManagedProjectItemKind,System.String,System.String,System.String,Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.String,System.String}[])">
            <summary>
            Opens the conditional item.
            </summary>
            <param name="kind">The kind.</param>
            <param name="path">The path.</param>
            <param name="dependsOnPath">The depends on path.</param>
            <param name="condition">The condition.</param>
            <param name="_metadataItems">additional metadata items</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IManagedProject.AddReference(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a reference to the assembly
            </summary>
            <param name="assembly"></param>
            <param name="hintPath"></param>
            <param name="specificVersion"></param>
            <param name="copyLocal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IManagedProject.AddReference(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Adds a reference to the assembly
            </summary>
            <param name="assembly"></param>
            <param name="hintPath"></param>
            <param name="specificVersion"></param>
            <param name="copyLocal"></param>
            <param name="_alias"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IManagedProject.Save">
            <summary>
            Saves the project.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IManagedProject.Reload">
            <summary>
            Reloads the project.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IManagedProject.SetProperty(System.String,System.String,System.String)">
            <summary>
            Sets the property.
            </summary>
            <param name="name">The name.</param>
            <param name="condition">The condition.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IManagedProject.GetProperty(System.String)">
            <summary>
            Gets the property value
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IManagedProject.UpdateProperties(System.String,System.Converter{System.String,System.String})">
            <summary>
            Updates the properties.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="updator">The updator.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IManagedProject.ContainsItem(System.String)">
            <summary>
            Determines whether the specified file name contains item.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>
            	<c>true</c> if the specified file name contains item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IManagedProject.SetKeyFile(System.String)">
            <summary>
            Sets the key file.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IManagedProject.GetUniqueFileName(System.String)">
            <summary>
            Takes a original file name and returns a unique filename if the original filename is already existing
            </summary>
            <param name="originalFileName"></param>        
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IManagedProject.TryGetSourceFiles(System.String[]@)">
            <summary>
            Gets list of source files within the project
            </summary>        
            <param name="sourceFiles">sourceFiles</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IManagedProject.PropertiesDirectory">
            <summary>
            Gets the properties directory.
            </summary>
            <value>The properties directory.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IManagedProject.AssemblyInfoFileName">
            <summary>
            Gets the name of the assembly info file.
            </summary>
            <value>The name of the assembly info file.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IManagedProject.ProjectFile">
            <summary>
            Gets the project file.
            </summary>
            <value>The project file.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IManagedProject.ProjectPath">
            <summary>
            Gets the project path.
            </summary>
            <value>The project file.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IManagedProject.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IManagedProject.FileExtension">
            <summary>
            Gets the file extension, including the leading dot (e.g. '.cs').
            </summary>
            <value>The file extension.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IManagedProject.RootNamespace">
            <summary>
            Gets the root namespace.
            </summary>
            <value>The root namespace.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject"/> class.
            </summary>
            <param name="rootNamespace">The root namespace.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.OpenItem(Microsoft.ExtendedReflection.Emit.ManagedProjectItemKind,System.String)">
            <summary>
            Opens the file.
            </summary>
            <param name="kind">The kind.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.OpenItem(Microsoft.ExtendedReflection.Emit.ManagedProjectItemKind,System.String,System.String)">
            <summary>
            Opens the file.
            </summary>
            <param name="kind">The kind.</param>
            <param name="path">The path.</param>
            <param name="dependsOnPath">The depends on path.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.OpenItem(Microsoft.ExtendedReflection.Emit.ManagedProjectItemKind,System.String,System.String,System.String,Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.String,System.String}[])">
            <summary>
            Opens the conditional item.
            </summary>
            <param name="kind">The kind.</param>
            <param name="path">The path.</param>
            <param name="dependsOnPath">The depends on path.</param>
            <param name="condition">The condition.</param>
            <param name="_metadataItems"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.ContainsItem(System.String)">
            <summary>
            Determines whether the specified file name contains item.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>
            	<c>true</c> if the specified file name contains item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.AddReference(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference,System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="assembly"></param>
            <param name="hintPath"></param>
            <param name="specificVersion"></param>
            <param name="copyLocal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.AddReference(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Adds an assembly reference
            </summary>
            <param name="assembly"></param>
            <param name="hintPath"></param>
            <param name="specificVersion"></param>
            <param name="copyLocal"></param>
            <param name="_alias"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.Reload">
            <summary>
            Reloads the project (not supported)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.SetProperty(System.String,System.String,System.String)">
            <summary>
            Sets the property.
            </summary>
            <param name="name">The name.</param>
            <param name="condition">The condition.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.GetProperty(System.String)">
            <summary>
            Gets the property value
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.UpdateProperties(System.String,System.Converter{System.String,System.String})">
            <summary>
            Updates the properties.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="updator">The updator.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.SetKeyFile(System.String)">
            <summary>
            Sets the key file.
            </summary>
            <param name="keyfile"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.GetUniqueFileName(System.String)">
            <summary>
            Takes a original file name and returns a unique filename if the original filename is already existing
            </summary>
            <param name="originalFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.TryGetSourceFiles(System.String[]@)">
            <summary>
            Gets list of source files within the project
            </summary>        
            <param name="sourceFiles">sourceFiles</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.Microsoft#ExtendedReflection#Emit#IManagedProject#ProjectFile">
            <summary>
            Gets the project file.
            </summary>
            <value>The project file.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.Microsoft#ExtendedReflection#Emit#IManagedProject#FileExtension">
            <summary>
            Gets the file extension.
            </summary>
            <value>The file extension.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.RootNamespace">
            <summary>
            Gets the root namespace.
            </summary>
            <value>The root namespace.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ConsoleManagedProject.ProjectPath">
            <summary>
            Gets the project path.
            </summary>
            <value>The project file.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.IManagedProjectItemWriter">
            <summary>
            A managed project item writer
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IManagedProjectItemWriter.Writer">
            <summary>
            Gets the writer.
            </summary>
            <value>The writer.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.EmitHelper">
            <summary>
            Helpers for the Emit namespace interfaces
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.EmitHelper.BakeMethodBodies(Microsoft.ExtendedReflection.Utilities.Safe.SafeFunc{Microsoft.ExtendedReflection.Emit.IMethodBodyCreator},Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder)">
            <summary>
            Bakes the method bodies.
            </summary>
            <param name="methodBodyCreatorFactory">The method body creator factory.</param>
            <param name="visibility">The visibility.</param>
            <param name="assemblyDefinitionBuilder">The assembly definition builder.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.EmptyMethodBodyWriter">
            <summary>
            Empty method body writer. 
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase">
            <summary>
            An empty IMethodBodyWriter implementation
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.CreateBody">
            <summary>
            Creates the body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Push(System.Byte)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Push(System.Int16)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Push(System.Int32)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Push(System.Int64)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Push(System.Single)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Push(System.Double)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Push(System.Decimal)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushNull">
            <summary>
            Pushes a null value.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Pushes the specified local.
            </summary>
            <param name="local">The local.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Pushes the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Push(System.String)">
            <summary>
            Pushes the specified string value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushSnippet(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Pushes an undefined value.
            </summary>
            <param name="type"></param>
            <param name="text"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushDefault(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Pushes the default value of a type.
            </summary>
            <param name="type"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushPointerToNowhere">
            <summary>
            Pushes pointer to nowhere.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushPointerToValue">
            <summary>
            Pushes (read-only) pointer to operand value.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushPointerToBoundedIUniform">
            <summary>
            Pushes (read-only) pointer to a compound with a bounded length.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushIsTypedPointer(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Pushes a check whether a pointer is typed.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushPointerToStaticField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes pointer to a static field.
            </summary>
            <param name="staticField"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushPointerToInstanceFieldMap(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes pointer to a instance field map.
            </summary>
            <param name="instanceField"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushPointerToArgument(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Pushes pointer to argument.
            </summary>
            <param name="parameter"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushPointerToLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Pushes pointer to local variable.
            </summary>
            <param name="local"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushPointerToStackTop">
            <summary>
            Pushes pointer to stack top;
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Fill">
            <summary>
            Pushes a map filled with the same element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Fuse">
            <summary>
            Updates a map by copying a range from another map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Move">
            <summary>
            Moves all indices of a map by an offset
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Update">
            <summary>
            Updates a map with a key-value pair.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.LogicalNot">
            <summary>
            Performs a logical negation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.ShortCircuitAnd">
            <summary>
            Logical and.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Unary(Microsoft.ExtendedReflection.Metadata.UnaryOperator)">
            <summary>
            Performs a unary operation.
            </summary>
            <param name="operator">The operator.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Binary(Microsoft.ExtendedReflection.Metadata.BinaryOperator)">
            <summary>
            Performs a binary operation.
            </summary>
            <param name="operator"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.IsAssignable">
            <summary>
            Checks whether the first operand is a type whose values are assignable to the second operand type.
            </summary>
            <returns>reference of this instance</returns>
            <remarks>
            The result is a boolean.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.MdIndex(System.Int32)">
            <summary>
            Turns a list of integers into an md-index.
            </summary>
            <param name="rank"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.SelectPointerToStructField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a pointer to a field given the address of a struct.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.SelectPointerToObjectField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a pointer to a field given an object reference.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Select(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Selects from a map at a given index.
            </summary>
            <param name="indexType"></param>
            <param name="elementType"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.SelectObjectProperty(Microsoft.ExtendedReflection.Interpretation.ObjectProperty)">
            <summary>
            Selects an object property.
            </summary>
            <param name="objectProperty"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.SelectField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a field of an object or a struct.
            </summary>
            <param name="instanceField"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.SelectMethod(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Selects a method from the vtable of an object.
            </summary>
            <param name="virtualMethod"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.SelectArrayElementType">
            <summary>
            Selects the element type of an array type.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.SelectBoxValueType">
            <summary>
            Selects the value type of a box type.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.SelectPointerToElement">
            <summary>
            Selects a pointer to an element given the base address of a compound and an index into a numbered element of the compound.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.SelectPointerToOffset(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Selects a pointer to an element given the base address of a compound and an offset measured in the size of the given element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes the specified field.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Pushes the type.
            </summary>
            <param name="type"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushTypeReference(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference)">
            <summary>
            Pushes the type reference.
            </summary>
            <param name="typeReference">The type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.PushMethod(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Pushes the method.
            </summary>
            <param name="method"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.New(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Creates a new object by calling the specified constructor.
            </summary>
            <param name="constructor">The constructor.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.NewSzArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Creates a new sz array, whose length is taken from the stack.
            </summary>
            <param name="elementType">Type of the sz-array elements.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Box(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Boxes the specified element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.NewSzArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Int32)">
            <summary>
            Creates a new sz array, with a fixed number of elements taken from the stack.
            </summary>
            <param name="elementType">Type of the sz-array elements.</param>
            <param name="length">The length.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.NewMdArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Int32)">
            <summary>
            News the md array.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Callstatic(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Callinstance(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Callvirt(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Callvirts the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.IfThenElse">
            <summary>
            Conditional.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Statement">
            <summary>
            Turns the current expression into a statement.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Return(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Turns the current expression into a return-statement.
            </summary>
            <param name="type">type of returned value; optional</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Return">
            <summary>
            Return statement for method with no return value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginDeclareLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Begins the declare local.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndDeclareLocal(System.Boolean,System.Boolean)">
            <summary>
            Ends to declare a local variable.
            </summary>
            <param name="strict">Whether a strictly or lazily initialized variable should be created</param>
            <param name="mayChangeType">whether the code writer may change the type</param>
            <returns>new local variable</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Throw">
            <summary>
            Turns the current expression into a throw-statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginIfThenElse">
            <summary>
            Takes a conditional expression, and starts an if-then-else statement.
            </summary>
            <returns></returns>
            <remarks>
            The protocol of an if-then-else statement is:
            <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginIfThenElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndIfThenElse"/>.
            or
            <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginIfThenElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndIfThenElse"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginThen">
            <summary>
            Marks beginning of then-block; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndThen">
            <summary>
            Marks end of then-block; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginElse">
            <summary>
            Marks beginning of else-block; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndElse">
            <summary>
            Marks end of else-block; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndIfThenElse">
            <summary>
            Marks end of if-then-else
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginTryCatchFinally">
            <summary>
            Starts an exception handling region.
            </summary>
            <returns></returns>
            <remarks>
            The protocol of an eh statement is:
            <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginTryCatchFinally"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginTry"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndTry"/>;
            <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginCatch(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndCatch"/>;
            <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginFinally"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndFinally"/>;
            <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndTryCatchFinally"/>;
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginTry">
            <summary>
            Marks the beginning of a 'try' block.<see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndTry">
            <summary>
            Marks the end of a 'try' block.<see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginCatch(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Marks the beginning of a 'catch' block.<see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginTryCatchFinally"/>
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <param name="declareLocal">Whether to store the exception in a newly declared local.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndCatch">
            <summary>
            Marks the end of a 'catch' block.<see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginFinally">
            <summary>
            Marks the beginning of a 'finally' block.<see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndFinally">
            <summary>
            Marks the end of a 'finally' block.<see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndTryCatchFinally">
            <summary>
            Marks the beginning of a eh region.<see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginUsingScope">
            <summary>
            Starts a 'using' region
            </summary>
            <returns></returns>
            <remarks>
            The protocol of an eh statement is:
            <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginUsingScope"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginUsingScope"/>;
            ...
            <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndUsingDeclaration(System.Boolean,System.Boolean)"/>;
            <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginUsing"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndUsing"/>;
            <see cref="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndUsingScope"/>;
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.UsingDeclaration(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Marks a using header without local
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginUsingDeclaration(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Begins the using declaration.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndUsingDeclaration(System.Boolean,System.Boolean)">
            <summary>
            Marks the end of the using declaration.
            </summary>
            <param name="strict">if set to <c>true</c> [strict].</param>
            <param name="mayChangeType">if set to <c>true</c> [may change type].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginUsing">
            <summary>
            Matks the beginning of the using body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndUsing">
            <summary>
            Marks the end of the using body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndUsingScope">
            <summary>
            Marks the end of using scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.BeginCommentBlock">
            <summary>
            Marks the begin of the comment block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.EndCommentBlock">
            <summary>
            Marks the end of the comment block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Comment(System.String)">
            <summary>
            Writes a line comment
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.IsInst(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Determines whether the specified element layout is inst.
            </summary>
            <param name="elementLayout">The element layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.UnboxAny(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Unboxes a boxed value. This
            creates a statement.
            </summary>
            <param name="elementLayout">The element layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.LoadIndirect(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Loads a value from an address. This
            creates a statement.
            </summary>
            <param name="elementLayout">The element layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.StoreIndirect(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Stores the expression to an address. This
            creates a statement.
            </summary>
            <param name="elementLayout">The element layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Store(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Stores the expression to the specified local. This
            creates a statement.
            </summary>
            <param name="local">The local.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Store(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Stores the expression to the specified parameter. This
            creates a statement.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Storestatic(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Stores the expression to the specified field. This
            creates a statement.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.Storeinstance(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Stores the expression to the specified field. This
            creates a statement.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.StoreArrayElement(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Stores the expression to the specified sz or md array element. This
            creates a statement.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.DeclareLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Declares the local.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.UsingNamespaces">
            <summary>
            Gets the list of imported namespace
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.MethodBodyWriterBase.IsPure">
            <summary>
            Whether the statements and expressions written so far can be represented as proper code
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.ILanguageManager">
            <summary>
            A manager for <see cref="T:Microsoft.ExtendedReflection.Emit.ILanguage"/> instances
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ILanguageManager.AddLanguage(Microsoft.ExtendedReflection.Emit.ILanguage)">
            <summary>
            Adds a language to the manager
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ILanguageManager.TryResolveLanguage(System.String,Microsoft.ExtendedReflection.Emit.ILanguage@)">
            <summary>
            Tries to resolve the language from the language name
            </summary>
            <param name="languageName"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ILanguageManager.LanguageOptions">
            <summary>
            Get configuration options.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ILanguageManager.LanguageHelpersProvider">
            <summary>
            Optional; Gets the language helpers provider, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ILanguageManager.Languages">
            <summary>
            Gets the loaded languages
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ILanguageManager.DefaultLanguage">
            <summary>
            Gets or sets the default language
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.ILanguageOptions">
            <summary>
            Options for code emission
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ILanguageOptions.PreferredLineWidth">
            <summary>
            Gets the prefered line with for emitted source code
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ILanguageOptions.NamespaceMode">
            <summary>
            Gets the way namespace should be emitted
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.IL.ILMethodBodyWriter">
            <summary>
            A <see cref="T:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter"/> implementation for Reflection.Emit
            </summary>
            <remarks>
            This is a partial implementation supporting the explorable factory implementation
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.IL.ILMethodBodyWriter.#ctor(System.Reflection.Emit.ILGenerator,Microsoft.ExtendedReflection.Metadata.Interfaces.IRuntimeMetadataResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Emit.IL.ILMethodBodyWriter"/> class.
            </summary>
            <param name="generator">The generator.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IL.ILMethodBodyWriter.IsPure">
            <summary>
            Whether the statements and expressions written so far can be represented as proper code
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter">
            <summary>
            A thin helper to build xml documentation documents
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter"/> class
            with a string writer
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.WriteStartSummary">
            <summary>
            Begins a summary section
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.WriteEndSummary">
            <summary>
            Ends a summary section
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.Summary(System.String)">
            <summary>
            Writes the value in a summary section
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.WriteStartRemarks">
            <summary>
            Begins a 'remarks' section
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.WriteEndRemarks">
            <summary>
            Closes a remarks section
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.C(System.String)">
            <summary>
            Writes an inlined 'c' section
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.Code(System.String)">
            <summary>
            Writes a 'code' section
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.See(System.String)">
            <summary>
            Writes a 'see' node
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.See(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference)">
            <summary>
            Emits the see node
            </summary>
            <param name="writer"></param>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.See(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference)">
            <summary>
            Writes a 'see' node
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.See(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference)">
            <summary>
            Writes a 'see' node
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.Write(System.String)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.WriteLine(System.String)">
            <summary>
            Writes the line.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.WriteLine">
            <summary>
            Writes a new line.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.Writer">
            <summary>
            Gets the writer.
            </summary>
            <value>The writer.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.XmlDocumentationWriter.XmlWriter">
            <summary>
            Gets the xml writer
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdateVisitor">
            <summary>
            A simple visitor over a codeupdate tree
            </summary>
            <remarks>
            Does not detect cycles.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdateVisitor.Visit(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Visits the specified update.
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdateVisitor.VisitCollection(Microsoft.ExtendedReflection.Feedback.CodeUpdate.CollectionCodeUpdate)">
            <summary>
            Visits the collection.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.DebugFeedback">
            <summary>
            Debug only helper classes for feedback interface implementations
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.DebugFeedback.ForceUpdates(Microsoft.ExtendedReflection.Emit.ILanguage,System.Object)">
            <summary>
            casts event to various feedback api
            and forces the update creation
            </summary>
            <param name="language">The language.</param>
            <param name="event">The @event.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.FeedbackBackgroundUpdateEventArgs">
            <summary>
            A background update event
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.FeedbackBackgroundUpdateEventArgs.Target">
            <summary>
            Gets the background target
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.FeedbackBackgroundUpdateEventArgs.Update">
            <summary>
            Gets the update
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackBackgroundUpdateEventArgs.#ctor(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.FeedbackBackgroundUpdateEventArgs"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="update">The update.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.DescriptionVisibleMode">
            <summary>
            Modes how a IDescriptionSource is rendered
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.DescriptionVisibleMode.No">
            <summary>
            not rendered
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.DescriptionVisibleMode.LongOnly">
            <summary>
            Long description only
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.DescriptionVisibleMode.LongOrTitleAndShort">
            <summary>
            Long description or title and short
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase">
            <summary>
            Writes feedback objects to string
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.#ctor(Microsoft.ExtendedReflection.Feedback.IFeedbackManager,Microsoft.ExtendedReflection.Emit.ILanguageManager)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="feedbackManager"></param>
            <param name="languageManager"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.WriteEvent(System.Object)">
            <summary>
            Writes an event to string
            </summary>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.WriteEvent(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Object)">
            <summary>
            Writes any event to string
            </summary>
            <param name="sb"></param>
            <param name="event"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.WriteCodeUpdateState(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Object)">
            <summary>
            Write the event as a CodeUpdate
            </summary>
            <param name="sb"></param>
            <param name="event"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.WriteCommonTypes(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Object)">
            <summary>
            Renders common types (string, exceptions)
            </summary>
            <param name="sb"></param>
            <param name="event"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.WriteDescription(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Object)">
            <summary>
            Renders as a IDescriptionSource
            </summary>
            <param name="sb"></param>
            <param name="event"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.WritePreviewSource(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Object)">
            <summary>
            Renders as a IPreviewSource
            </summary>
            <param name="sb"></param>
            <param name="event"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.WriteSourceCodeSource(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Object)">
            <summary>
            Renders as a IPreviewSource
            </summary>
            <param name="sb"></param>
            <param name="event"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.TryGetLanguage(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Emit.ILanguage@)">
            <summary>
            Tries to find the language of the project containing the target
            </summary>
            <param name="name"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.GetLanguageOrDefault(Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            name might be null
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.WritePreviewCodeUpdateSource(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Object)">
            <summary>
            Renders as a IPreviewCodeUpdateSource
            </summary>
            <param name="sb"></param>
            <param name="event"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.WriteExceptionOrStackTrace(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Object)">
            <summary>
            Writes the stack trace if available
            </summary>
            <param name="sb"></param>
            <param name="event"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.WriteDumpSource(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Object)">
            <summary>
            Renders as a IDumpSource
            </summary>
            <param name="sb"></param>
            <param name="event"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.FeedbackManager">
            <summary>
            Gets the feedback manager.
            </summary>
            <value>The feedback manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.LanguageManager">
            <summary>
            Gets the language manager.
            </summary>
            <value>The language manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.DescriptionVisible">
            <summary>
            Gets the IDescriptionSource rendering mode
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.StackTraceVisible">
            <summary>
            Displays the stacktrace
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase.DumpVisible">
            <summary>
            Gets or sets a value enabling logging the dump
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.IAuthorizationCodeUpdateSource">
            <summary>
            A source of allowing code updates
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IAuthorizationCodeUpdateSource.TryGetAuthorizationCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get the authorization code update.
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.IFeedbackLogSource">
            <summary>
            Events related to feedback
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Feedback.IFeedbackLogSource.BackgroundUpdateHandler">
            <summary>
            Raised when a new background update is available
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.IFeedbackLog">
            <summary>
            Log method related to feedback objects
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IFeedbackLog.BackgroundUpdate(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Publishes a new background update
            </summary>
            <param name="target"></param>
            <param name="update"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.IPreviewCodeUpdateSource">
            <summary>
            A source of code update
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IPreviewCodeUpdateSource.TryGetPreviewCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get the preview code updates.
            </summary>
            <value>The code updates.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.IPreviewSource">
            <summary>
            Gives a preview of the item
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IPreviewSource.GetPreviewDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the descrition of the preview
            </summary>
            <param name="languageFactory">The language factory.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.IStorageCodeUpdateSource">
            <summary>
            A event that requires to be save before being used.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IStorageCodeUpdateSource.TryGetStorageCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get an update to save this event
            </summary>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.IWorkItemManager">
            <summary>
            A manager that handles workitem (bugs, issues, tasks)
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IWorkItemManager.Connected">
            <summary>
            Checks whether the service is connected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IWorkItemManager.TryCreateWorkItem(Microsoft.ExtendedReflection.Feedback.WorkItem)">
            <summary>
            Creates a new work item based on the event information
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.IWorkItemManager.DefaultWorkItemKind">
            <summary>
            Gets the default workitem kind
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.IWorkItemManager.WorkItemKinds">
            <summary>
            Gets the list of workitem kinds.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Feedback.IWorkItemManager.ProjectContextChanged">
            <summary>
            Raised when the active project was changed (changes the workitem kinds)
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.IWorkItemSource">
            <summary>
            A workitem abstraction
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IWorkItemSource.TryGetWorkItem(Microsoft.ExtendedReflection.Feedback.FeedbackWriterBase,System.String,Microsoft.ExtendedReflection.Feedback.WorkItem@)">
            <summary>
            Tries to get a description source that represents a workitem. <paramref name="workitem"/>
            can also implement additional interfaces.
            </summary>
            <param name="feedbackWriter">The feedback writer.</param>
            <param name="kind">The work item kind.</param>
            <param name="workItem">The work item.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.WorkItem">
            <summary>
            A work item (i.e. bug, issue, feature request, etc...)
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItem.#ctor(System.String,System.String,System.String,Microsoft.ExtendedReflection.Feedback.WorkItemField[],Microsoft.ExtendedReflection.Feedback.WorkItemAttachment[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.WorkItem"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
            <param name="kind">The kind.</param>
            <param name="fields">The fields.</param>
            <param name="attachments">The attachments.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItem.TryGetDescription(System.String@)">
            <summary>
            Tries to get the description
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItem.TryGetKind(System.String@)">
            <summary>
            Tries to get the kind of the workitem
            </summary>
            <param name="kind">The kind.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItem.Equals(Microsoft.ExtendedReflection.Feedback.WorkItem)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItem.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItem.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the workitem to xml
            </summary>
            <param name="writer">The writer.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItem.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Reads a workitem from xml.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.WorkItem.Title">
            <summary>
            Gets the work item title
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.WorkItem.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.WorkItem.Attachments">
            <summary>
            Gets the attachments.
            </summary>
            <value>The attachments.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.WorkItemAttachment">
            <summary>
            A workitem attachement
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemAttachment.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.WorkItemAttachment"/> class.
            </summary>
            <param name="content">The content.</param>
            <param name="fileName">Name of the file.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemAttachment.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the instance to xml.
            </summary>
            <param name="writer">The writer.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemAttachment.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Reads the attachment from xml
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemAttachment.Equals(Microsoft.ExtendedReflection.Feedback.WorkItemAttachment)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemAttachment.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemAttachment.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemAttachment.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.WorkItemAttachment.Content">
            <summary>
            Gets the content of the attachment
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.WorkItemAttachment.FileName">
            <summary>
            Gets the desired file name (used when storing the attachment)
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.WorkItemAttachment.Comment">
            <summary>
            Additional optional comment
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.WorkItemField">
            <summary>
            A workitem field
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemField.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.WorkItemField"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemField.Equals(Microsoft.ExtendedReflection.Feedback.WorkItemField)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemField.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemField.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemField.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemField.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Froms the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemField.AreaPath(System.String)">
            <summary>
            Creates a 'AreaPath' field
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.WorkItemField.IterationPath(System.String)">
            <summary>
            Creates a 'AreaPath' field
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.WorkItemField.Name">
            <summary>
            Gets the field name
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.WorkItemField.Value">
            <summary>
            Gets the field value
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.AllocatedMapSymbolId">
            <summary>
            Symbol id representing the allocated function
            </summary>
            <remarks>
            TODO: Make non-puplic
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.AllocatedMapSymbolId.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.AllocatedMapSymbolId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.AllocatedMapSymbolId"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.AllocatedMapSymbolId.GetPersistentHashCode">
            <summary>
            Gets a strong, persistent hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.AllocatedMapSymbolId.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.AllocatedMapSymbolId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.AllocatedMapSymbolId.Description">
            <summary>
            Textual description of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.AllocatedMapSymbolId.Layout">
            <summary>
            The layout of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.AllocatedMapSymbolId.ObjectCreationTime">
            <summary>
            When the object (or all objects within this value) was created.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.AllocatedMapSymbolId.Microsoft#ExtendedReflection#Interpretation#ISymbolIdWithType#Type">
            <summary>
            Gets type; may be <code>null</code>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.GlobalIndexOfTypeSymbolId">
            <summary>
            Symbol id representing the global index of a type
            </summary>
            <remarks>
            TODO: Make non-public
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.GlobalIndexOfTypeSymbolId.Type">
            <summary>
            The type
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.GlobalIndexOfTypeSymbolId.#ctor(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Initializes a new instance of the global index of a type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.GlobalIndexOfTypeSymbolId.GetPersistentHashCode">
            <summary>
            Gets a strong, persistent hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.GlobalIndexOfTypeSymbolId.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.GlobalIndexOfTypeSymbolId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.GlobalIndexOfTypeSymbolId.Description">
            <summary>
            Textual description of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.GlobalIndexOfTypeSymbolId.Layout">
            <summary>
            The layout of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.GlobalIndexOfTypeSymbolId.ObjectCreationTime">
            <summary>
            When the object (or all objects within this value) was created.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.GlobalIndexOfTypeSymbolId.Microsoft#ExtendedReflection#Interpretation#ISymbolIdWithType#Type">
            <summary>
            Gets type; may be <code>null</code>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsException">
            <summary>
            Exception thrown to indicate that the interpreter has reached certain bounds.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsException.Kind">
            <summary>
            Characterizes reason of out-of-bounds event
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsException.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsKind)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsException.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsKind,System.String)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="kind"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsException.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsKind,System.String,System.Exception)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="kind"></param>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used for serialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsKind">
            <summary>
            Characterizes reason of out-of-bounds event
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsKind.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsKind.Calls">
            <summary>
            Too many calls
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsKind.Branches">
            <summary>
            Too many branches
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsKind.Conditions">
            <summary>
            Too many conditions
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsKind.Stack">
            <summary>
            Too deeply nested calls
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsKind.ExecutionTreeNodes">
            <summary>
            Too many execution tree nodes
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.InterpreterOutOfBoundsKind.Cancelling">
            <summary>
            A cancellation was requested
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource">
            <summary>
            Event source for instruction interpreter
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.CallHandler">
            <summary>
            Occurs when a call is initiated.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.CallReceiverHandler">
            <summary>
            Occurs when the concrete receiver object of a call gets known.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.CallFinishedHandler">
            <summary>
            Occurs when a call finishes.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.LoadLocalHandler">
            <summary>
            Occurs when a local variable is read.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.LoadArgumentHandler">
            <summary>
            Occurs when an argument is read.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.LoadLocalAddressHandler">
            <summary>
            Occurs when the address of a local variable is obtained.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.LoadArgumentAddressHandler">
            <summary>
            Occurs when the address of an argument is obtained.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.StoreLocalHandler">
            <summary>
            Occurs when a value is stored in a local variable.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.StoreArgumentHandler">
            <summary>
            Occurs when a value is stored in an argument.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.LoadSzArrayElementHandler">
            <summary>
            Occurs when an element of an sz-array is read.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.LoadSzArrayElementAddressHandler">
            <summary>
            Occurs when the address of an element of an sz-array is obtained.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.StoreSzArrayElementHandler">
            <summary>
            Occurs when a value is stored in an element of an sz-array.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.LoadMdArrayElementHandler">
            <summary>
            Occurs when an element of an md-array is read.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.LoadMdArrayElementAddressHandler">
            <summary>
            Occurs when the address of an element of an md-array is obtained.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.StoreMdArrayElementHandler">
            <summary>
            Occurs when a value is stored in an element of an md-array.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.LoadFieldHandler">
            <summary>
            Occurs when a field is read.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.LoadFieldAddressHandler">
            <summary>
            Occurs when the address of a field is obtained.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.StoreFieldHandler">
            <summary>
            Occurs when a value is stored in a field.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.LoadIndirectHandler">
            <summary>
            Occurs on an indirect read.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.StoreIndirectHandler">
            <summary>
            Occurs when a value is stored in a location given by an address.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.BinaryOperationHandler">
            <summary>
            Occurs on a binary operation.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource.UnverifiableAccessHandler">
            <summary>
            Occurs on an unverifiable memory access.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterMonitor">
            <summary>
            Default implementation of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.IInstructionInterpreterEventSource"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterBinaryOperationEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterEventArgs">
            <summary>
            Base class for instruction interpreter event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterEventArgs.Interpreter">
            <summary>
            The interpreter.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterBinaryOperationEventArgs.Operator">
            <summary>
            The binary operator.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterBinaryOperationEventArgs.Left">
            <summary>
            The left term.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterBinaryOperationEventArgs.Right">
            <summary>
            The right term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterBinaryOperationEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterBinaryOperationEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="binaryOperator">The binary operator.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadFieldEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadFieldEventArgs.Receiver">
            <summary>
            Can be <code>null</code>, a value, a reference, or an address, depending on <see cref="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadFieldEventArgs.Field"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadFieldEventArgs.Field">
            <summary>
            A static field, or an object instance field, or a struct instance field.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadFieldEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadFieldEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="receiver">The receiver.</param>
            <param name="field">The field.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadIndirectEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadIndirectEventArgs.Address">
            <summary>
            The address.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadIndirectEventArgs.ElementLayout">
            <summary>
            The element layout.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadIndirectEventArgs.Widening">
            <summary>
            The widening.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadIndirectEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Metadata.StackWidening)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadIndirectEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="address">The address.</param>
            <param name="elementLayout">The element layout.</param>
            <param name="widening">The widening.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadLocalEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadLocalEventArgs.Index">
            <summary>
            Index of local variable.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadLocalEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadLocalEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="index">The index.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallEventArgs.Caller">
            <summary>
            The caller.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallEventArgs.CalleeSignature">
            <summary>
            The callee.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallEventArgs.TryGetCallee(Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to obtain the precise callee method.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.IMethodSignature)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="caller">The caller.</param>
            <param name="calleeSignature">The callee signature.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallFinishedEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallReceiverEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallReceiverEventArgs.ConcreteReceiver">
            <summary>
            Concrete receiver object.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallReceiverEventArgs.AbstractReceiver">
            <summary>
            Abstract receiver object.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallReceiverEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.IMethodSignature,System.Object,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallReceiverEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="caller">The caller.</param>
            <param name="callee">The callee.</param>
            <param name="concreteReceiver">The concrete receiver.</param>
            <param name="abstractReceiver">The abstract receiver.</param>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallFinishedEventArgs.ConcreteException">
            <summary>
            Concrete exception object, if any.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallFinishedEventArgs.AbstractException">
            <summary>
            Abstract exception term, if any.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallFinishedEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.IMethodSignature,System.Object,Microsoft.ExtendedReflection.Interpretation.Term,System.Object,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterCallFinishedEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="caller">The caller.</param>
            <param name="calleeSignature">The callee signature.</param>
            <param name="concreteReceiver">The concrete receiver.</param>
            <param name="abstractReceiver">The abstract receiver.</param>
            <param name="concreteException">The concrete exception.</param>
            <param name="abstractException">The abstract exception.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadMdArrayElementEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadMdArrayElementEventArgs.Array">
            <summary>
            The array.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadMdArrayElementEventArgs.Indices">
            <summary>
            The indices.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadMdArrayElementEventArgs.ElementLayout">
            <summary>
            The element layout.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadMdArrayElementEventArgs.Widening">
            <summary>
            The widening.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadMdArrayElementEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[],Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Metadata.StackWidening)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadMdArrayElementEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="array">The array.</param>
            <param name="indices">The indices.</param>
            <param name="elementLayout">The element layout.</param>
            <param name="widening">The widening.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadMdArrayElementEventArgs.Rank">
            <summary>
            Gets the rank of the md-array.
            </summary>
            <value>The rank.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadSzArrayElementEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadSzArrayElementEventArgs.Array">
            <summary>
            The array.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadSzArrayElementEventArgs.Index">
            <summary>
            The index.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadSzArrayElementEventArgs.ElementLayout">
            <summary>
            The element layout.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadSzArrayElementEventArgs.Widening">
            <summary>
            The widening.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadSzArrayElementEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Metadata.StackWidening)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterLoadSzArrayElementEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
            <param name="elementLayout">The element layout.</param>
            <param name="widening">The widening.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreFieldEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreFieldEventArgs.Value">
            <summary>
            Stored value.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreFieldEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreFieldEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="receiver">The receiver.</param>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreIndirectEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreIndirectEventArgs.Address">
            <summary>
            The address.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreIndirectEventArgs.ElementLayout">
            <summary>
            The element layout.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreIndirectEventArgs.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreIndirectEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreIndirectEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="address">The address.</param>
            <param name="elementLayout">The element layout.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreLocalEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreLocalEventArgs.Value">
            <summary>
            Stored value.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreLocalEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,System.Int32,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreLocalEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreMdArrayElementEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreMdArrayElementEventArgs.Array">
            <summary>
            The array.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreMdArrayElementEventArgs.Indices">
            <summary>
            The indices.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreMdArrayElementEventArgs.ElementLayout">
            <summary>
            The element layout.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreMdArrayElementEventArgs.Value">
            <summary>
            The stored value.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreMdArrayElementEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[],Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreMdArrayElementEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="array">The array.</param>
            <param name="indices">The indices.</param>
            <param name="elementLayout">The element layout.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreMdArrayElementEventArgs.Rank">
            <summary>
            Gets the rank.
            </summary>
            <value>The rank.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreSzArrayElementEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreSzArrayElementEventArgs.Array">
            <summary>
            The array.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreSzArrayElementEventArgs.Index">
            <summary>
            The index.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreSzArrayElementEventArgs.ElementLayout">
            <summary>
            The element layout.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreSzArrayElementEventArgs.Value">
            <summary>
            The stored value.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreSzArrayElementEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterStoreSzArrayElementEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
            <param name="elementLayout">The element layout.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterUnverifiableAccessEventArgs">
            <summary>
            Event args.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterUnverifiableAccessEventArgs.ElementLayout">
            <summary>
            The element layout.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterUnverifiableAccessEventArgs.Operation">
            <summary>
            The operation.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterUnverifiableAccessEventArgs.Description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterUnverifiableAccessEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.ExtendedReflection.Metadata.Layout,System.String,Microsoft.ExtendedReflection.Interpretation.Interpreter.IValidAddressConditionDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.Monitoring.InstructionInterpreterUnverifiableAccessEventArgs"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="elementLayout">The element layout.</param>
            <param name="operation">The operation.</param>
            <param name="description">The description.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.PathCompressionManager">
            <summary>
            The default implementation of <see cref="T:Microsoft.ExtendedReflection.Interpretation.IPathCompressionManager"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.IPathCompressionManager">
            <summary>
            Interface of the path compression manager
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IPathCompressionManager.TryCompress(Microsoft.ExtendedReflection.Interpretation.ICompressedPath@)">
            <summary>
            Tries to compress a path.
            </summary>
            <param name="compressedPath">The compressed path.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IPathCompressionManager.TryDecompress(Microsoft.ExtendedReflection.Interpretation.ICompressedPath)">
            <summary>
            Tries to the decompress a previously compressed path.
            </summary>
            <param name="compressedPath">The compressed path.</param>
            <remarks>
            When the return value is <code>false</code>, the current path is in an undefined state, and should be abandoned.
            </remarks>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.IPathCompressionManager.OnCompression">
            <summary>
            Occurs when the current path is to be compressed.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.IPathCompressionManager.OnDecompression">
            <summary>
            Occurs when the current path is to be decompressed.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.PathCompressionManager.TryCompress(Microsoft.ExtendedReflection.Interpretation.ICompressedPath@)">
            <summary>
            Tries to compress a path.
            </summary>
            <param name="compressedPath">The compressed path.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.PathCompressionManager.TryDecompress(Microsoft.ExtendedReflection.Interpretation.ICompressedPath)">
            <summary>
            Tries to the decompress a previously compressed path.
            </summary>
            <param name="compressedPath">The compressed path.</param>
            <returns></returns>
            <remarks>
            When the return value is <code>false</code>, the current path is in an undefined state, and should be abandoned.
            </remarks>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.PathCompressionManager.OnCompression">
            <summary>
            Occurs when the current path is to be compressed.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Interpretation.PathCompressionManager.OnDecompression">
            <summary>
            Occurs when the current path is to be decompressed.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ICompressedPath">
            <summary>
            Identifier of a compressed path.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.PathCompressionEventArgs">
            <summary>
            A mutable map of key-value pairs, used for compressing the current path
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.PathCompressionEventArgs.Add(System.Object,System.Object)">
            <summary>
            Adds the specified key-value pair.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.PathCompressionEventArgs.Cancel">
            <summary>
            Cancels this instance.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.PathCompressionEventArgs.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.PathCompressionEventArgs.IsCanceled">
            <summary>
            Gets a value indicating whether this instance is canceled.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.PathDecompressionEventArgs">
            <summary>
            An immutable map of key-value pairs, used for decompressing the current path
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.PathDecompressionEventArgs.#ctor(Microsoft.ExtendedReflection.Collections.IFiniteMap{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.PathDecompressionEventArgs"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.PathDecompressionEventArgs.Get``1(System.Object)">
            <summary>
            Gets the value at the specified key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.PathDecompressionEventArgs.TryGet``1(System.Object,``0@)">
            <summary>
            Tries to the value at the specified key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.PathDecompressionEventArgs.Cancel">
            <summary>
            Cancels this instance.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.PathDecompressionEventArgs.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.PathDecompressionEventArgs.IsCanceled">
            <summary>
            Gets a value indicating whether this instance is canceled.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ISymbolIdWithSegment">
            <summary>
            A symbol id associated to a segment
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.ISymbolIdWithSegment.CloneToSegment(System.Int32)">
            <summary>
            Clones the symbol id to a new segment index
            </summary>
            <param name="newSegmentIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.ISymbolIdWithSegment.SegmentIndex">
            <summary>
            Gets the index of the segment.
            </summary>
            <value>The index of the segment.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Term">
            <summary>
            Abstract base class that represents a term.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Term.GetHashCode">
            <summary>
            Retrieves a unique hashcode for this term
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Term.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Term.AssumeIsValid(Microsoft.ExtendedReflection.Interpretation.Term,System.String)">
            <summary>
            Assume that the given term is valid.
            </summary>
            <param name="term">The term.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Term.AssertIsValid(Microsoft.ExtendedReflection.Interpretation.Term,System.String)">
            <summary>
            Assert that the given term is valid.
            </summary>
            <param name="term">The term.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.NoTerms">
            <summary>
            Empty term array.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.Layout">
            <summary>
            Retrieves the layout of this term.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.IsDefault">
            <summary>
            Whether this term is the default term of its layout.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.IsOne">
            <summary>
            Whether this term represents the number one (the neutral element of multiplication)
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.IsOdd">
            <summary>
            Whether the least significant bit is set.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.IsMinusOne">
            <summary>
            Whether this term represents the number minus one (the value where all bits are set)
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.IsNotDefault">
            <summary>
            Whether this term is distinct from the default term of its layout.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.IsNotNegative">
            <summary>
            If this term is a <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.I1"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.I2"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.I4"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.I8"/>, 
            whether its highest-most bit is zero.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.IsNegative">
            <summary>
            If this term is a <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.I1"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.I2"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.I4"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.I8"/>, 
            whether its highest-most bit is set.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.StaticElementType">
            <summary>
            Known static type of compound element
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.StaticType">
            <summary>
            Known static type if term has reference layout
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.IsValue">
            <summary>
            Whether this term represents a constant.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.IsProperStackBoolean">
            <summary>
            Whether this term is a proper stack boolean.
            </summary>
            <remarks>
            See <see cref="M:TermManagerBase`1.IsProperStackBoolean"/> 
            for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.AreAllAc1OperandsShifts">
            <summary>
            Property to support a little hack
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.AreAllAc1OperandsProperStackBooleans">
            <summary>
            Whether this term is an ac1 term and all operands are proper stack booleans.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.IsSimpleLogicalIfThenElse">
            <summary>
            Whether this term is an IfThenElse term that can be cheaply represented as an Ac1 And or Or term
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.IsNegatedLogicalIfThenElse">
            <summary>
            Whether this term is an IfThenElse term that can be represented as an Ac1 And or Or term, but this blows up the size of the representation
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.ObjectCreationTime">
            <summary>
            Obvious meaning when <see cref="P:Microsoft.ExtendedReflection.Interpretation.Term.Layout"/> has <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Ref"/>.
            Otherwise, it refers to all components of the value which have <see cref="F:Microsoft.ExtendedReflection.Metadata.LayoutKind.Ref"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.Term.UniqueIndex">
            <summary>
            Retrieves an integer value
            that identifies this term uniquely.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.TypeEqFunctionId">
            <summary>
            A class representing a type equality test
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.TypeEqFunctionId.Instance">
            <summary>
            An instance for this singleton class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TypeEqFunctionId.#ctor">
            <summary>
            Initializes a new instance of the type equality test.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TypeEqFunctionId.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType@)">
            <summary>
            For pretty-printing purposes
            </summary>
            <param name="declaringType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TypeEqFunctionId.IsProperStackBoolean(System.Boolean[])">
            <summary>
            Computes whether the application of this function yields zero or one in <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/>.
            </summary>
            <param name="argumentsAreProperStackBooleans"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TypeEqFunctionId.GetPersistentHashCode">
            <summary>
            Gets a strong, persistent hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TypeEqFunctionId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TypeEqFunctionId.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TypeEqFunctionId.IsStatic">
            <summary>
            For pretty-printing purposes
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TypeEqFunctionId.ShortName">
            <summary>
            Name of this function
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TypeEqFunctionId.FullName">
            <summary>
            Full name of this function
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TypeEqFunctionId.ResultLayout">
            <summary>
            The result layout of an application of this function.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TypeEqFunctionId.ParameterLayouts">
            <summary>
            Instance methods/constructors have the receiver as the first parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TypeEqFunctionId.Method">
            <summary>
            Optional; method which implements this function.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.TypeOfMapSymbolId">
            <summary>
            Symbol id representing the typed functions
            </summary>
            <remarks>
            TODO: Make non-puplic
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.TypeOfMapSymbolId.TypeLevel">
            <summary>
            The MapLayout
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TypeOfMapSymbolId.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.TypeOfMapSymbolId"/> class.
            </summary>
            <param name="typeLevel">The type level.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TypeOfMapSymbolId.GetPersistentHashCode">
            <summary>
            Gets a strong, persistent hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TypeOfMapSymbolId.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TypeOfMapSymbolId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TypeOfMapSymbolId.Description">
            <summary>
            Textual description of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TypeOfMapSymbolId.Layout">
            <summary>
            The layout of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TypeOfMapSymbolId.ObjectCreationTime">
            <summary>
            When the object (or all objects within this value) was created.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TypeOfMapSymbolId.Microsoft#ExtendedReflection#Interpretation#ISymbolIdWithType#Type">
            <summary>
            Gets type; may be <code>null</code>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid">
            <summary>
            Dummy type.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.CachedExplorationLog">
            <summary>
            Default implementation of <see cref="T:Microsoft.ExtendedReflection.Logging.ICachedExplorationLog"/> service
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ICachedExplorationLog">
            <summary>
            Cached exploration log events
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ICachedExplorationLog.AddObservedCallMismatch(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Logs an observed call mismatch (if cache miss)
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ICachedExplorationLog.AddUninstrumentedCall(Microsoft.ExtendedReflection.Metadata.CodeLocation,Microsoft.ExtendedReflection.Metadata.IMethodSignature,System.Boolean)">
            <summary>
            Logs an uninstrumented method call (if cache miss)
            </summary>
            <param name="location">The location.</param>
            <param name="signature">The signature.</param>
            <param name="hasSymbolicArguments">Whether any arguments of the call were symbolic.</param>
            <returns>true if cache miss</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ICachedExplorationLog.AddUninstrumentedCall(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Logs an uninstrumented method call
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ICachedExplorationLog.AddStaticFieldStore(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Logs a static-field-store (if cache miss)
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.CachedExplorationLog.Initialize">
            <summary>
            Initializes the service
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.CachedExplorationLog.AddExplorationImprecision(Microsoft.ExtendedReflection.Metadata.CodeLocation)">
            <summary>
            Adds the exploration imprecision.
            </summary>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.CachedExplorationLog.AddUninstrumentedCall(Microsoft.ExtendedReflection.Metadata.CodeLocation,Microsoft.ExtendedReflection.Metadata.IMethodSignature,System.Boolean)">
            <summary>
            Logs an uninstrumented method call
            </summary>
            <param name="location">The location.</param>
            <param name="signature">The signature.</param>
            <param name="hasSymbolicArguments">if set to <c>true</c> [has symbolic arguments].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.CachedExplorationLog.AddUninstrumentedCall(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Adds the uninstrumented call to the log (if cache miss)
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.CachedExplorationLog.CreateUninstrumentedMethod(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult,System.Boolean,System.String,Microsoft.ExtendedReflection.Symbols.StackTraceName)">
            <summary>
            Creates the uninstrumented method.
            </summary>
            <param name="method">The method.</param>
            <param name="filterResult">The filter result.</param>
            <param name="isDeclaringTypeExported">if set to <c>true</c> [is declaring type exported].</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="stackTrace">The stack trace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.CachedExplorationLog.UninstrumentedCallLocationAdded(Microsoft.ExtendedReflection.Metadata.CodeLocation,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Notification that a new uninstrumented call location has been found.
            </summary>
            <param name="location">The location.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.CachedExplorationLog.AddObservedCallMismatch(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Logs an observed call mismatch (if cache miss)
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.CachedExplorationLog.CreateObservedCallMismatch(Microsoft.ExtendedReflection.Symbols.StackTraceName,Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Metadata.Names.MethodName,System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.MethodName,System.String)">
            <summary>
            Creates the observed call mismatch.
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <param name="callerMethodName">Name of the caller method.</param>
            <param name="intendedCalleeMethodName">Name of the intended callee method.</param>
            <param name="isExported">if set to <c>true</c> [is exported].</param>
            <param name="actualCalleeMethodName">Actual name of the callee method.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.CachedExplorationLog.AddStaticFieldStore(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Logs a static-field-store (if cache miss)
            </summary>
            <param name="staticField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.CachedExplorationLog.CreateStaticFieldStore(Microsoft.ExtendedReflection.Symbols.StackTraceName,Microsoft.ExtendedReflection.Metadata.Names.FieldName,System.Boolean,System.String)">
            <summary>
            Creates the static field store.
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="isExported">if set to <c>true</c> [is exported].</param>
            <param name="wikiTopic">The wiki topic.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.FeedbackLog">
            <summary>
            Abstract base class for <see cref="T:Microsoft.ExtendedReflection.Feedback.IFeedbackLog"/> implementations
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.EventLog">
            <summary>
            Abstract base class for <see cref="T:Microsoft.ExtendedReflection.Logging.IEventLog"/> implementations
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.IEventLogSource">
            <summary>
            Exposes logging events.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.IEventLogSource.LogHandler">
            <summary>
            Raised on each log event
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.IEventLogSource.ReflectionEventHandler">
            <summary>
            Raised on reflection events
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.IEventLogSource.DumpHandler">
            <summary>
            Raised when the logger is dumping information
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.IEventLogSource.HyperlinkEventHandler">
            <summary>
            Raised when a DGML graph is generated
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.IEventLogSource.ClosingHandler">
            <summary>
            Raised when logger is closing
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.EventLog"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.Initialize">
            <summary>
            Initializes the logger
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.WorkerThreadAsForeground(System.Threading.Thread)">
            <summary>
            Sets a worker thread as foreground
            </summary>
            <param name="thread">The thread.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.AddEventFilter(Microsoft.ExtendedReflection.Logging.ILogEventFilter)">
            <summary>
            Adds the event filter.
            </summary>
            <param name="eventFilter">The event filter.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.IsIgnored(Microsoft.ExtendedReflection.Logging.LogLevel,System.String,System.String,System.String,System.Exception,Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Determines whether the specified level is ignored.
            </summary>
            <param name="level">The level.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="targetName">Name of the target (may be null).</param>
            <returns>
            	<c>true</c> if the specified level is ignored; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.IsIgnored(Microsoft.ExtendedReflection.Logging.LogLevel,System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Exception,Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Logging.LogEventArgs@)">
            <summary>
            Determines whether the specified level is ignored.
            </summary>
            <param name="level">The level.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="targetName">Name of the target (may be null).</param>
            <param name="args">The <see cref="T:Microsoft.ExtendedReflection.Logging.LogEventArgs"/> instance containing the event data.</param>
            <returns>
            	<c>true</c> if the specified level is ignored; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.Log(Microsoft.ExtendedReflection.Logging.LogLevel,System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Exception,Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Logs the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="targetName">Name of the target (may be null).</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogUnfiltered(Microsoft.ExtendedReflection.Logging.LogEventArgs)">
            <summary>
            Logs event without applying filters
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.Dump(System.String,System.String,System.String)">
            <summary>
            Dumps information
            </summary>
            <param name="category">The category.</param>
            <param name="title">The title.</param>
            <param name="body">The body.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.Dump(System.String,Microsoft.ExtendedReflection.Logging.DumpTree)">
            <summary>
            Dumps the tree.
            </summary>
            <param name="category">The category.</param>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.CreateDumpWriter(System.String,System.String)">
            <summary>
            Opens a dump writer to build a dump tree
            </summary>
            <param name="category">The category.</param>
            <param name="title">The title.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogNoisy(System.String,System.String)">
            <summary>
            Logs a very verbose message
            </summary>
            <param name="category"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogNoisy(System.String,System.String,System.Object[])">
            <summary>
            Logs a very verbose message
            </summary>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogVerbose(System.String,System.String)">
            <summary>
            Logs a verbose event
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogVerbose(System.String,System.String,System.Object[])">
            <summary>
            Logs a verbose event
            </summary>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogMessage(System.String,System.String)">
            <summary>
            Logs an informational event
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogMessage(System.String,System.String,System.Object[])">
            <summary>
            Logs an informational event
            </summary>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogWarning(System.String,System.String,System.String)">
            <summary>
            Logs an warning event
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogWarning(System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String)">
            <summary>
            Logs an warning event
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogWarning(System.String,System.String,System.String,System.Object[])">
            <summary>
            Logs an warning event
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogWarning(System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Object[])">
            <summary>
            Logs an warning event
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogWarningFromException(System.Exception,System.String,System.String,System.String)">
            <summary>
            Logs an warning event
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogWarningFromException(System.Exception,System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String)">
            <summary>
            Logs an warning event
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogWarningFromException(System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Logs an warning event
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogWarningFromException(System.Exception,System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Object[])">
            <summary>
            Logs an warning event
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogError(System.String,System.String,System.String)">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogError(System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String)">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogError(System.String,System.String,System.String,System.Object[])">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogError(System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Object[])">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogErrorFromException(System.Exception,System.String,System.String,System.String)">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogErrorFromException(System.Exception,System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String)">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogErrorFromException(System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogErrorFromException(System.Exception,System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Object[])">
            <summary>
            Logs an error event; errors are usually caused by wrong user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogCriticalFromException(System.Exception,System.String,System.String,System.String)">
            <summary>
            Logs a critical error event; critical errors are internal errors and should never happen regardless of user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.LogCriticalFromException(System.Exception,System.String,System.String,System.String,System.Object[])">
            <summary>
            Logs a critical error event; critical errors are internal errors and should never happen regardless of user input.
            </summary>
            <param name="ex">The ex.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="category">The category.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.ReflectionErrorFromException(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.String,System.Exception)">
            <summary>
            Logs a reflection error from an exception
            </summary>
            <param name="targetName">Name of the target.</param>
            <param name="attributeTypeName">Name of the attribute type.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.ReflectionWarningFromException(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.String,System.Exception)">
            <summary>
            Logs a reflection error from an exception
            </summary>
            <param name="targetName">Name of the target.</param>
            <param name="attributeTypeName">Name of the attribute type.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.ReflectionError(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String)">
            Logs a reflection error
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.ReflectionError(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Object[])">
            Logs a reflection error
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.ReflectionWarning(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String)">
            <summary>
            Logs a reflection warning
            </summary>
            <param name="targetName">Name of the target.</param>
            <param name="attributeTypeName">Name of the attribute type.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.ReflectionWarning(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,System.Object[])">
            <summary>
            Logs a reflection warning
            </summary>
            <param name="targetName">Name of the target.</param>
            <param name="attributeTypeName">Name of the attribute type.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="codeUpdate">The code update.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.ReflectionEvent(Microsoft.ExtendedReflection.Logging.ReflectionEventEventArgs)">
            <summary>
            Logs a reflection event.
            </summary>
            <param name="e">The <see cref="T:Microsoft.ExtendedReflection.Logging.ReflectionEventEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.Hyperlink(System.String,System.String)">
            <summary>
            Logs a linked document
            </summary>
            <param name="title"></param>
            <param name="url"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.Hyperlink(Microsoft.ExtendedReflection.Logging.HyperlinkEventArgs)">
            <summary>
            Logs a linked document
            </summary>
            <param name="hyperlink"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.Flush">
            <summary>
            Flushes pending log operations
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventLog.Close">
            <summary>
            Closes the logger
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.EventLog.ForegroundThreadId">
            <summary>
            Gets the foreground thread id.
            </summary>
            <value>The foreground thread id.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.EventLog.EventFilters">
            <summary>
            Gets the event filters.
            </summary>
            <value>The event filters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.EventLog.WarningCount">
            <summary>
            Gets the warning count.
            </summary>
            <value>The warning count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.EventLog.ErrorCount">
            <summary>
            Gets the error count.
            </summary>
            <value>The error count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.EventLog.CriticalCount">
            <summary>
            Gets the critical count.
            </summary>
            <value>The critical count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.EventLog.ReflectionErrorCount">
            <summary>
            Gets the reflection error count.
            </summary>
            <value>The reflection error count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.EventLog.ReflectionWarningCount">
            <summary>
            Gets the reflection warning count.
            </summary>
            <value>The reflection warning count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.EventLog.Verbosity">
            <summary>
            Gets or sets the mimimum level.
            </summary>
            <value>The mimimum level.</value>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.EventLog.LogHandler">
            <summary>
            Raised on each log event
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.EventLog.ReflectionEventHandler">
            <summary>
            Raised when a reflection event occurs
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.EventLog.DumpHandler">
            <summary>
            Raised when information is dumped
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.EventLog.ClosingHandler">
            <summary>
            Raised when the logger is closing
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.EventLog.HyperlinkEventHandler">
            <summary>
            Raised when a DGML graph is generated
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.DumpTreeWriter">
            <summary>
            Abstract base class for dump writer
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.DumpTreeWriter"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="outputDirectory">The output directory. 
            If output directory is null, no resource aware writer are used</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.Close">
            <summary>
            Closes and flushes the writer
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.CreateTree">
            <summary>
            Creates the immutable tree (not cached)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.StartNode(System.String)">
            <summary>
            Open a node in the output tree
            </summary>
            <param name="title">The title.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.StartNode(System.String,System.Object[])">
            <summary>
            Open a node in the output tree
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.NodeSExp(System.String,Microsoft.ExtendedReflection.Interpretation.TermSExpWriter,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Renders the conjunct in a node
            </summary>
            <param name="title">The title.</param>
            <param name="sexpWriter">The sexp writer.</param>
            <param name="conjunct">The conjunct.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.EndNode(System.Object)">
            <summary>
            closes a node, and asserts (in DEBUG) that the given token (if any) corresponds to the token obtained from StartNode.
            </summary>
            <param name="token">token returned by StartNode</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.NodeTitle(System.String)">
            <summary>
            Creates an empty node with the specified title
            </summary>
            <param name="title">The title.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.NodeTitle(System.String,System.Object[])">
            <summary>
            Creates an empty node with the specified title
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.NodeString(Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString)">
            <summary>
            Create a node with the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.WriteLine">
            <summary>
            Writes the line.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.WriteLine(System.String)">
            <summary>
            Writes the text and a new line.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.WriteLine(System.String,System.Object)">
            <summary>
            Writes the formatted text and a new line.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The arg0.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the formatted text and a new line.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.Write(System.String)">
            <summary>
            Writes the text
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.Write(System.String,System.Object)">
            <summary>
            Writes the formatted text
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The arg0.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.Write(System.String,System.Object[])">
            <summary>
            Writes the formatted text
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.CreateTextWriter">
            <summary>
            Creates a writer; all text written to that writer will be placed into the current node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.CloseTextWriter(System.IO.TextWriter)">
            <summary>
            Closes the current writer, and asserts (in DEBUG) that the current writer is the specified textWriter
            </summary>
            <param name="textWriter">current writer</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeWriter.CloseTextWriter">
            <summary>
            Closes the current writer;
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.FeedbackLog.BackgroundUpdate(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Publishes a new background update
            </summary>
            <param name="target"></param>
            <param name="update"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.FeedbackLog.Close">
            <summary>
            Closes the logger
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.FeedbackLog.BackgroundUpdateHandler">
            <summary>
            Raised when a new background update is available
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.IStaticFieldStoreFilter">
            <summary>
            A filter of static field stores.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IStaticFieldStoreFilter.Ignore(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Whether a static-field-store should be ignored (and not flagged with a warning).
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.IStaticFieldStoreFilterManager">
            <summary>
            A filter interface used to triage static-field-store messages
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IStaticFieldStoreFilterManager.Add(Microsoft.ExtendedReflection.Logging.IStaticFieldStoreFilter)">
            <summary>
            Adds a filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.IUninstrumentedMethodFilterManager">
            <summary>
            A filter interface used to triage uninstrumented
            method messages
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.IUninstrumentedMethodFilter">
            <summary>
            A filter of uninstrumented calls.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IUninstrumentedMethodFilter.Apply(Microsoft.ExtendedReflection.Metadata.Method,System.Boolean)">
            <summary>
            Applies the filter 
            to check whether an uninstrumented call to a method should be ignored (and not flagged with a warning).
            </summary>
            <param name="method">The method.</param>
            <param name="hasSymbolicArguments">Whether any arguments in the call were symbolic.</param>
            <returns><code>null</code> if the filter does not apply</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IUninstrumentedMethodFilterManager.Add(Microsoft.ExtendedReflection.Logging.IUninstrumentedMethodFilter)">
            <summary>
            Adds a filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult">
            <summary>
            Abstract base class of uninstrumented method filter results;
            results are immutable data types
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.LimitationsHelperTypeName">
            <summary>
            A type with this name contains methods which represent arbitrary kinds of limitations.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.TestabilityHelperTypeName">
            <summary>
            A type with this name contains methods which represent arbitrary kinds of 
            testability issues.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.IsUninstrumentedHelperType(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Determines if the type is a uninstrumented helper type
            </summary>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.TryGetWikiTopic(System.String@)">
            <summary>
            Tries to get the wiki link.
            </summary>
            <param name="wikiTopic">The wiki link.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.TryWriteLongDescription(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage},System.IO.TextWriter)">
            <summary>
            Tries to write a description.
            </summary>
            <param name="method">The method.</param>
            <param name="languageFactory">The language factory.</param>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.MakeTitle(Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Makes the title.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.TryGetImageKey(System.String@)">
            <summary>
            Tries to get the image key for the current filter
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Rank">
            <summary>
            The highest-ranked filter wins.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.DelegateMethod">
            <summary>
            Filter result indicating 
            that this uninstrumented method should be forgotten.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.DelegateMethod.Instance">
            <summary>
            Gets the singleton <see cref="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Ignore"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.DelegateMethod.Conditional(System.Boolean)">
            <summary>
            Gets null or <see cref="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.DelegateMethod.Instance"/>.
            </summary>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.DelegateMethod.TryWriteLongDescription(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage},System.IO.TextWriter)">
            <summary>
            Tries to write a description.
            </summary>
            <param name="method">The method.</param>
            <param name="languageFactory">The language factory.</param>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.DelegateMethod.MakeTitle(Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Makes the title.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Ignore">
            <summary>
            Filter result indicating 
            that this uninstrumented method should be ignored.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Ignore.Instance">
            <summary>
            Gets the singleton <see cref="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Ignore"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Ignore.Conditional(System.Boolean)">
            <summary>
            Gets null or <see cref="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Ignore.Instance"/>.
            </summary>
            <param name="ignore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Ignore.TryWriteLongDescription(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage},System.IO.TextWriter)">
            <summary>
            Tries to write a description.
            </summary>
            <param name="method">The method.</param>
            <param name="languageFactory">The language factory.</param>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Ignore.MakeTitle(Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Makes the title.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.TestabilityIssue">
            Filter result indicating 
            that this uninstrumented method represents a testability issue
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.TestabilityIssue.TestabilityImageKeyName">
            <summary>
            Gets the testability image key name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.TestabilityIssue.#ctor(System.String,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.TestabilityIssue"/> class.
            </summary>
            <param name="wikiTopic">The optional wiki link.</param>
            <param name="uri">The optional URI.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.TestabilityIssue.TryGetUri(System.Uri@)">
            <summary>
            Tries to get the URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.TestabilityIssue.TryGetWikiTopic(System.String@)">
            <summary>
            Tries to get the wiki link.
            </summary>
            <param name="wikiTopic">The wiki link.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.TestabilityIssue.TryGetImageKey(System.String@)">
            <summary>
            Returns 'Testability'
            </summary>
            <param name="imageKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.TestabilityIssue.TryWriteLongDescription(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage},System.IO.TextWriter)">
            <summary>
            Tries to write a description.
            </summary>
            <param name="method">The method.</param>
            <param name="languageFactory">The language factory.</param>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.TestabilityIssue.MakeTitle(Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Makes the title.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Limitation">
            <summary>
            Filter result indicating 
            that this uninstrumented method cannot be reasoned about because of a limitation of the infrastructure.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Limitation.LimitationImageKeyName">
            <summary>
            Gets the image key name for this event
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Limitation.Instance">
            <summary>
            Gets the singleton <see cref="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Ignore"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Limitation.TryGetWikiTopic(System.String@)">
            <summary>
            Tries to get the wiki link.
            </summary>
            <param name="wikiTopic">The wiki link.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Limitation.TryWriteLongDescription(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage},System.IO.TextWriter)">
            <summary>
            Tries to write a description.
            </summary>
            <param name="method">method</param>
            <param name="languageFactory">The language factory.</param>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Limitation.MakeTitle(Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Makes the title.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.External">
            <summary>
            Filter result indicating 
            that this uninstrumented method is external
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.External.ExternalImageKeyName">
            <summary>
            External image key name
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.External.Instance">
            <summary>
            Gets the singleton <see cref="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Ignore"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.External.TryGetWikiTopic(System.String@)">
            <summary>
            Tries to get the wiki link.
            </summary>
            <param name="wikiTopic">The wiki link.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.External.TryGetImageKey(System.String@)">
            <summary>
            Tries to get the image key for the current filter
            </summary>
            <param name="imageKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.External.TryWriteLongDescription(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage},System.IO.TextWriter)">
            <summary>
            Tries to write a description.
            </summary>
            <param name="method">method</param>
            <param name="languageFactory">The language factory.</param>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.External.MakeTitle(Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Makes the title.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Uninstrumentable">
            <summary>
            Filter result indicating 
            that this uninstrumented method is uninstrumentable
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Uninstrumentable.UninstrumentableImageKeyName">
            <summary>
            External image key name
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Uninstrumentable.Instance">
            <summary>
            Gets the singleton <see cref="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Uninstrumentable"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Uninstrumentable.TryGetWikiTopic(System.String@)">
            <summary>
            Tries to get the wiki link.
            </summary>
            <param name="wikiTopic">The wiki link.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Uninstrumentable.TryGetImageKey(System.String@)">
            <summary>
            Tries to get the image key for the current filter
            </summary>
            <param name="imageKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Uninstrumentable.TryWriteLongDescription(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage},System.IO.TextWriter)">
            <summary>
            Tries to write a description.
            </summary>
            <param name="method">method</param>
            <param name="languageFactory">The language factory.</param>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Uninstrumentable.MakeTitle(Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Makes the title.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.V1Module">
            <summary>
            Filter result indicating 
            that this uninstrumented method is a V1 module
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.V1Module.V1ModuleImageKeyName">
            <summary>
            Gets the image key for this filter
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.V1Module.Instance">
            <summary>
            Gets the singleton <see cref="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.Ignore"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.V1Module.TryGetWikiTopic(System.String@)">
            <summary>
            Tries to get the wiki link.
            </summary>
            <param name="wikiTopic">The wiki link.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.V1Module.TryGetImageKey(System.String@)">
            <summary>
            Tries to get the image key for the current filter
            </summary>
            <param name="imageKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.V1Module.TryWriteLongDescription(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage},System.IO.TextWriter)">
            <summary>
            Tries to write a description.
            </summary>
            <param name="method">method</param>
            <param name="languageFactory">The language factory.</param>
            <param name="writer">The writer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult.V1Module.MakeTitle(Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Makes the title.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ObservedCallMismatch">
            <summary>
            An uninstrumented method was encountered
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ObservedCallMismatch.ImageKeyName">
            <summary>
            Default image key name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ObservedCallMismatch.#ctor(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Metadata.Names.MethodName,System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Symbols.StackTraceName,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.ObservedCallMismatch"/> class.
            </summary>
            <param name="_callerMethod">The caller method.</param>
            <param name="intendedCalleeMethodIsDeclaringTypeExported"></param>
            <param name="_intendedCalleeMethod">The intended callee method.</param>
            <param name="actualCalleeMethod">The actual callee method.</param>
            <param name="_stackTrace">The stack trace.</param>
            <param name="wikiTopic">The wiki topic.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ObservedCallMismatch.TryGetCallerMethod(Microsoft.ExtendedReflection.Metadata.Names.MethodName@)">
            <summary>
            Gets the caller method, if any.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ObservedCallMismatch.TryGetIntendedCalleeMethod(Microsoft.ExtendedReflection.Metadata.Names.MethodName@)">
            <summary>
            Gets the callee method.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ObservedCallMismatch.TryGetStackTrace(Microsoft.ExtendedReflection.Symbols.StackTraceName@)">
            <summary>
            Gets the stack trace (might be null)
            </summary>
            <value>The stack trace.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ObservedCallMismatch.Equals(Microsoft.ExtendedReflection.Logging.ObservedCallMismatch)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ObservedCallMismatch.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ObservedCallMismatch.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ObservedCallMismatch.Internalize">
            <summary>
            Internalizes this instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ObservedCallMismatch.ActualCalleeMethod">
            <summary>
            Gets the callee method.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ObservedCallMismatch.IntendedCalleeMethodIsDeclaringTypeExported">
            <summary>
            Gets a value indicating whether the method's declaring type is exported.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ObservedCallMismatch.WikiTopic">
            <summary>
            Gets the help topic.
            </summary>
            <value>The help topic.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ObservedCallMismatchEventArgs">
            <summary>
            Event arg wrapping a <see cref="P:Microsoft.ExtendedReflection.Logging.ObservedCallMismatchEventArgs.ObservedCallMismatch"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ObservedCallMismatchEventArgs.#ctor(Microsoft.ExtendedReflection.Logging.ObservedCallMismatch)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.ObservedCallMismatchEventArgs"/> class.
            </summary>
            <param name="observedCallMismatch">The observedCallMismatch.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ObservedCallMismatchEventArgs.ObservedCallMismatch">
            <summary>
            Gets the observedCallMismatch.
            </summary>
            <value>The observedCallMismatch.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.StaticFieldStore">
            <summary>
            An uninstrumented method was encountered
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.StaticFieldStore.ImageKeyName">
            <summary>
            Gets the image key name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.StaticFieldStore.#ctor(Microsoft.ExtendedReflection.Metadata.Names.FieldName,System.Boolean,Microsoft.ExtendedReflection.Symbols.StackTraceName,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.StaticFieldStore"/> class.
            </summary>
            <param name="staticField">The static field.</param>
            <param name="isDeclaringTypeExported"></param>
            <param name="_stackTrace">The stack trace.</param>
            <param name="wikiTopic">The wiki topic.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.StaticFieldStore.TryGetStackTrace(Microsoft.ExtendedReflection.Symbols.StackTraceName@)">
            <summary>
            Gets the stack trace (might be null)
            </summary>
            <value>The stack trace.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.StaticFieldStore.Equals(Microsoft.ExtendedReflection.Logging.StaticFieldStore)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.StaticFieldStore.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.StaticFieldStore.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.StaticFieldStore.Internalize">
            <summary>
            Internalizes this instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.StaticFieldStore.StaticField">
            <summary>
            Gets the static field in which a value is stored.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.StaticFieldStore.IsDeclaringTypeExported">
            <summary>
            Gets a value indicating whether the method's declaring type is exported.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.StaticFieldStore.WikiTopic">
            <summary>
            Gets the help topic.
            </summary>
            <value>The help topic.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.StaticFieldStoreEventArgs">
            <summary>
            Event arg wrapping a <see cref="P:Microsoft.ExtendedReflection.Logging.StaticFieldStoreEventArgs.StaticFieldStore"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.StaticFieldStoreEventArgs.#ctor(Microsoft.ExtendedReflection.Logging.StaticFieldStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.StaticFieldStoreEventArgs"/> class.
            </summary>
            <param name="staticFieldStore">The staticFieldStore.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.StaticFieldStoreEventArgs.StaticFieldStore">
            <summary>
            Gets the staticFieldStore.
            </summary>
            <value>The staticFieldStore.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethod">
            <summary>
            An uninstrumented method was encountered
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.UninstrumentedMethod.ImageKeyName">
            <summary>
            Default image key name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethod.#ctor(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Symbols.StackTraceName,System.Boolean,System.String,Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethod"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="stackTrace">The stack trace.</param>
            <param name="isDeclaringTypeExported">whether the method's declaring type is exported</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="filterResult">The filter result, if any.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethod.TryGetStackTrace(Microsoft.ExtendedReflection.Symbols.StackTraceName@)">
            <summary>
            Gets the stack trace (might be null)
            </summary>
            <value>The stack trace.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethod.TryGetFilterResult(Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult@)">
            <summary>
            Tries to get the filter result.
            </summary>
            <param name="filterResult">The filter result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethod.Equals(Microsoft.ExtendedReflection.Logging.UninstrumentedMethod)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethod.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethod.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethod.Internalize">
            <summary>
            Internalizes the current instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.UninstrumentedMethod.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.UninstrumentedMethod.IsDeclaringTypeExported">
            <summary>
            Gets a value indicating whether the method's declaring type is exported.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.UninstrumentedMethod.WikiTopic">
            <summary>
            Gets the help topic.
            </summary>
            <value>The help topic.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodEventArgs">
            <summary>
            Event arg wrapping a <see cref="P:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodEventArgs.UninstrumentedMethod"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodEventArgs.#ctor(Microsoft.ExtendedReflection.Logging.UninstrumentedMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodEventArgs"/> class.
            </summary>
            <param name="uninstrumentedMethod">The uninstrumented method.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.UninstrumentedMethodEventArgs.UninstrumentedMethod">
            <summary>
            The uninstrumented method
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataResolutionException">
            <summary>
            Exception raised while creating a method
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataResolutionException.#ctor(Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataResolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataResolutionException.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataResolutionException.Name">
            <summary>
            Gets the metadata name that could not be resolved
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.IDynamicCodeManager">
            <summary>
            Manages dynamic code generation
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.IDynamicCodeManager.DefineDynamicAssembly(Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder)">
            <summary>
            Initializes an assembly with a set of attributes
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.IDynamicCodeManager.TryGetInstrumentedType(System.String,System.String,System.Type@)">
            <summary>
            Tries to get the type with the same full name that has previously been baked
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="fullName">The full name.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.IDynamicCodeManager.DefineInstrumentedType(System.String,System.String)">
            <summary>
            Defines a new type builder instance that will be instrumented
            by ExtendedReflection
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="fullName">The full name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.IDynamicCodeManager.GetUniqueTypeName(System.String,System.String,System.Object)">
            <summary>
            Gets a unique type name
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="prefix">A prefix of the unique name.</param>
            <param name="identity">An object describing the identity of the requested unique name, if any</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.IDynamicCodeManager.TryCreateType(Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder,System.Type@)">
            <summary>
            Tries to emits and bake a runtime type from the builder
            </summary>
            <param name="typeDefinitionBuilder">The type definition builder.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.IDynamicCodeManager.CreateRuntimeMetadataResolver(Microsoft.ExtendedReflection.Collections.IIndexable{System.Type},Microsoft.ExtendedReflection.Collections.IIndexable{System.Type})">
            <summary>
            Creates a runtime type resolver for the current generic context
            </summary>
            <param name="genericTypeArguments"></param>
            <param name="genericMethodArguments"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IRuntimeMetadataResolver">
            <summary>
            Maps Extended Reflection metadata to Reflection 'real' types
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.IRuntimeMetadataResolver.TryGetType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Type@)">
            <summary>
            Converts back to a reflection type
            </summary>
            <param name="type">The type.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.IRuntimeMetadataResolver.TryGetTypeDefinition(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference,System.Type@)">
            <summary>
            Converts back to a reflection type
            </summary>
            <param name="type">The type.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.IRuntimeMetadataResolver.TryGetConstructorInfo(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,System.Reflection.ConstructorInfo@)">
            <summary>
            Converts back the method to a <see cref="T:System.Reflection.ConstructorInfo"/>
            </summary>
            <param name="constructor">The constructor.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.IRuntimeMetadataResolver.TryGetFieldInfo(Microsoft.ExtendedReflection.Metadata.Interfaces.IField,System.Reflection.FieldInfo@)">
            <summary>
            Converts to a <see cref="T:System.Reflection.FieldInfo"/> instance
            </summary>
            <param name="field">The field.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.IRuntimeMetadataResolver.TryGetPropertyInfo(Microsoft.ExtendedReflection.Metadata.Interfaces.IProperty,System.Reflection.PropertyInfo@)">
            <summary>
            Converts to a <see cref="T:System.Reflection.PropertyInfo"/> instance
            </summary>
            <param name="property">The property.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.IRuntimeMetadataResolver.TryGetMethodInfo(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,System.Reflection.MethodInfo@)">
            <summary>
            Converts to a <see cref="T:System.Reflection.MethodInfo"/> instance
            </summary>
            <param name="method">The method.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IRuntimeMetadataResolver.GenericTypeArguments">
            <summary>
            Gets the generic type arguments in the current generic context
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IRuntimeMetadataResolver.GenericMethodArguments">
            <summary>
            Gets the generic method arguments in the current generic context
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.ManagedProjectItemKind">
            <summary>
            Different possible items
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.ManagedProjectItemKind.Compile">
            <summary>
            Compiled item
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.ManagedProjectItemKind.Content">
            <summary>
            Content item
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.ManagedProjectItemKind.EmbeddedResource">
            <summary>
            Embedded resource
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.ManagedProjectItemKind.None">
            <summary>
            None item
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.ICompilableManagedProject">
            <summary>
            A managed project that can be compiled
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ICompilableManagedProject.TryCompile(System.String,System.String,System.String@)">
            <summary>
            Compiles the project.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ICompilableManagedProject.TryCompile(Microsoft.ExtendedReflection.Logging.IEventLog,System.String,System.String,System.String@)">
            <summary>
            Compiles the project.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.IMethodBodyWriterContext">
            <summary>
            The context of a <see cref="T:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IMethodBodyWriterContext.IsStatic">
            <summary>
            Whether the first parameter is the implicit 'this' parameter.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IMethodBodyWriterContext.IsSetter">
            <summary>
            Whether the method is a property setter
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IMethodBodyWriterContext.Parameters">
            <summary>
            Gets the parameters .
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IMethodBodyWriterContext.GenericTypeParameters">
            <summary>
            Gets the generic type parameters.
            </summary>
            <value>The generic type parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.IMethodBodyWriterContext.GenericMethodParameters">
            <summary>
            Gets the generic method parameters.
            </summary>
            <value>The generic method parameters.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.LanguageManager">
            <summary>
            Language manager
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.LanguageManager.Initialize">
            <summary>
            Initializes this instance. Will be called exactly once.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.LanguageManager.AddLanguage(Microsoft.ExtendedReflection.Emit.ILanguage)">
            <summary>
            Adds a language to the manager
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.LanguageManager.TryResolveLanguage(System.String,Microsoft.ExtendedReflection.Emit.ILanguage@)">
            <summary>
            Tries to resolve the language from the language name
            </summary>
            <param name="languageName"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.LanguageManager.LanguageOptions">
            <summary>
            Get configuration options.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.LanguageManager.LanguageHelpersProvider">
            <summary>
            Optional; Gets the language helpers provider, if any.
            </summary>
            <value>The language helpers provider.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.LanguageManager.DefaultLanguage">
            <summary>
            Gets or sets the default language
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.LanguageManager.Languages">
            <summary>
            Gets the loaded languages
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.LanguageNamespaceMode">
            <summary>
            How to deal with namespaces
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.LanguageNamespaceMode.FullNamespacesNoGlobal">
            <summary>
            Always fully qualify, no 'using' statements, do not use 'global::'
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.LanguageNamespaceMode.ShortenNamespaces">
            <summary>
            Omit namespaces (if it does not lead to ambiguities)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.LanguageNamespaceMode.WriteImports">
            <summary>
            Embed 'using' clauses into text
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.LanguageNamespaceMode.MultipleAssemblyAlias">
            <summary>
            Use different alias per assembly
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.LanguageNamespaceMode.Unique">
            <summary>
            Use 'global::' syntax on fully qualified namespaces
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.LanguageNamespaceMode.UniqueAssemblyAlias">
            <summary>
            Use different alias per assembly
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.LanguageNamespaceMode.Pretty">
            <summary>
            Pretty output
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.LanguageOptions">
            <summary>
            Implementation of <see cref="T:Microsoft.ExtendedReflection.Emit.ILanguageOptions"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.LanguageOptions.#ctor(System.Int32,Microsoft.ExtendedReflection.Emit.LanguageNamespaceMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Emit.LanguageOptions"/> class.
            </summary>
            <param name="preferredLineWidth">Width of the preferred line.</param>
            <param name="namespaceMode">The namspace mode.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.LanguageOptions.CreateFromEnvironment">
            <summary>
            Creates from environment.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.LanguageOptions.PreferredLineWidth">
            <summary>
            Gets the prefered line with for emitted source code
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.LanguageOptions.NamespaceMode">
            <summary>
            Gets the way namespace should be emitted
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.ManagedProjectHelper">
            <summary>
            Helper methods for <see cref="T:Microsoft.ExtendedReflection.Emit.IManagedProject"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ManagedProjectHelper.UpdateAssemblyReferences(Microsoft.ExtendedReflection.Emit.IManagedProject,Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition)">
            <summary>
            Updates the assembly references.
            </summary>
            <param name="project">The project.</param>
            <param name="assemblyDefinition">The assembly definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ManagedProjectHelper.UpdateAssemblyReference(Microsoft.ExtendedReflection.Emit.IManagedProject,Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference)">
            <summary>
            Updates the assembly reference with a load hint if possible
            </summary>
            <param name="project"></param>
            <param name="assemblyReference"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.ManagedProjectWriter">
            <summary>
            Writes an assembly to a project structure
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ManagedProjectWriter.#ctor(Microsoft.ExtendedReflection.Emit.IManagedProject,Microsoft.ExtendedReflection.Utilities.Safe.SafeFunc{Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Emit.ManagedProjectWriter"/> class.
            </summary>
            <param name="project">The project.</param>
            <param name="assemblyTextWriterFactory">The assembly text writer factory.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.ManagedProjectWriter.WriteAssembly(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition)">
            <summary>
            Writes the assembly.
            </summary>
            <param name="assemblyDefinition">The assembly definition.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ManagedProjectWriter.Project">
            <summary>
            Gets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.ManagedProjectWriter.AssemblyTextWriterFactory">
            <summary>
            Gets the assembly text writer factory.
            </summary>
            <value>The assembly text writer factory.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.VisualStudioProject">
            <summary>
            Visual Studio Managed project
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.VisualStudioProject.projectDocument">
            <summary>
            In-memory representation of the project
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.Populate(System.Xml.XmlDocument)">
            <summary>
            Populates this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.CreateNew(System.String)">
            <summary>
            Creates a new project file.
            </summary>
            <param name="projectFile">The project file name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.CreateNew(System.String,Microsoft.ExtendedReflection.SourceControl.ISourceControl)">
            <summary>
            Creates a new project file.
            </summary>
            <param name="projectFile">The project file name.</param>
            <param name="sourceControl">The source control.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.Load(System.String,Microsoft.ExtendedReflection.SourceControl.ISourceControl)">
            <summary>
            Loads an existing project from file
            </summary>
            <param name="projectFile">The project file.</param>
            <param name="sourceControl">The source control.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.Reload">
            <summary>
            Reloads the project.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.SaveAs(System.String)">
            <summary>
            Saves the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.SetProperty(System.String,System.String,System.String)">
            <summary>
            Sets a property in the project
            </summary>
            <param name="name">The name.</param>
            <param name="condition">The condition.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.GetProperty(System.String)">
            <summary>
            Gets a property value in the project
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.UpdateProperties(System.String,System.Converter{System.String,System.String})">
            <summary>
            Updates the properties.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="updator">The updator.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.GetUniqueFileName(System.String)">
            <summary>
            Takes a original compile item and returns a unique item name if the original item already exists
            </summary>
            <param name="originalFileName"></param>        
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.SetLanguage(System.String,System.String)">
            <summary>
            Sets the project language and default file extension
            </summary>
            <param name="targets"></param>
            <param name="fileExtension"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.AddCOMReference(System.String,System.Guid,System.Int32,System.Int32,System.String)">
            <summary>
            Tries to add an embedded COM reference to the project
            </summary>
            <param name="assemblyName"></param>
            <param name="guid"></param>
            <param name="versionMajor"></param>
            <param name="versionMinor"></param>
            <param name="_wrapperTool"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.AddReference(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a reference to the assembly
            </summary>
            <param name="assembly"></param>
            <param name="hintPath"></param>
            <param name="specificVersion"></param>
            <param name="copyLocal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.AddReference(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Adds a reference to the assembly
            </summary>
            <param name="assembly"></param>
            <param name="hintPath"></param>
            <param name="specificVersion"></param>
            <param name="copyLocal"></param>
            <param name="_alias"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.ContainsItem(System.String)">
            <summary>
            Determines whether the specified file name contains item.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>
            	<c>true</c> if the specified file name contains item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.Microsoft#ExtendedReflection#Emit#IManagedProject#TryGetSourceFiles(System.String[]@)">
            <summary>
            Gets list of source files within the project
            </summary>        
            <param name="sourceFiles">sourceFiles</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.OpenItem(Microsoft.ExtendedReflection.Emit.ManagedProjectItemKind,System.String)">
            <summary>
            Opens a writer for the specific file.
            </summary>
            <param name="kind">The kind.</param>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.OpenItem(Microsoft.ExtendedReflection.Emit.ManagedProjectItemKind,System.String,System.String,System.String,Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.String,System.String}[])">
            <summary>
            Opens the conditional item.
            </summary>
            <param name="kind">The kind.</param>
            <param name="fileName">Name of the file.</param>
            <param name="dependsOnPath">The depends on path.</param>
            <param name="condition">The condition.</param>
            <param name="_metadataItems">optional semicolon separate list of name=value pairs</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.AddItem(Microsoft.ExtendedReflection.Emit.ManagedProjectItemKind,System.String)">
            <summary>
            Adds the item.
            </summary>
            <param name="kind">The kind.</param>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.AddItem(Microsoft.ExtendedReflection.Emit.ManagedProjectItemKind,System.String,System.String,System.String,Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{System.String,System.String}[])">
            <summary>
            Adds the item.
            </summary>
            <param name="kind">The kind.</param>
            <param name="fileName">Name of the file.</param>
            <param name="dependsOnFileName">Name of the depends on file.</param>
            <param name="condition">The condition.</param>
            <param name="metadataItems">Semicolon separated list of name=value pairs</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.MakeRelativeToProject(System.String)">
            <summary>
            Makes the relative to project.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.AddItem(System.String,System.Boolean,System.String,System.String[])">
            <summary>
            Add an compile item to the project
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="autoGenerated">if set to <c>true</c> [auto generated].</param>
            <param name="ns">The ns.</param>
            <param name="typeNames">The type names.</param>
            <returns>
            true if the item was added, false if it already existed in the project
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.TryCompile(System.String,System.String@)">
            <summary>
            Compiles the project
            </summary>
            <param name="_msbuild">path to the msbuild executable</param>
            <param name="outputFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.TryCompile(System.String,System.String,System.String@)">
            <summary>
            Compiles the project.
            </summary>
            <param name="_msbuild">path to the msbuild executable</param>
            <param name="configuration"></param>
            <param name="outputFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.TryCompile(Microsoft.ExtendedReflection.Logging.IEventLog,System.String,System.String,System.String@)">
            <summary>
            Compiles the project.
            </summary>
            <param name="_msbuild">path to the msbuild executable</param>
            <param name="log">The log.</param>
            <param name="configuration"></param>
            <param name="outputFileName">Name of the output file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.VisualStudioProject.SetKeyFile(System.String)">
            <summary>
            Sets the key file.
            </summary>
            <param name="keyfile"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.ProjectFile">
            <summary>
            Gets the project file.
            </summary>
            <value>The project file.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.ProjectPath">
            <summary>
            Gets the project path.
            </summary>
            <value>The project path.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.PropertiesDirectory">
            <summary>
            Gets the properties directory.
            </summary>
            <value>The properties directory.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.OutputPath">
            <summary>
            Gets the default output build path
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.AssemblyInfoFileName">
            <summary>
            Gets the name of the assembly info file.
            </summary>
            <value>The name of the assembly info file.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.SourceControl">
            <summary>
            Gets or sets the source control.
            </summary>
            <value>The source control.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.ProjectGuid">
            <summary>
            Gets or sets the project guid
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.ToolsVersion">
            <summary>
            Gets or sets the project tools version. The version number
            is automatically set based on the runtime version (3.5 for .net 2.0 process, 4.0 for .net 4.0).
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.PlatformTarget">
            <summary>
            Gets or sets the platform target.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.TargetFrameworkVersion">
            <summary>
            Gets or sets the project target framework version
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.SilverlightVersion">
            <summary>
            Gets or sets the silverlight version
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.TargetFrameworkIdentifier">
            <summary>
            Gets or sets the project target identifier
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.AssemblyName">
            <summary>
            Gets or sets the project AssemblyName
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.RootNamespace">
            <summary>
            Gets or sets the project root namespace
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.CodeContractsEnableRuntimeChecking">
            <summary>
            Gets or sets the Code Contracts instrumentation flags at the 'All Configuration' level
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.ImportTargets">
            <summary>
            Gets the msbuild import targets
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.VisualStudioProject.FileExtension">
            <summary>
            Gets the default file extension
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.VisualStudioProject.Targets">
            <summary>
            Default msbuild targets
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.VisualStudioProject.Targets.CSharp">
            <summary>
            C# targets
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Emit.VisualStudioProject.Targets.VisualBasic">
            <summary>
            VisualBasic.Net targets
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeFixImage">
            <summary>
            Availabe images for code fixes
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeFixImage.Message">
            <summary>
            Informational fix
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeFixImage.Warning">
            <summary>
            Optional fix
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeFixImage.Error">
            <summary>
            Critical fix
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeFix">
            <summary>
            A code fix (update + ranking and grouping)
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.IRanked">
            <summary>
            A ranked object
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IRanked.Rank">
            <summary>
            Gets the rank (higher the better)
            </summary>
            <value>The rank.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeFix.FromUpdate(System.String,System.String,System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.Int32,Microsoft.ExtendedReflection.Feedback.CodeFixImage)">
            <summary>
            Creates a fix from an update.
            </summary>
            <param name="tool">The tool.</param>
            <param name="kind">The kind.</param>
            <param name="groupID">The group ID.</param>
            <param name="update">The update.</param>
            <param name="rank">The rank.</param>
            <param name="imageKey">The image key.</param>
            <returns></returns>
            <remarks>
            The <paramref name="update"/> must have a target.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeFix.#ctor(System.String,System.String,System.String,Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.Int32,Microsoft.ExtendedReflection.Feedback.CodeFixImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeFix"/> class.
            </summary>
            <param name="tool">The tool.</param>
            <param name="kind">The kind.</param>
            <param name="groupID">The group ID.</param>
            <param name="target">The target.</param>
            <param name="update">The update.</param>
            <param name="rank">The rank.</param>
            <param name="imageKey">The image key.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeFix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeFix.Equals(Microsoft.ExtendedReflection.Feedback.CodeFix)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeFix.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeFix.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeFix.Tool">
            <summary>
            Gets the tool name
            </summary>
            <value>The tool.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeFix.Kind">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeFix.GroupID">
            <summary>
            Gets the group ID.
            </summary>
            <value>The group ID.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeFix.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeFix.Update">
            <summary>
            Gets the update.
            </summary>
            <value>The update.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeFix.Rank">
            <summary>
            Gets the rank (higher the better(
            </summary>
            <value>The rank.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeFix.ImageKey">
            <summary>
            Gets the image key to be fetched from
            an imagelist
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeFix.UpdateEqualityComparer">
            <summary>
            Equality comparer that checks the update field only
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeFix.UpdateEqualityComparer.Instance">
            <summary>
            Gets the singleton instance
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeFix.UpdateEqualityComparer.Equals(Microsoft.ExtendedReflection.Feedback.CodeFix,Microsoft.ExtendedReflection.Feedback.CodeFix)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <paramref name="T"/> to compare.</param>
            <param name="y">The second object of type <paramref name="T"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeFix.UpdateEqualityComparer.GetHashCode(Microsoft.ExtendedReflection.Feedback.CodeFix)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeFixEventArgs">
            <summary>
            A event args wrapper for <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeFix"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeFixEventArgs.#ctor(Microsoft.ExtendedReflection.Feedback.CodeFix[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeFixEventArgs"/> class.
            </summary>
            <param name="fixes">The fixes.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeFixEventArgs.Fixes">
            <summary>
            Gets the fix.
            </summary>
            <value>The fix.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeFeedbackState">
            <summary>
            State of a code fix
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeFeedbackState.NotApplied">
            <summary>
            Has not been applied or disabled yet
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeFeedbackState.Applied">
            <summary>
            Has been applied
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeFeedbackState.Failed">
            <summary>
            Failed while trying to apply
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeFeedbackState.Disabled">
            <summary>
            Has been disabled
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.FeedbackHelper">
            <summary>
            Helper classes over the feedback interfaces
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackHelper.TryGetTarget(System.Object,System.Object@)">
            <summary>
            Checks wheter we could find a target to jump to
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.IFeedbackManager">
            <summary>
            Feedback manager (code fixes etc..)
            </summary>
            <remarks>
            The manager is thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.Clear">
            <summary>
            Clear all fixes and caches
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.AddFix(Microsoft.ExtendedReflection.Feedback.CodeFix)">
            <summary>
            Adds the fix.
            </summary>
            <param name="fix">The fix.</param>
            <returns>true if the fix was added, false if duplicate</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.AddFixRange(Microsoft.ExtendedReflection.Feedback.CodeFix[])">
            <summary>
            Adds a bunch of fixes at once
            </summary>
            <param name="fixes"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.AddBackgroundUpdate(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Adds an update that will be applied the first time
            an update requiring it's target will be invoked.
            </summary>
            <param name="target">The target.</param>
            <param name="update">The update.</param>
            <remarks>
            For example if an update requires a project that does not exist,
            register an update to create that project on the ShortAssemblyName
            of that project
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.ExpandUpdateWithBackground(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Expands the code update with required background updates
            </summary>
            <param name="codeUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.CanApply(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Returns true when the update can be applied
            </summary>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.GetCodeUpdateState(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets the state of a code update.
            </summary>
            <value>The state.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.TryGetCodeUpdateStateDescription(Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.Object@)">
            <summary>
            Tries to get the code update state description
            </summary>
            <param name="codeUpdate"></param>
            <param name="stateDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.AddCodeUpdateStateChangedHandler(Microsoft.ExtendedReflection.Feedback.CodeUpdate,Microsoft.ExtendedReflection.Logging.RemoteEventHandler{Microsoft.ExtendedReflection.Logging.RemoteEventArgs})">
            <summary>
            Adds an event handler that gets notified when a state update has been made
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.RemoveCodeUpdateStateChangedHandler(Microsoft.ExtendedReflection.Feedback.CodeUpdate,Microsoft.ExtendedReflection.Logging.RemoteEventHandler{Microsoft.ExtendedReflection.Logging.RemoteEventArgs})">
            <summary>
            Removes an event handler that gets notified when a state update has been made
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.SetCodeUpdateState(Microsoft.ExtendedReflection.Feedback.CodeUpdate,Microsoft.ExtendedReflection.Feedback.CodeFeedbackState,System.Object)">
            <summary>
            Signals that the update has been applied
            </summary>
            <param name="codeUpdate"></param>
            <param name="state"></param>
            <param name="stateDescription">an event element that describes the state. In particular,
            if the update failed to apply, can hold the error message or more advacned object.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.FileHeader">
            <summary>
            Gets or sets the default file header comment
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.AfterCleared">
            <summary>
            Raised after the manager has been cleared
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.FixCount">
            <summary>
            Gets the number of fixes
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.Fixes">
            <summary>
            Gets the *copy* of the code fixes
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Feedback.IFeedbackManager.FixAdded">
            <summary>
            Raised when a fix is added
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackManager.Clear">
            <summary>
            Clear all fixes and caches
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackManager.OnAfterCleared">
            <summary>
            Called when [after cleared].
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackManager.AddFix(Microsoft.ExtendedReflection.Feedback.CodeFix)">
            <summary>
            Adds the fix.
            </summary>
            <param name="fix">The fix.</param>
            <returns>
            true if the fix was added, false if duplicate
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackManager.ExpandUpdateWithBackground(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Expands the update with background.
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackManager.FlushBackgroundUpdates">
            <summary>
            Go through the background update pool and remove
            updates that have been applied
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackManager.CanApply(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Returns true when the update can be applied
            </summary>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackManager.GetCodeUpdateState(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.FeedbackManager.SetCodeUpdateState(Microsoft.ExtendedReflection.Feedback.CodeUpdate,Microsoft.ExtendedReflection.Feedback.CodeFeedbackState,System.Object)">
            <summary>
            Signals that the update has been applied
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.FeedbackManager.FileHeader">
            <summary>
            Gets or sets the default file header comment
            </summary>
            <value></value>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Feedback.FeedbackManager.AfterCleared">
            <summary>
            Raised after the manager has been cleared
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.FeedbackManager.Fixes">
            <summary>
            Gets a *copy* of the fixes
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.FeedbackManager.FixCount">
            <summary>
            Gets the number of fixes
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.FeedbackManager.NameVisitor">
            <summary>
            this visitor collects the list of target
            that could have a backgroun update.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.IDumpSource">
            <summary>
            A source of <see cref="T:Microsoft.ExtendedReflection.Logging.DumpTree"/> instances
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.IDumpSource.TryGetDumpTree(Microsoft.ExtendedReflection.Logging.DumpTree@)">
            <summary>
            Tries to query the dump tree.
            </summary>
            <param name="tree">The tree.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.RankedComparer`1">
            <summary>
            A comparer that first uses the rank if available,
            then the default comparer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Collections.RankedComparer`1.Default">
            <summary>
            Default comparer singleton
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.RankedComparer`1.#ctor(System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Intializes a new instance of the comparer
            </summary>
            <param name="comparer"></param>
            <param name="rankedFirst"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.RankedComparer`1.GetRank(`0)">
            <summary>
            Gets the rank
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.RankedComparer`1.Compare(`0,`0)">
            <summary>
            Compares two instances
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.ISuppressionCodeUpdateSource">
            <summary>
            Specialized code update source to disable behaviors
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.ISuppressionCodeUpdateSource.TryGetSuppressionCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Gets the code updates.
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
            <value>The code updates.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.IConditionValidator">
            <summary>
            Condition validator
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IConditionValidator.IsTrue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the specified condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <returns>
            	<c>true</c> if the specified condition is true; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.InstanceFieldMapSymbolId">
            <summary>
            Symbol id of instance field maps
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.InstanceFieldMapSymbolId.#ctor(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.MemoryMapSymbolId">
            <summary>
            Symbol id representing an arbitrary memory location
            </summary>
            <remarks>
            TODO: Make non-public
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.MemoryMapSymbolId.MapLayout">
            <summary>
            The MapLayout
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MemoryMapSymbolId.#ctor(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.MemoryMapSymbolId"/> class.
            </summary>
            <param name="elementLayout">The element layout.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MemoryMapSymbolId.GetPersistentHashCode">
            <summary>
            Gets a strong, persistent hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MemoryMapSymbolId.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.MemoryMapSymbolId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.MemoryMapSymbolId.Description">
            <summary>
            Textual description of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.MemoryMapSymbolId.ObjectCreationTime">
            <summary>
            When the object (or all objects within this value) was created.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.MemoryMapSymbolId.Microsoft#ExtendedReflection#Interpretation#ISymbolIdWithType#Type">
            <summary>
            Gets type; may be <code>null</code>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.ObjectCreationTime">
            <summary>
            Objects created ahead of time are distinct from fresh objects.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectCreationTime.AheadOfTime">
            <summary>
            Object was created before symbolic execution started
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectCreationTime.Fresh">
            <summary>
            Object was created during symbolic execution
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.ObjectCreationTime.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.SymbolIdForTerm">
            <summary>
            A symbol that can be used to represent another term.
            </summary>
            <remarks>
            TODO: Make non-public
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.SymbolIdForTerm.Type">
            <summary>
            The type of this symbol id.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.SymbolIdForTerm.Term">
            <summary>
            The term this symbol id represents.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.SymbolIdForTerm.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.SymbolIdForTerm"/> class.
            </summary>
            <param name="termManager">The term manager.</param>
            <param name="term">The term.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.SymbolIdForTerm.GetPersistentHashCode">
            <summary>
            Gets a strong, persistent hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.SymbolIdForTerm.Equals(System.Object)">
            <summary>
            Checks equality with the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.SymbolIdForTerm.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.SymbolIdForTerm.Description">
            <summary>
            Textual description of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.SymbolIdForTerm.Layout">
            <summary>
            The layout of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.SymbolIdForTerm.ObjectCreationTime">
            <summary>
            When the object (or all objects within this value) was created.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector">
            <summary>
            Detects pointers
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector"/> class.
            </summary>
            <param name="termManager"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector.CollectLiveTerms(Microsoft.ExtendedReflection.Interpretation.ITermCollector)">
            <summary>
            Collects the live terms.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector.ContainsPointer(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Determines whether the specified term contains a pointer.
            </summary>
            <param name="term">The term.</param>
            <returns>
            	<c>true</c> if the specified term contains pointers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector.VisitTerm(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Main visitor that dispatches to individual visit-methods.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
            <remarks>
            Each term is only visited once.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector.VisitPointerToArgument(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to an argument of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <param name="argumentIndex">index of argument in stack-frame</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector.VisitPointerToBoundedIUniform(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to a uniform compound indexed over <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I"/>, where indices range from zero to the given maximum length
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="compound">uniform compound</param>
            <param name="length">maximum length</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector.VisitPointerToElement(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an element in a compound value.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="baseAddress">address of compound value</param>
            <param name="index">index into compound value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector.VisitPointerToInstanceFieldMap(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Visits the pointer to instance field map.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="term">The term.</param>
            <param name="instanceField">The instance field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector.VisitPointerToLocal(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to a local variable of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <param name="localIndex">index of local variable in stack-frame</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector.VisitPointerToNowhere(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an illegal address.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector.VisitPointerToStackTop(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32,System.Int32)">
            <summary>
            Visitor for a pointer to the topmost element of the evaluation stack of a method call.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="thread">index of thread in which call occurred</param>
            <param name="frame">index of stack-frame in thread</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector.VisitPointerToStaticField(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Visits the pointer to static field.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="term">The term.</param>
            <param name="staticField">The static field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermPointerDetector.VisitPointerToValue(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a pointer to an immutable value.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.DumpTree">
            <summary>
            Serializable semi-rich dump log
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.#ctor(Microsoft.ExtendedReflection.Logging.DumpTree.TreeNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.DumpTree"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.DumpTree"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="body">The body (might be null).</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.ToString">
            <summary>
            Renders the tree as a string (cached)
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.Equals(Microsoft.ExtendedReflection.Logging.DumpTree)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the tree to xml format
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.WriteString(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder)">
            <summary>
            Writes the tree to a string builder
            </summary>
            <param name="sb"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.DumpTree.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.DumpTree.Root">
            <summary>
            Gets the root node.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.DumpTree.NodeKind">
            <summary>
            Type of node
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.DumpTree.NodeKind.Tree">
            <summary>
            Tree Node
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.DumpTree.NodeKind.Text">
            <summary>
            Text node
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.DumpTree.Node">
            <summary>
            Abstract base class for nodes
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.DumpTree.Node.Kind">
            <summary>
            Gets the node kind
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.Node.#ctor(Microsoft.ExtendedReflection.Logging.DumpTree.NodeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.DumpTree.Node"/> class.
            </summary>
            <param name="kind">The kind.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.Node.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.Node.Equals(Microsoft.ExtendedReflection.Logging.DumpTree.Node)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.Node.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.DumpTree.TreeNode">
            <summary>
            Tree node implementation
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.TreeNode.#ctor(System.String,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Logging.DumpTree.Node})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.DumpTree.TreeNode"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="children">The children.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.TreeNode.Equals(Microsoft.ExtendedReflection.Logging.DumpTree.Node)">
            <summary>
            Gets the value indicating if the node is structurally equivalent to other
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.TreeNode.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.DumpTree.TreeNode.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.DumpTree.TreeNode.Children">
            <summary>
            Gets the children if any
            </summary>
            <value>The children.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.DumpTree.TextNode">
            <summary>
            Text node implementation
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.TextNode.#ctor(Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.DumpTree.TextNode"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.DumpTree.TextNode.Text">
            <summary>
            Text content
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTree.TextNode.Equals(Microsoft.ExtendedReflection.Logging.DumpTree.Node)">
            <summary>
            Gets the value indicating if the node is structurally equivalent to other
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.DumpTreeVisitor`1">
            <summary>
            A visitor over a dumptree
            </summary>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeVisitor`1.VisitTree(`0,Microsoft.ExtendedReflection.Logging.DumpTree)">
            <summary>
            Visits the tree.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeVisitor`1.VisitRootNode(`0,Microsoft.ExtendedReflection.Logging.DumpTree.TreeNode)">
            <summary>
            Visits the root node.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="root">The root.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeVisitor`1.VisitNode(`0,Microsoft.ExtendedReflection.Logging.DumpTree.Node)">
            <summary>
            Visits the node.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeVisitor`1.VisitNodes(`0,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Logging.DumpTree.Node})">
            <summary>
            Visits the nodes.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeVisitor`1.VisitTextNode(`0,Microsoft.ExtendedReflection.Logging.DumpTree.TextNode)">
            <summary>
            Visits the text node.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpTreeVisitor`1.VisitTreeNode(`0,Microsoft.ExtendedReflection.Logging.DumpTree.TreeNode)">
            <summary>
            Visits the tree node.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="node">The node.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.EmptyProgressLog">
            <summary>
            A <see cref="T:Microsoft.ExtendedReflection.Logging.IProgressLog"/> that does nothing
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.IProgressLog">
            <summary>
            Logger that represents a progress bar + status bar message
            </summary>
            <remarks>
            Implementation should be inherit from <see cref="T:System.MarshalByRefObject"/>
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IProgressLog.LogMessage(System.String)">
            <summary>
            Logs the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IProgressLog.LogMessage(System.String,System.Object[])">
            <summary>
            Logs the message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IProgressLog.SetProgressMaximum(System.Int32)">
            <summary>
            Sets the progress maximum.
            </summary>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IProgressLog.SetProgress(System.Int32)">
            <summary>
            Sets the progress.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.IProgressLog.IncrementProgress">
            <summary>
            Increments the progress.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ExplorationImprecision">
            <summary>
            An exploration imprecision location
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationImprecision.ImageKeyName">
            <summary>
            Gets the image key name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationImprecision.#ctor(Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName,System.Boolean,Microsoft.ExtendedReflection.Symbols.StackFrameName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.ExplorationImprecision"/> class.
            </summary>
            <param name="isDeclaringTypeExported"></param>
            <param name="location">The location.</param>
            <param name="_frame">The frame (may be null).</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationImprecision.Create(Microsoft.ExtendedReflection.Symbols.ISymbolManager,Microsoft.ExtendedReflection.Metadata.CodeLocation)">
            <summary>
            Creates the specified symbols.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationImprecision.TryGetFrame(Microsoft.ExtendedReflection.Symbols.StackFrameName@)">
            <summary>
            Tries to get the frame.
            </summary>
            <param name="frame">The frame.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationImprecision.ToString">
            <summary>
            Returns a description of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationImprecision.Equals(Microsoft.ExtendedReflection.Logging.ExplorationImprecision)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationImprecision.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationImprecision.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationImprecision.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ExplorationImprecision.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ExplorationImprecision.IsDeclaringTypeExported">
            <summary>
            Gets a value indicating whether the method's declaring type is exported.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ExplorationImprecisionEventArgs">
            <summary>
            Event arg wrapping a <see cref="T:Microsoft.ExtendedReflection.Logging.ExplorationImprecision"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationImprecisionEventArgs.#ctor(Microsoft.ExtendedReflection.Logging.ExplorationImprecision)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.ExplorationImprecisionEventArgs"/> class.
            </summary>
            <param name="imprecision">The imprecision.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ExplorationImprecisionEventArgs.Imprecision">
            <summary>
            Gets the imprecision.
            </summary>
            <value>The imprecision.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.TextWriterDumpTreeVisitor">
            <summary>
            Writes the content of the tree as text
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TextWriterDumpTreeVisitor.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.TextWriterDumpTreeVisitor"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TextWriterDumpTreeVisitor.VisitRootNode(System.Object,Microsoft.ExtendedReflection.Logging.DumpTree.TreeNode)">
            <summary>
            Visits the root node.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="root">The root.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TextWriterDumpTreeVisitor.VisitTreeNode(System.Object,Microsoft.ExtendedReflection.Logging.DumpTree.TreeNode)">
            <summary>
            Visits the tree node.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TextWriterDumpTreeVisitor.VisitTextNode(System.Object,Microsoft.ExtendedReflection.Logging.DumpTree.TextNode)">
            <summary>
            Visits the text node.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="node">The node.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.TextWriterDumpTreeVisitor.Writer">
            <summary>
            Gets the writer.
            </summary>
            <value>The writer.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.ICallStackTrace">
            <summary>
            Identifier for call stack traces
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ICallStackTrace.Pop">
            <summary>
            Gets the owner of this call stack trace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ICallStackTrace.Push(Microsoft.ExtendedReflection.Metadata.Method,System.Int32)">
            <summary>
            Retrieves a nested call stack trace.
            </summary>
            <param name="method">The method.</param>
            <param name="programCounter">The program counter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ICallStackTrace.Dump(System.IO.TextWriter)">
            <summary>
            Dumps to the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ICallStackTrace.Depth">
            <summary>
            Gets the depth.
            </summary>
            <value>The depth.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.ICallStackTraceBuilder">
            <summary>
            Interface of a call-stack builder
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ICallStackTraceBuilder.Root">
            <summary>
            Gets the root.
            </summary>
            <value>The root.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException">
            <summary>
            Exception thrown to indicate that the interpreter has reached certain bounds.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException.Origin">
            <summary>
            Location where request originated
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException.Create(Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.Int32)">
            <summary>
            Creates a new exception.
            </summary>
            <param name="method">The method.</param>
            <param name="branchLabel">The branch label.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException.#ctor(System.String)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.MinimizationRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used for serialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ConsoleProgressLog">
            <summary>
            A <see cref="T:Microsoft.ExtendedReflection.Logging.IProgressLog"/> implementation that writes
            directly to the <see cref="T:System.Console"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ConsoleProgressLog.LogMessage(System.String)">
            <summary>
            Logs the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ConsoleProgressLog.LogMessage(System.String,System.Object[])">
            <summary>
            Logs the message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ConsoleProgressLog.SetProgressMaximum(System.Int32)">
            <summary>
            Does nothing.
            </summary>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ConsoleProgressLog.SetProgress(System.Int32)">
            <summary>
            Does nothing.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ConsoleProgressLog.IncrementProgress">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.DumpEventArgs">
            <summary>
            Raw dump information
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.DumpEventArgs.ImageKeyName">
            <summary>
            Gets the image key name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpEventArgs.#ctor(System.String,Microsoft.ExtendedReflection.Logging.DumpTree)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.DumpEventArgs"/> class.
            </summary>
            <param name="category">The category.</param>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpEventArgs.Equals(Microsoft.ExtendedReflection.Logging.DumpEventArgs)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpEventArgs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.DumpEventArgs.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.DumpEventArgs.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.DumpEventArgs.Title">
            <summary>
            Gets the (short) title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.DumpEventArgs.Tree">
            <summary>
            Gets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.EventToProgressLog">
            <summary>
            <see cref="T:Microsoft.ExtendedReflection.Logging.IEventLog"/> that writes to a <see cref="T:Microsoft.ExtendedReflection.Logging.IProgressLog"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventToProgressLog.#ctor(Microsoft.ExtendedReflection.Logging.IProgressLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.EventToProgressLog"/> class.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.EventToProgressLog.LogUnfiltered(Microsoft.ExtendedReflection.Logging.LogEventArgs)">
            <summary>
            Logs event without applying filters
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.IFunctionInterpretation">
            <summary>
            Gives an interpretation to a function.
            Note a symbol is 0-ary function. So if a symbol is associated with some attribute,
            the attribute can be the symbol's interpretation
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IFunctionInterpretation.Interpret(Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            deprecated. Instantiates the interpretation of the function for the specified arguments.
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.IFunctionInterpretation.ParameterSymbolIds">
            <summary>
            Gets a list of parameter symbols; useful for 'selfinstantiations'.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.IFunctionInterpretation.Interpretation">
            <summary>
            returns an expression representing the interpretation in terms
            of parameter symbols.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.IFunctionInterpretationProvider">
            <summary>
            Provides function interpretations.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IFunctionInterpretationProvider.TryGetInterpretation(Microsoft.ExtendedReflection.Interpretation.IFunction,Microsoft.ExtendedReflection.Interpretation.IFunctionInterpretation@)">
            <summary>
            Gets the interpretation of a function, if any.
            </summary>
            <param name="function"></param>
            <param name="interpretation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.IFunctionInterpretationProvider.IsOpenCloseChoiceSymbolId(Microsoft.ExtendedReflection.Interpretation.ISymbolId)">
            <summary>
            Whether this symbol id is one whose values should be minimized.
            </summary>
            <param name="symbolId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.TrajectoryDimension">
            <summary>
            Dimension of a trajectory
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.TrajectoryDimension.Plane">
            <summary>
            2D regular line
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.TrajectoryDimension.Horizontal">
            <summary>
            Horizontal lines
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.TrajectoryDimension.Vertical">
            <summary>
            Vertical lines
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.Trajectory">
            <summary>
            Data trajectory
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.Trajectory.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.Trajectory"/> class
            with Absolute data kind and Plane dimension
            </summary>
            <param name="name">The name.</param>
            <param name="scope">The scope.</param>
            <param name="group">The group.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.Trajectory.#ctor(System.String,System.String,System.String,Microsoft.ExtendedReflection.Charting.SerieDataKind,Microsoft.ExtendedReflection.Logging.TrajectoryDimension)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.Trajectory"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="scope">The scope.</param>
            <param name="group">The group.</param>
            <param name="kind">The kind.</param>
            <param name="dimension">The dimension.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.Trajectory.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.Trajectory.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.Trajectory.Equals(Microsoft.ExtendedReflection.Logging.Trajectory)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.Trajectory.op_Equality(Microsoft.ExtendedReflection.Logging.Trajectory,Microsoft.ExtendedReflection.Logging.Trajectory)">
            <summary>
            Determines whether two trajectories are equal.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.Trajectory.op_Inequality(Microsoft.ExtendedReflection.Logging.Trajectory,Microsoft.ExtendedReflection.Logging.Trajectory)">
            <summary>
            Determines whether two trajectories are not equal.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.Trajectory.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.Trajectory.Scope">
            <summary>
            Gets the scope.
            </summary>
            <value>The scope.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.Trajectory.Group">
            <summary>
            Gets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.Trajectory.Kind">
            <summary>
            Gets the kind.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.Trajectory.Dimension">
            <summary>
            Gets the dimension.
            </summary>
            <value>The dimension.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.TrajectoryEntry">
            <summary>
            A progress data point
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.TrajectoryEntry.Trajectory">
            <summary>
            Name of the data stream
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.TrajectoryEntry.Value">
            <summary>
            Current value
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TrajectoryEntry.#ctor(Microsoft.ExtendedReflection.Logging.Trajectory,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.TrajectoryEntry"/> class.
            </summary>
            <param name="trajectory">The trajectory.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntries">
            <summary>
            A progress data point
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntries.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntries.Entries">
            <summary>
            Entries
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntries.#ctor(System.DateTime,Microsoft.ExtendedReflection.Logging.TrajectoryEntry[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntries"/> class.
            </summary>
            <param name="time">The time.</param>
            <param name="entries">The entries.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntriesEventArgs">
            <summary>
            Trajectory event args
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntriesEventArgs.#ctor(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,Microsoft.ExtendedReflection.Metadata.Names.TypeName,Microsoft.ExtendedReflection.Metadata.Names.MethodName,System.DateTime,Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntries[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntriesEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntriesEventArgs.GetTimedEntries">
            <summary>
            Gets the timed trajectory entries.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntriesEventArgs.AssemblyScope">
            <summary>
            Gets the scope of the trajectories, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntriesEventArgs.TypeScope">
            <summary>
            Gets the scope of the trajectories, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntriesEventArgs.MethodScope">
            <summary>
            Gets the scope of the trajectories, if any.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntriesEventArgs.ScopeStartTime">
            <summary>
            Gets the scope start time.
            </summary>
            <value>The scope start time.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.TrajectoryBuffer">
            <summary>
            A buffer for trajectory values
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TrajectoryBuffer.#ctor(System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.TrajectoryBuffer"/> class.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="scope">The scope.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TrajectoryBuffer.Add(System.DateTime,Microsoft.ExtendedReflection.Logging.TrajectoryEntry[])">
            <summary>
            Adds the specified value.
            </summary>
            <param name="time">The time.</param>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TrajectoryBuffer.GetMaxEntryCount">
            <summary>
            Gets the max entry count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TrajectoryBuffer.GetGroups">
            <summary>
            Gets the groups.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TrajectoryBuffer.ToSeries(System.String,Microsoft.ExtendedReflection.Charting.ColorAllocatorBase)">
            <summary>
            Copies the buffer into an indexable list.
            </summary>
            <param name="group">The group.</param>
            <param name="colorAllocator">The color allocator.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.TrajectoryBuffer.Scope">
            <summary>
            Gets the scope.
            </summary>
            <value>The scope.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.TrajectoryBuffer.StartTime">
            <summary>
            Gets the start time.
            </summary>
            <value>The start time.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.TrajectoryBuffer.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.ExtendedReflection.Logging.TrajectoryBuffer"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionWithVisibilityBuilder">
            <summary>
            A builder of <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinitionWithVisibility"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder">
            <summary>
            A builder of <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition@)">
            <summary>
            Gets the enclosing declaring type, if any.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder.ClearShortNameChanged">
            <summary>
            Clears the event receiver of ShortNameChanged
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder.OnShortNameChanged">
            <summary>
            Raises the shortname changed event
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder.Microsoft#ExtendedReflection#Metadata#Builder#ICompilationConditional#TryGetCompilationSymbol(System.String@)">
            <summary>
            Tries the get compilation symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder.Kind">
            <summary>
            Kind value for fast switching.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder.Assembly">
            <summary>
            Gets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder.Module">
            <summary>
            Gets the module in which this member is defined.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder.ShortName">
            <summary>
            Name of this member definition
            </summary>
            <value></value>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder.ShortNameChanged">
            <summary>
            Raised when the short name is changed.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder.Documentation">
            <summary>
            Gets the documentation comments.
            </summary>
            <value>The documentation.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder.IsSpecialName">
            <summary>
            Gets a value indicating whether this instance has a special name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder.CustomAttributes">
            <summary>
            The custom attributes.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder.CompilationSymbol">
            <summary>
            Gets or sets the compilation symbol
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionWithVisibilityBuilder.IsVisible(Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Determines whether the specified context is visible.
            </summary>
            <param name="context">The context.</param>
            <returns>
            	<c>true</c> if the specified context is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionWithVisibilityBuilder.IsExported">
            <summary>
            Whether this definition is exported.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionWithVisibilityBuilder.DeclaredVisibility">
            <summary>
            Gets or sets the declared visibility.
            </summary>
            <value>The declared visibility.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionWithVisibilityBuilderCollection">
            <summary>
            Collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionWithVisibilityBuilder"/>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper">
            <summary>
            Static helpers for creating complex metadata builder instances
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.GetInternalsVisibleToName(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference)">
            <summary>
            Creates the assembly visible string
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.CreateEmptyMethodBodyWriter">
            <summary>
            Creates an IMethodBodyWriter writer that does nothing
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.WrapInRollback(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Marks a test method to execute in a rolled-back transaction scope
            </summary>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.WrapInComments(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Wraps the in comments.
            </summary>
            <param name="original">The original.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.WrapInEntryPoint(Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.String,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder@)">
            <summary>
            Wraps the test in an entry point (might not be 100% correct)
            </summary>
            <param name="explorationMethod">The exploration method.</param>
            <param name="explorationMethodSource">The exploration method source (might be null).</param>
            <param name="method">The method.</param>
            <param name="mainMethod">The main method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.WrapInEntryPointModule(Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.String,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder,Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder,Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder@,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder@)">
            <summary>
            Wraps the in entry point.
            </summary>
            <param name="explorationMethod">The exploration method.</param>
            <param name="explorationMethodSource">The exploration method source.</param>
            <param name="method">The method.</param>
            <param name="moduleBuilder">The module builder.</param>
            <param name="programClass">The program class.</param>
            <param name="mainMethod">The main method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.CloneMethodSignature(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName,Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder)">
            <summary>
            Clones the method signature.
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <param name="moduleDefinition">The module definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.CloneMethodSignature(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName,Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder)">
            <summary>
            Clones the method signature
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <param name="typeDefinition">The type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.CloneParameterSignature(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Clones the generic type parameters and method argument signate
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <param name="clone">The clone.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.CloneMethodSignature(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition,Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder)">
            <summary>
            Clones the method signature
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <param name="typeDefinition">The type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.CallFromEntryPoint(Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder,Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder,Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder@,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder@)">
            <summary>
            Calls from entry point.
            </summary>
            <param name="moduleBuilder">The module builder.</param>
            <param name="reproClass">The repro class.</param>
            <param name="testMethod">The test method.</param>
            <param name="programClass">The program class.</param>
            <param name="mainMethod">The main method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.TryBakeMethod(Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter,Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder,System.String@,System.String[]@,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName[]@)">
            <summary>
            Tries to generate the source of a method
            </summary>
            <param name="assemblyWriter">The assembly writer.</param>
            <param name="visibility">The visibility.</param>
            <param name="method">The method.</param>
            <param name="source">The source.</param>
            <param name="imports">The imports.</param>
            <param name="references">the references</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.GetReferencedAssemblies(Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Collects the referenced assemblies of a method definition
            </summary>
            <param name="methodDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.GetReferencedAssemblies(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Collects the referenced assemblies of a method body
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.GetReferencedAssemblies(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Gets the referenced assemblies.
            </summary>
            <param name="typeDefinition">The type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.MakeSerializable(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Makes the builder serializable but swapping runtime entities
            for serializable names.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.Attribute">
            <summary>
            Attribute related helpers
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.Attribute.Obsolete">
            <summary>
            Creates the [Obsolete] attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.Attribute.Extension">
            <summary>
            Creates the [Extension] attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.Attribute.DefaultMember(System.String)">
            <summary>
            Creates the [DefaultMember("...")] attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.Attribute.DebuggerDisplay(System.String)">
            <summary>
            Creates the [DebuggerDisplay("...")] attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.Attribute.DebuggerStepThrough">
            <summary>
            Creates the [DebuggerStepThrough] attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.Attribute.DebuggerHidden">
            <summary>
            Creates the [DebuggerHidden] attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.Attribute.DebuggerNonUserCode">
            <summary>
            Creates the [DebuggerNonUserCode] attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.Attribute.InternalsVisibleTo(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference)">
            <summary>
            Creates a [InternalVisibleTo] attribute for the particular assembly
            (with correct public key string)
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.Attribute.GeneratedCodeBy(System.String,System.Version)">
            <summary>
            Gets a [GeneratedCode("Pex", "x.x.x.x")] attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.Attribute.AttributeUsage(System.AttributeTargets,System.Boolean,System.Boolean)">
            <summary>
            Attributes the usage.
            </summary>
            <param name="attributeTargets">The attribute targets.</param>
            <param name="allowMultiple">if set to <c>true</c> [allow multiple].</param>
            <param name="inherited">if set to <c>true</c> [inherited].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MetadataBuilderHelper.Attribute.ConstructorName(Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the constructor of an attribute
            </summary>
            <param name="typeDefinitionName">Name of the type definition.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyOperand">
            <summary>
            Abstract class than can write to a <see cref="T:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyOperand.Write(Microsoft.ExtendedReflection.Emit.IMethodBodyWriter)">
            <summary>
            Writes this instance to <see cref="T:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter"/>.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyOperand.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyOperand.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyOperand.op_Equality(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyOperand,Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyOperand)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyOperand.op_Inequality(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyOperand,Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyOperand)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyOperand.Equals(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyOperand)">
            <summary>
            Checks whether this instance is equal to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName">
            <summary>
            A serializable readonly snapshot of a method body builder
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName.#ctor(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyOperand[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName"/> class.
            </summary>
            <param name="operands">The operands.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName.Write(Microsoft.ExtendedReflection.Emit.IMethodBodyWriter)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName.op_Equality(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName,Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName,Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName.Equals(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName)">
            <summary>
            Checks whether this instance is equal to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder">
            <summary>
            A builder for IMethodBody instance: builds
            a morphable operand stack which can be 'replayed' to
            a real methodbodywriter
            </summary>    
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.#ctor(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.OperandCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder"/> class.
            </summary>
            <param name="operands">The operands.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Microsoft#ExtendedReflection#Emit#IMethodBodyWriter#CreateBody">
            <summary>
            Creates the body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Push(System.Byte)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Push(System.Int16)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Push(System.Int32)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Push(System.Int64)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Push(System.Single)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Push(System.Double)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Push(System.Decimal)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Pushes the specified local.
            </summary>
            <param name="local">The local.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Pushes the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes the field.
            </summary>
            <param name="field">The field.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Push(System.String)">
            <summary>
            Pushes the specified string value.
            </summary>
            <param name="value">The value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushNull">
            <summary>
            Pushes a null value.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushDefault(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Pushes the default value of a type.
            </summary>
            <param name="type"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushPointerToNowhere">
            <summary>
            Pushes pointer to nowhere.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushPointerToValue">
            <summary>
            Pushes (read-only) pointer to operand value.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushPointerToBoundedIUniform">
            <summary>
            Pushes (read-only) pointer to a compound with a bounded length.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushIsTypedPointer(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Pushes a check whether a pointer is typed.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushPointerToStaticField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes pointer to a static field.
            </summary>
            <param name="staticField"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushPointerToInstanceFieldMap(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes pointer to a instance field map.
            </summary>
            <param name="instanceField"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushPointerToArgument(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Pushes pointer to argument.
            </summary>
            <param name="parameter"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushPointerToLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Pushes pointer to local variable.
            </summary>
            <param name="local"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.IsInst(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Checks whether the reference on the stack is assignable to the specified reference type.
            </summary>
            <param name="referenceType">Type of the reference.</param>
            <returns></returns>
            <remarks>
            The result is a reference type.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.UnboxAny(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Unboxes a boxed value. This
            creates a statement.
            </summary>
            <param name="elementLayout">The element layout.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.LoadIndirect(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Loads a value from an address. This
            creates a statement.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.StoreIndirect(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Stores the expression to an address.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Store(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Stores the expression to the specified local.
            </summary>
            <param name="local">The local.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Store(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Stores the expression to the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Storestatic(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Stores the expression to the specified field.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Storeinstance(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Stores the expression to the specified field.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.StoreArrayElement(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Stores the expression to the specified array element.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushPointerToStackTop">
            <summary>
            Pushes pointer to stack top;
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Pushes the type.
            </summary>
            <param name="type"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushTypeReference(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference)">
            <summary>
            Pushes the type reference.
            </summary>
            <param name="typeReference">The type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushMethod(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Pushes the method.
            </summary>
            <param name="method"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Fill">
            <summary>
            Pushes a map filled with the same element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Update">
            <summary>
            Updates a map with a key-value pair.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Fuse">
            <summary>
            Updates a map by copying a range from another map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Move">
            <summary>
            Moves all indices of a map by an offset
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.PushSnippet(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Pushes an undefined value.
            </summary>
            <param name="type"></param>
            <param name="text"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Unary(Microsoft.ExtendedReflection.Metadata.UnaryOperator)">
            <summary>
            Performs a unary operation.
            </summary>
            <param name="operator"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.LogicalNot">
            <summary>
            Performs a logical negation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Binary(Microsoft.ExtendedReflection.Metadata.BinaryOperator)">
            <summary>
            Performs a binary operation.
            </summary>
            <param name="operator"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.IsAssignable">
            <summary>
            Checks whether the first operand is a type whose values are assignable to the second operand type.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.MdIndex(System.Int32)">
            <summary>
            Turns a list of integers into an md-index.
            </summary>
            <param name="rank"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Select(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Selects from a map at a given index.
            </summary>
            <param name="indexType"></param>
            <param name="elementType"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.SelectObjectProperty(Microsoft.ExtendedReflection.Interpretation.ObjectProperty)">
            <summary>
            Selects an object property.
            </summary>
            <param name="objectProperty"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.SelectField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a field of an object or a struct.
            </summary>
            <param name="instanceField"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.SelectMethod(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Selects a method from the vtable of an object.
            </summary>
            <param name="virtualMethod"></param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.SelectArrayElementType">
            <summary>
            Selects the element type of an array type.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.SelectBoxValueType">
            <summary>
            Selects the value type of a box type.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.SelectPointerToStructField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a pointer to a field given the address of a struct.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.SelectPointerToObjectField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a pointer to a field given an object reference.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.SelectPointerToElement">
            <summary>
            Selects a pointer to an element given the base address of a compound and an index into a numbered element of the compound.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.SelectPointerToOffset(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Selects a pointer to an element given the base address of a compound and an offset measured in the size of the given element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.New(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Creates a new object by calling the specified constructor.
            </summary>
            <param name="constructor">The constructor.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Box(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Boxes the specified element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.NewSzArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Creates a new sz array, whose length is taken from the stack.
            </summary>
            <param name="elementType">Type of the sz-array elements.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.NewSzArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Int32)">
            <summary>
            Creates a new sz array, with a fixed number of elements taken from the stack.
            </summary>
            <param name="elementType">Type of the sz-array elements.</param>
            <param name="length">The length.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.NewMdArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Int32)">
            <summary>
            Creates a new md array. Pairs of lowerbound and length will be taken from the stack.
            </summary>
            <param name="elementType">Type of the md-array elements.</param>
            <param name="rank">The rank.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Callstatic(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Callinstance(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Callvirt(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Callvirts the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.IfThenElse">
            <summary>
            Conditional.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.ShortCircuitAnd">
            <summary>
            Logical and.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Statement">
            <summary>
            Turns the current expression into a statement.
            </summary>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Return(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Turns the current expression into a return-statement.
            </summary>
            <param name="type">type of returned value; optional</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Return">
            <summary>
            Return statement for a method with no return value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Throw">
            <summary>
            Turns the current expression into a throw-statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.DeclareLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Begins to declare a local variable.
            </summary>
            <param name="type">type of local variable</param>
            <param name="preferredName">The preferred name.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginDeclareLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Begins to declare a local variable.
            </summary>
            <param name="type">type of local variable, may be null (and inferred)</param>
            <param name="preferredName">The preferred name.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndDeclareLocal(System.Boolean,System.Boolean)">
            <summary>
            Ends to declare a local variable.
            </summary>
            <param name="strict">Whether a strictly or lazily initialized variable should be created</param>
            <param name="mayChangeType">whether the code writer may change the type</param>
            <returns>new local variable</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginIfThenElse">
            <summary>
            Takes a conditional expression, and starts an if-then-else statement.
            </summary>
            <returns></returns>
            <remarks>
            The protocol of an if-then-else statement is:
            <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginIfThenElse"/>; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginThen"/>; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndThen"/>; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginElse"/>; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndElse"/>; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndIfThenElse"/>.
            or
            <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginIfThenElse"/>; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginThen"/>; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndThen"/>; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndIfThenElse"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginThen">
            <summary>
            Marks beginning of then-block; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndThen">
            <summary>
            Marks end of then-block; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginElse">
            <summary>
            Marks beginning of else-block; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndElse">
            <summary>
            Marks end of else-block; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndIfThenElse">
            <summary>
            Marks end of if-then-else
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginTryCatchFinally">
            <summary>
            Starts an exception handling region.
            </summary>
            <returns></returns>
            <remarks>
            The protocol of an if-then-else statement is:
            <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginTryCatchFinally"/>; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginTry"/>; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndTry"/>;
            <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginCatch(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)"/>; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndCatch"/>;
            <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginFinally"/>; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndFinally"/>;
            <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndTryCatchFinally"/>;
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginTry">
            <summary>
            Marks the beginning of a 'try' block.<see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndTry">
            <summary>
            Marks the end of a 'try' block.<see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginCatch(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Marks the beginning of a 'catch' block.<see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginTryCatchFinally"/>
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <param name="declareLocal">Whether to store the exception in a newly declared local.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndCatch">
            <summary>
            Marks the end of a 'catch' block.<see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginFinally">
            <summary>
            Marks the beginning of a 'finally' block.<see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndFinally">
            <summary>
            Marks the end of a 'finally' block.<see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndTryCatchFinally">
            <summary>
            Marks the beginning of a eh region.<see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginUsingScope">
            <summary>
            Starts a 'using' region
            </summary>
            <returns></returns>
            <remarks>
            The protocol of an eh statement is:
            <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginUsingScope"/>; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginUsingScope"/>;
            ...
            <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndUsingDeclaration(System.Boolean,System.Boolean)"/>;
            <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginUsing"/>; <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndUsing"/>;
            <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndUsingScope"/>;
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.UsingDeclaration(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Marks the using header without local
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginUsingDeclaration(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Marks the begining of the using header
            </summary>
            <param name="type">The type.</param>
            <param name="preferredName">Name of the preferred.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndUsingDeclaration(System.Boolean,System.Boolean)">
            <summary>
            Marks the end of the using declaration.
            </summary>
            <param name="strict">if set to <c>true</c> [strict].</param>
            <param name="mayChangeType">if set to <c>true</c> [may change type].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginUsing">
            <summary>
            Matks the beginning of the using body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndUsing">
            <summary>
            Marks the end of the using body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndUsingScope">
            <summary>
            Marks the end of using scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.BeginCommentBlock">
            <summary>
            Marks the begin of the comment block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.EndCommentBlock">
            <summary>
            Marks the end of the comment block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Comment(System.String)">
            <summary>
            Writes a line comment
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Import(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Imports operands from builder into current builder
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.SwapOperands(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Swaps the specified builder operands
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Write(Microsoft.ExtendedReflection.Emit.IMethodBodyWriter)">
            <summary>
            Applies all operands to writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Call(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Helper class to emit a callstatic, callinstance, new or callvirt
            </summary>
            <param name="method"></param>
            <param name="optionalParameterTypes"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.SerializableName">
            <summary>
            Creates a serializable, readonly instance of the builder
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.Microsoft#ExtendedReflection#Emit#IMethodBodyWriter#UsingNamespaces">
            <summary>
            Gets the list of imported namespace
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.OperandCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.OperandCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.OperandCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyOperand})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder.OperandCollection"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.CodeBranch">
            <summary>
            Identifier of code branches 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.CodeBranch.Method">
            <summary>
            The method; null means an unknown method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.CodeBranch.BranchLabel">
            <summary>
            Branch id
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CodeBranch.#ctor(Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.CodeBranch"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="branchLabel">The branch label.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CodeBranch.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CodeBranch.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CodeBranch.Equals(Microsoft.ExtendedReflection.Metadata.CodeBranch)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CodeBranch.op_Equality(Microsoft.ExtendedReflection.Metadata.CodeBranch,Microsoft.ExtendedReflection.Metadata.CodeBranch)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CodeBranch.op_Inequality(Microsoft.ExtendedReflection.Metadata.CodeBranch,Microsoft.ExtendedReflection.Metadata.CodeBranch)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CodeBranch.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.CodeBranch.IsStartMethod">
            <summary>
            Whether this branch marks the start of a method.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.CodeBranch.IsTarget">
            <summary>
            Whether this branch or switch change control flow to the target
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.CodeBranch.IsContinue">
            <summary>
            Whether this branch or switch didn't change control flow to the target
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.CodeBranch.IsFailedCheck">
            <summary>
            Whether an implicit check failed
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.CodeBranch.IsBranch">
            <summary>
            Whether this instance represents an explicit branch statement
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.CodeBranch.IsCheck">
            <summary>
            Whether this instance represents an implicit check
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.CodeBranch.IsSwitch">
            <summary>
            Whether this instance represents an explicit switch statement
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.CustomAttributeCreationEventArgs">
            <summary>
            Custom attribute creation event args
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CustomAttributeCreationEventArgs.#ctor(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.ICustomAttribute,System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.CustomAttributeCreationEventArgs"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="customAttribute">The custom attribute.</param>
            <param name="value">The value.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.CustomAttributeCreationEventArgs.Container">
            <summary>
            The metadata element on which this custom attribute was attached.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.CustomAttributeCreationEventArgs.CustomAttribute">
            <summary>
            The raw custom attribute information.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.CustomAttributeCreationEventArgs.Value">
            <summary>
            The created custom attribute data, if creation was successful.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.CustomAttributeCreationEventArgs.Exception">
            <summary>
            The exception indicating what went wrong, if creation was not successful.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.ICustomAttribute">
            <summary>
            Interface describing the meta-data of a custom attribute;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) custom attribute, but can be a custom attribute under construction.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.ICustomAttribute.GetValue">
            <summary>
            Returns an instance of the attribute, if it is available.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ICustomAttribute.Constructor">
            <summary>
            Gets the constructor.
            </summary>
            <value>The constructor.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ICustomAttribute.ConstructorArguments">
            <summary>
            Gets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ICustomAttribute.NamedArguments">
            <summary>
            Gets the named arguments.
            </summary>
            <value>The named arguments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ICustomAttribute.HasValue">
            <summary>
            Whether the attribute value is available.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.ICustomAttribute.SerializableName">
            <summary>
            Gets the serializable instance representing this attribute
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Impl.CustomAttributeProviderEx.CustomAttribute.SerializableName">
            <summary>
            Gets the serializable instance representing this attribute
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.CommandLine.ArgumentType">
            <summary>
            Used to control parsing of command line arguments.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.CommandLine.ArgumentType.Required">
            <summary>
            Indicates that this field is required. An error will be displayed
            if it is not present when parsing arguments.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.CommandLine.ArgumentType.Unique">
            <summary>
            Only valid in conjunction with Multiple.
            Duplicate values will result in an error.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.CommandLine.ArgumentType.Multiple">
            <summary>
            Inidicates that the argument may be specified more than once.
            Only valid if the argument is a collection
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.CommandLine.ArgumentType.AtMostOnce">
            <summary>
            The default type for non-collection arguments.
            The argument is not required, but an error will be reported if it is specified more than once.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.CommandLine.ArgumentType.LastOccurenceWins">
            <summary>
            For non-collection arguments, when the argument is specified more than
            once no error is reported and the value of the argument is the last
            value which occurs in the argument list.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.CommandLine.ArgumentType.MultipleUnique">
            <summary>
            The default type for collection arguments.
            The argument is permitted to occur multiple times, but duplicate 
            values will cause an error to be reported.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute">
            <summary>
            Allows control of command line parsing.
            Attach this attribute to instance fields of types used
            as the destination of command line argument parsing.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.#ctor(Microsoft.ExtendedReflection.CommandLine.ArgumentType)">
            <summary>
            Allows control of command line parsing.
            </summary>
            <param name="type"> Specifies the error checking to be done on the argument. </param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.Type">
            <summary>
            The error checking to be done on the argument.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.DefaultShortName">
            <summary>
            Returns true if the argument did not have an explicit short name specified.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.ShortName">
            <summary>
            The short name of the argument.
            Set to null means use the default short name if it does not
            conflict with any other parameter name.
            Set to indexCheckString.Empty for no short name.
            This property should not be set for DefaultArgumentAttributes.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.DefaultLongName">
            <summary>
            Returns true if the argument did not have an explicit long name specified.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.LongName">
            <summary>
            The long name of the argument.
            Set to null means use the default long name.
            The long name for every argument must be unique.
            It is an error to specify a long name of indexCheckString.Empty.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.DefaultValue">
            <summary>
            The default value of the argument.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.HasDefaultValue">
            <summary>
            Returns true if the argument has a default value.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.HasHelpText">
            <summary>
            Returns true if the argument has help text specified.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.HelpText">
            <summary>
            The help text for the argument.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.LongHelpText">
            <summary>
            Gets or sets the long help text.
            </summary>
            <value>The long help text.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.Category">
            <summary>
            Argument category
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.Hidden">
            <summary>
            Internal flag, not documented
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.IsPrefixOptional">
            <summary>
            Whether the '-' or '/' prefix is optional.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.IsSimple">
            <summary>
            Gets or sets a value indicating whether this instance is simple.
            </summary>
            <value><c>true</c> if this instance is simple; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.Preview">
            <summary>
            Gets the preview.
            </summary>
            <value>The preview.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ArgumentAttribute.DontCopy">
            <summary>
            Don't copy argument around
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.CommandLine.DefaultArgumentAttribute">
            <summary>
            Indicates that this argument is the default argument.
            '/' or '-' prefix only the argument value is specified.
            The ShortName property should not be set for DefaultArgumentAttribute
            instances. The LongName property is used for usage text only and
            does not affect the usage of the argument.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.DefaultArgumentAttribute.#ctor(Microsoft.ExtendedReflection.CommandLine.ArgumentType)">
            <summary>
            Indicates that this argument is the default argument.
            </summary>
            <param name="type">Specifies the error checking to be done on the argument.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.CommandLine.ICommandLineDestination">
            <summary>
            Interface that a collection of command line properties must implement.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.ICommandLineDestination.DescribeCategory(System.String)">
            <summary>
            Describes a category.
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.ICommandLineDestination.GetEnvironmentSettingTypes">
            <summary>
            Gets the environment setting types.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ICommandLineDestination.ToolName">
            <summary>
            Get the tool pretty name that the user will recognise
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.ICommandLineDestination.UserManualLocation">
            <summary>
            Where to get the user manual.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.CommandLine.ErrorReporter">
            <summary>
            A delegate used in error reporting.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.CommandLine.CommandLineParser">
             <summary>
             Parser for command line arguments.
            
             The parser specification is infered from the instance fields of the object
             specified as the destination of the parse.
             Valid argument types are: int, uint, string, bool, enums
             Also argument types of Array of the above types are also valid.
             
             Error checking options can be controlled by adding a ArgumentAttribute
             to the instance fields of the destination object.
            
             At most one field may be marked with the DefaultArgumentAttribute
             indicating that arguments without a '-' or '/' prefix will be parsed as that argument.
            
             If not specified then the parser will infer default options for parsing each
             instance field. The default long name of the argument is the field name. The
             default short name is the first character of the long name. Long names and explicitly
             specified short names must be unique. Default short names will be used provided that
             the default short name does not conflict with a long name or an explicitly
             specified short name.
            
             Arguments which are array types are collection arguments. Collection
             arguments can be specified multiple times.
             </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.#ctor">
            <summary>
            Don't ever call this.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.ApplyDefaults(System.Object)">
            <summary>
            Applies default values to each field
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.ParseArgumentsWithUsage(System.String,System.String[],Microsoft.ExtendedReflection.CommandLine.ICommandLineDestination)">
            <summary>
            Parses Command Line Arguments. Displays usage message to Console.Out
            if /?, /help or invalid arguments are encounterd.
            Errors are output on Console.Error.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="appNamePrefix">The app name prefix.</param>
            <param name="arguments">The actual arguments.</param>
            <param name="destination">The resulting parsed arguments.</param>
            <returns>true if no errors were detected.</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.TryParseArguments(System.String[],Microsoft.ExtendedReflection.CommandLine.ICommandLineDestination)">
            <summary>
            Parses Command Line Arguments. 
            Errors are output on Console.Error.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="arguments"> The actual arguments. </param>
            <param name="destination"> The resulting parsed arguments. </param>
            <returns> true if no errors were detected. </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.TryParseArguments(System.String[],Microsoft.ExtendedReflection.CommandLine.ICommandLineDestination,Microsoft.ExtendedReflection.CommandLine.ErrorReporter)">
            <summary>
            Parses Command Line Arguments. 
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="arguments"> The actual arguments. </param>
            <param name="destination"> The resulting parsed arguments. </param>
            <param name="reporter"> The destination for parse errors. </param>
            <returns> true if no errors were detected. </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.GenerateArguments(Microsoft.ExtendedReflection.CommandLine.ICommandLineDestination,System.Boolean)">
            <summary>
            Generates the command line arguments.
            </summary>
            <param name="destination">The destination.</param>
            <param name="wrapSpacesInQuotes">Whether to wrap spaces in quotes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.ParseHelp(System.String[],System.String@,System.String@)">
            <summary>
            Checks if a set of arguments asks for help.
            </summary>
            <param name="args">Args to check for help.</param>
            <param name="category">The category.</param>
            <param name="categoryParameter">A parameter for the category</param>
            <returns>
            Returns true if args contains /? or /help.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.ArgumentsUsage(Microsoft.ExtendedReflection.CommandLine.ICommandLineDestination,System.String,System.String,System.String)">
            <summary>
            Returns a Usage string for command line argument parsing.
            Use ArgumentAttributes to control parsing behaviour.
            Formats the output to the width of the current console window.
            </summary>
            <param name="destination">The destination.</param>
            <param name="appNamePrefix">The app name prefix.</param>
            <param name="helpCategory">The help category.</param>
            <param name="helpCategoryParameter">A help category parameter</param>
            <returns>
            Printable string containing a user friendly description of command line arguments.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.ArgumentsUsage(Microsoft.ExtendedReflection.CommandLine.ICommandLineDestination,System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns a Usage string for command line argument parsing.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="destination">The destination.</param>
            <param name="appNamePrefix">The app name prefix.</param>
            <param name="helpCategory">The help category.</param>
            <param name="helpCategoryParameter">A parameter for the help category.</param>
            <param name="columns">The number of columns to format the output to.</param>
            <returns>
            Printable string containing a user friendly description of command line arguments.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.#ctor(Microsoft.ExtendedReflection.CommandLine.ICommandLineDestination,Microsoft.ExtendedReflection.CommandLine.ErrorReporter)">
            <summary>
            Creates a new command line argument parser.
            </summary>
            <param name="destination">The destination.</param>
            <param name="reporter">The destination for parse errors.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.ParseArgumentList(System.String[],Microsoft.ExtendedReflection.CommandLine.ICommandLineDestination)">
            <summary>
            Parses an argument list into an object
            </summary>
            <param name="args"></param>
            <param name="destination"></param>
            <returns> true if an error occurred </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.Parse(System.String[],Microsoft.ExtendedReflection.CommandLine.ICommandLineDestination)">
            <summary>
            Parses an argument list.
            </summary>
            <param name="args"> The arguments to parse. </param>
            <param name="destination"> The destination of the parsed arguments. </param>
            <returns> true if no parse errors were encountered. </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.GetUsageString(System.String,System.String,System.String,System.Int32)">
            <summary>
            A user firendly usage string describing the command line argument syntax.
            </summary>
            <param name="appNamePrefix">The app name prefix.</param>
            <param name="helpCategory">The help category.</param>
            <param name="helpCategoryParameter">A help category parameter</param>
            <param name="screenWidth">Width of the screen.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.getOverviewHelpStrings(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="appNamePrefix"></param>
            <param name="name"></param>
            <param name="shortName"></param>
            <param name="description">may be null</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.CommandLine.CommandLineParser.HasDefaultArgument">
            <summary>
            Does this parser have a default argument.
            </summary>
            <value> Does this parser have a default argument. </value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter">
            <summary>
            Emitter in C# syntax
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.CSharp.ICSharpWriterWithSafety">
            <summary>
            A writer that holds a safe/unsafe code state
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.ICSharpWriterWithSafety.MakeUnsafe">
            <summary>
            Makes the content unsafe.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.CSharp.ICSharpWriterWithSafety.Unsafe">
            <summary>
            Gets a value indicating whether this content is unsafe.
            </summary>
            <value><c>true</c> if unsafe; otherwise, <c>false</c>
            /c>.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.#ctor(Microsoft.ExtendedReflection.Emit.LanguageNamespaceMode,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter"/> class.
            </summary>
            <param name="namespaceMode">The namespace mode.</param>
            <param name="preferredLineWidth">Width of the preferred line.</param>
            <param name="sortMembers">Sort members</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.MakeUnsafe">
            <summary>
            Makes the unsafe.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.ImportNamespace(System.String)">
            <summary>
            Adds a namespace to the list of 'using' namespaces
            </summary>
            <param name="namespace"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.AddAssemblyAlias(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference,System.String)">
            <summary>
            Adds an assembly alias
            </summary>
            <param name="assembly"></param>
            <param name="alias"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.GetOrCreateAssemblyAlias(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference)">
            <summary>
            Gets or creates a new alias for the assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.IsPartial(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Determines whether the specified type definition is partial.
            Returns <code>true</code>.
            </summary>
            <param name="typeDefinition">The type definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.CreateMethodBodyWriter(Microsoft.ExtendedReflection.Emit.IMethodBodyWriterContext,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Creates the method body this.writer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.WriteAssembly(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition)">
            <summary>
            Writes the specified module as text.
            </summary>
            <param name="textWriter">The text this.writer.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.WriteMethod(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.WriteExpression(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Writes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.WriteAssemblyInfo(System.IO.TextWriter,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.ICustomAttribute})">
            <summary>
            Writes the assembly info.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="attributes"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.WriteModuleInfo(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition)">
            <summary>
            Writes the module info.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.WriteType(System.IO.TextWriter,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Writes the type definition.
            </summary>
            <param name="textWriter">The text writer.</param>
            <param name="typeDefinition">The type definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.GetTypeName(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Collections.IIndexable{System.String},Microsoft.ExtendedReflection.Collections.IIndexable{System.String})">
            <summary>
            Pretty formats the type name
            </summary>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <param name="genericMethodParameters">The generic method parameters.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.IsPure">
            <summary>
            Whether only proper (compilable) C# syntax was used.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.Unsafe">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter"/> is unsafe.
            </summary>
            <value><c>true</c> if unsafe; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.ImportedNamespaces">
            <summary>
            Set of namespaces used during writing.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.AssemblyAliases">
            <summary>
            Tries to get a custom assembly alias.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.IndentString">
            <summary>
            Gets or sets the indent.
            </summary>
            <value>The indent.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpAssemblyWriter.Writer.ShouldUseNewLine(System.Boolean,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition})">
            <summary>
            Tries to estimate whether the parameter list should
            be emitted on a single or multiple line basis.
            </summary>
            <param name="isStatic"></param>
            <param name="parameters"></param>
            <returns></returns>
            <remarks>
            This method is not precise because it does not know
            the position of the caret.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper">
            <summary>
            Various helpers to format C#
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.IsEscapingChar(System.Char)">
            <summary>
            Determines whether the character is escaping
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.ContainsEscapingChar(System.String)">
            <summary>
            Determines whether the strings contains a character that must be escaped.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.ContainsEscapingChar(System.String,System.Boolean@)">
            <summary>
            Determines whether the strings contains a character that must be escaped.
            </summary>
            <param name="string"></param>
            <param name="allSame">whether all characters in the string are equal</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.Escape(System.String)">
            <summary>
            Escapes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.AppendEscapedChar(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Char)">
            <summary>
            Appends the escaped char.
            </summary>
            <param name="stringBuilder">The string builder.</param>
            <param name="char">The char.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.AppendUnicodeEscapedChar(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Char)">
            <summary>
            Appends the escaped char.
            </summary>
            <param name="stringBuilder">The string builder.</param>
            <param name="char">The char.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.WriteComment(System.IO.TextWriter,System.String)">
            <summary>
            Write a line by line C# comment
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.WriteEscapedChar(System.IO.TextWriter,System.Char)">
            <summary>
            Appends the escaped char.
            </summary>
            <param name="writer">The writer.</param>
            <param name="char"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.QuoteChar(System.Char)">
            <summary>
            Quotes the character.
            </summary>
            <param name="char">The char.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.AppendQuotedChar(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Char)">
            <summary>
            Writes the quoted character.
            </summary>
            <param name="builder">The string builder.</param>
            <param name="char">The char.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.WriteQuotedChar(System.IO.TextWriter,System.Char)">
            <summary>
            Writes the quoted character.
            </summary>
            <param name="writer">The writer.</param>
            <param name="char">The char.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.QuoteString(System.String,System.Int32)">
            <summary>
            Quotes the string.
            </summary>
            <param name="string"></param>
            <param name="ellipseAfterMaxChars">if non-negative, states the maximum number of characters to be quoted after which an ellipse is used to shorten the rest</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.WriteQuotedString(System.IO.TextWriter,System.String,System.Int32)">
            <summary>
            Quotes the string.
            </summary>
            <param name="writer"></param>
            <param name="string"></param>
            <param name="ellipseAfterMaxChars">if non-negative, states the maximum number of characters to be quoted after which an ellipse is used to shorten the rest</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.IsIdentifierStartCharacter(System.Char)">
            <summary>
            Gets a value identifying if a character is suitable as the first character of a C# identifier
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.IsIdentifierPartCharacter(System.Char)">
            <summary>
            Gets a value identifying if a character is suitable as the non-first character of a C# identifier
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.IsCallableIdentifier(System.String)">
            <summary>
            Gets a value to determine if a string is a possible identifier
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.IsCompilableTypeName(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type name contains valid identifier that
            can be compiled in C#
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.IsCompilableMethodSignature(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference)">
            <summary>
            Gets a valude indicating if all the types in the signature of the method
            are compilable identifiers. The method name is not validated.
            </summary>
            <param name="methodDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpHelper.IsInvalidGenericConstraint(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type can be used in the C# type constraint
            </summary>
            <remarks>
            A class-type constraint must satisfy the following rules:
            	The type must be a class type (not implemented)
            	The type must not be sealed (not implemented)
            	The type must not be one of the following types: System.Array, System.Delegate, System.Enum, or System.ValueType (implemented)
            	The type must not be object. Because all types derive from object, such a constraint would have no effect if it were permitted (implemented)
            	At most one constraint for a given type parameter can be a class type (not implemented
            </remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter">
            <summary>
            A writer using C# syntax.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.#ctor(Microsoft.ExtendedReflection.Emit.ILanguageManager,System.IO.TextWriter,Microsoft.ExtendedReflection.Emit.IMethodBodyWriterContext,Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Emit.LanguageNamespaceMode,System.Int32)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="languageManager">The language manager.</param>
            <param name="textWriter">The text writer.</param>
            <param name="context">The context.</param>
            <param name="visibilityContext">the context (if any) relative to which the expression may directly reference other members without using reflection</param>
            <param name="namespaceMode">The namespace mode.</param>
            <param name="lineWidth">Width of the line.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.SetBaseCtorCall(Microsoft.ExtendedReflection.Emit.CSharp.CSharpFormattedExpression)">
            <summary>
            Assign the base ctor call
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.CreateBody">
            <summary>
            Creates the body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.MakeUnsafe">
            <summary>
            Makes this body unsafe.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginDeclareLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Begins to declare a local variable.
            </summary>
            <param name="type">The type.</param>
            <param name="preferredName">The preferred name.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndDeclareLocal(System.Boolean,System.Boolean)">
            <summary>
            Ends to declare a local variable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.DeclareLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Declares the local.
            </summary>
            <param name="type">The type.</param>
            <param name="preferredName">The preferred name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.StoreIndirect(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Stores the expression to an address. This
            creates a statement.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Store(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Stores the expression to the specified local. This 
            creates a statement.
            </summary>
            <param name="local">The local.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Store(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Stores the expression to the specified parameter. This 
            creates a statement.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Storeinstance(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Stores the expression to the specified field. This
            creates a statement.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Storestatic(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Stores the expression to the specified field. This
            creates a statement.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.StoreArrayElement(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Stores the expression to the specified array element. This
            creates a statement.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginIfThenElse">
            <summary>
            Takes a conditional expression, and starts an if-then-else statement.
            </summary>
            <remarks>
            The protocol of an if-then-else statement is: 
            <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginIfThenElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndIfThenElse"/>.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginThen">
            <summary>
            Marks beginning of then-block; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndThen">
            <summary>
            Marks end of then-block; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginElse">
            <summary>
            Marks beginning of else-block; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndElse">
            <summary>
            Marks end of else-block; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginIfThenElse"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndIfThenElse">
            <summary>
            Marks end of if-then-else
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginTryCatchFinally">
            <summary>
            Takes a conditional expression, and starts an if-then-else statement.
            </summary>
            <remarks>
            The protocol of an if-then-else statement is: 
            <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginIfThenElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndThen"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndElse"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndIfThenElse"/>.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginTry">
            <summary>
            Marks the beginning of a 'try' block.<see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndTry">
            <summary>
            Marks the end of a 'try' block.<see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginCatch(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Marks the beginning of a 'catch' block.<see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <param name="declareLocal">Whether to store the exception in a newly declared local.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndCatch">
            <summary>
            Marks the end of a 'catch' block.<see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginFinally">
            <summary>
            Marks the beginning of a 'finally' block.<see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndFinally">
            <summary>
            Marks the end of a 'finally' block.<see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndTryCatchFinally">
            <summary>
            Marks the beginning of a eh region.<see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginTryCatchFinally"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginUsingScope">
            <summary>
            Starts a 'using' region
            </summary>
            <returns></returns>
            <remarks>
            The protocol of an eh statement is:
            <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginUsingScope"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndUsingDeclaration(System.Boolean,System.Boolean)"/>;
            ...
            <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndUsingDeclaration(System.Boolean,System.Boolean)"/>;
            <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginUsing"/>; <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndUsing"/>;
            <see cref="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndUsingScope"/>;
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginUsingDeclaration(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Marks the begining of the using header
            </summary>
            <param name="type">The type.</param>
            <param name="preferredName">Name of the preferred.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndUsingDeclaration(System.Boolean,System.Boolean)">
            <summary>
            Marks the end of the using declaration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.UsingDeclaration(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Marks a using header without local
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginUsing">
            <summary>
            Matks the beginning of the using body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndUsing">
            <summary>
            Marks the end of the using body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndUsingScope">
            <summary>
            Marks the end of using scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Throw">
            <summary>
            Turns the current expression into a throw-statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Statement">
            <summary>
            Turns the current expression into a statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Return(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Turns the current expression into a return-statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Return">
            <summary>
            Return statement for method with no return value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Push(System.Byte)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Push(System.Int16)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Fill">
            <summary>
            Pushes a map filled with the same element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Fuse">
            <summary>
            Updates a map by copying a range from another map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Move">
            <summary>
            Moves all indices of a map by an offset
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Update">
            <summary>
            Updates a map with a key-value pair.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushSnippet(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Pushes an undefined value
            </summary>
            <param name="type"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushPointerToNowhere">
            <summary>
            Pushes pointer to nowhere.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushPointerToValue">
            <summary>
            Pushes (read-only) pointer to operand value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushPointerToBoundedIUniform">
            <summary>
            Pushes (read-only) pointer to a compound with a bounded length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushIsTypedPointer(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Pushes a check whether a pointer is typed.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushPointerToStaticField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes pointer to a static field.
            </summary>
            <param name="staticField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushPointerToInstanceFieldMap(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes pointer to a instance field map.
            </summary>
            <param name="instanceField"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushPointerToArgument(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Pushes pointer to argument.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushPointerToLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Pushes pointer to local variable.
            </summary>
            <param name="local"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushPointerToStackTop">
            <summary>
            Pushes pointer to stack top;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.SelectMethod(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Selects a method from the vtable of an object.
            </summary>
            <param name="virtualMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.SelectArrayElementType">
            <summary>
            Selects the element type of an array type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.SelectBoxValueType">
            <summary>
            Selects the value type of a box type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.SelectPointerToElement">
            <summary>
            Selects a pointer to an element given the base address of a compound and an index into a numbered element of the compound.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.SelectPointerToOffset(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Selects a pointer to an element given the base address of a compound and an offset measured in the size of the given element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.SelectPointerToStructField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a pointer to a field given the address of a struct.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.SelectPointerToObjectField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a pointer to a field given an object reference.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Pushes the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushTypeReference(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference)">
            <summary>
            Pushes the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushMethod(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Pushes the method.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Push(System.Int32)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Push(System.Int64)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Push(System.Single)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Push(System.Double)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Push(System.Decimal)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushNull">
            <summary>
            Pushes a null value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Push(System.String)">
            <summary>
            Pushes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Pushes the specified local.
            </summary>
            <param name="local">The local.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameter)">
            <summary>
            Pushes the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.PushDefault(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Pushes the default value of a type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.IsInst(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Checks whether the reference on the stack is assignable to the specified reference type.
            </summary>
            <param name="referenceType">Type of the reference.</param>
            <returns></returns>
            <remarks>
            The result is a reference type.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.LoadIndirect(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Loads a value from an address. This
            creates a statement.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.UnboxAny(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Loads a value from an address. This
            creates a statement.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.BeginCommentBlock">
            <summary>
            Marks the begin of the comment block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.EndCommentBlock">
            <summary>
            Marks the end of the comment block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Comment(System.String)">
            <summary>
            Writes a line comment
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Unary(Microsoft.ExtendedReflection.Metadata.UnaryOperator)">
            <summary>
            Performs a unary operation.
            </summary>
            <param name="operator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.LogicalNot">
            <summary>
            Performs a logical negation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Binary(Microsoft.ExtendedReflection.Metadata.BinaryOperator)">
            <summary>
            Performs a binary operation.
            </summary>
            <param name="operator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.IsAssignable">
            <summary>
            Checks whether the first operand is a type whose values are assignable to the second operand type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.SelectField(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Selects a field of an object or a struct, given an object reference of a struct value.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.MdIndex(System.Int32)">
            <summary>
            Turns a list of integers into an md-index.
            </summary>
            <param name="rank"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Select(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Selects from a map at a given index.
            </summary>
            <param name="indexType"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.SelectObjectProperty(Microsoft.ExtendedReflection.Interpretation.ObjectProperty)">
            <summary>
            Selects an object property.
            </summary>
            <param name="objectProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Push(Microsoft.ExtendedReflection.Metadata.Interfaces.IField)">
            <summary>
            Pushes the field.
            </summary>
            <param name="staticField">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.NewSzArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Creates a new sz-array.
            </summary>
            <param name="elementType">Type of the sz-array elements.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Box(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Creates a new box.
            </summary>
            <param name="boxedValueType">Type of the boxed value.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.NewSzArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Int32)">
            <summary>
            Creates a new sz-array.
            </summary>
            <param name="elementType">Type of the sz-array elements.</param>
            <param name="length">The length.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.NewMdArray(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Int32)">
            <summary>
            Creates a new md array. Pairs of lowerbound and length will be taken from the stack.
            </summary>
            <param name="elementType">Type of the md-array elements.</param>
            <param name="rank">The rank.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.New(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Creates a new object by calling the specified constructor.
            </summary>
            <param name="constructor">The constructor.</param>
            <returns>reference of this instance</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Callstatic(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Callinstance(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Callvirt(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Callvirts the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.IfThenElse">
            <summary>
            Conditional.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.ShortCircuitAnd">
            <summary>
            Logical and.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.IsPure">
            <summary>
            Whether only syntactically correct C# code has been created
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.CSharp.CSharpMethodBodyWriter.Unsafe">
            <summary>
            Whether unsafe code has been created
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Emit.CSharp.CSharpSignatures.AssemblyAliases">
            <summary>
            Gest the assembly aliases
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.TypeHelper">
            <summary>
            Helper methods over IType, TypeEx
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.AreEqual(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating that 2 types are equal
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.AreEqual(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference)">
            <summary>
            Gets a value indicating that 2 type references are equal
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsVoidType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is void
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsObjectType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is object
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsMapType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is a map
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsBoxType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is boxed
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsNullType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is null
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsBoolType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is a boolean
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsArrayType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is array
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsSingleType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is Single
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsDoubleType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is double
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsInt8Type(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is Int8
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsUInt8Type(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is UInt8
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsInt16Type(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is Int16
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsUInt16Type(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is UInt16
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsInt32Type(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is Int32
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsUInt32Type(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is UInt32
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsInt64Type(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is Int64
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsUInt64Type(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is UInt64
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsEnumLike(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is like an enum
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsSealed(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is sealed
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.IsNullable(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type is nullable
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.TypeHelper.GuessLayoutKind(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Guesses yhe layout kind
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder">
            <summary>
            A builder of an <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder.#ctor(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder"/> class.
            </summary>
            <param name="shortName">Short name.</param>
            <param name="publicKey">The public key.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder.Microsoft#ExtendedReflection#Metadata#Interfaces#IAssemblyDefinition#TryGetImageRuntimeVersion(System.String@)">
            <summary>
            Gets a string representing the version of the common language runtime
            (CLR) saved in the file containing the manifest.
            </summary>
            <value>
            A string representing the CLR version folder name. This is not a full path.
            </value>
            <remarks>
            For example, the value for the .NET Framework version 1.1
            would be v1.1.4322. The binary files for that version would
            be located in the path %windir%\Microsoft.NET\Framework\v1.1.4322.
            By default, ImageRuntimeVersion
            is set to the version of the CLR used to build the assembly.
            However, it might have been set to another value at compile time.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder.AddReferencedAssembly(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference)">
            <summary>
            Adds the referenced assembly.
            </summary>
            <param name="assemblyReference">The assembly reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder.DefineCustomAttribute(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.MetadataExpression[])">
            <summary>
            Defines the custom attribute.
            </summary>
            <param name="constructor">The constructor.</param>
            <param name="constructorArguments">The constructor arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder.AddCustomAttribute(Microsoft.ExtendedReflection.Metadata.ICustomAttribute)">
            <summary>
            Adds the custom attribute.
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder.DefineModule(System.String)">
            <summary>
            Defines the module.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder.ReferencedAssemblies">
            <summary>
            Gets the set of assembly references.
            </summary>
            <value>The assembly references.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder.Comments">
            <summary>
            Gets or sets the comments.
            </summary>
            <value>The comments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder.CustomAttributes">
            <summary>
            The custom attributes.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder.Modules">
            <summary>
            Gets the modules.
            </summary>
            <value>The modules.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder.ShortName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder.PublicKey">
            <summary>
            Gets the public key.
            </summary>
            <value>The public key.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder">
            <summary>
            A builder of <see cref="T:Microsoft.ExtendedReflection.Metadata.ICustomAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.#ctor(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.AttributeArgument})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder"/> class.
            </summary>
            <param name="constructor">The constructor.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.#ctor(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.MetadataExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder"/> class.
            </summary>
            <param name="constructor">The constructor.</param>
            <param name="constructorArguments">The constructor arguments.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.Microsoft#ExtendedReflection#Metadata#Builder#ICompilationConditional#TryGetCompilationSymbol(System.String@)">
            <summary>
            Tries the get compilation symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.Microsoft#ExtendedReflection#Metadata#Builder#ISourceLocationHintable#TryGetFileNameHint(System.String@)">
            <summary>
            Gets a hint about the desired filename, without the extension.
            </summary>
            <param name="fileNameHint"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.AddNamedArgument(Microsoft.ExtendedReflection.Metadata.Interfaces.IField,Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Adds the named argument.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.AddNamedArgument(Microsoft.ExtendedReflection.Metadata.Interfaces.IProperty,Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Adds the named argument.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.AddConstructorArgument(Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Adds the named argument.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.GetValue">
            <summary>
            Returns an instance of the attribute, if it is available.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.Constructor">
            <summary>
            Gets the constructor.
            </summary>
            <value>The constructor.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.NamedArguments">
            <summary>
            Gets the named arguments.
            </summary>
            <value>The named arguments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.SerializableName">
            <summary>
            Gets the serializable instance representing this attribute
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.CompilationSymbol">
            <summary>
            Gets or sets the compilation symbol
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.FileNameHint">
            <summary>
            Gets or sets the filename hint
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.ConstructorArguments">
            <summary>
            Gets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder.HasValue">
            <summary>
            Whether the attribute value is available.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.EventDefinitionBuilder">
            <summary>
            A builder of <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IEventDefinition"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.EventDefinitionBuilder.Type">
            <summary>
            Gets the type of the event.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.EventDefinitionBuilder.Adder">
            <summary>
            Gets the adder.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.EventDefinitionBuilder.Remover">
            <summary>
            Gets the setter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.EventDefinitionBuilder.Firer">
            <summary>
            Gets the firer.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.EventDefinitionBuilder.Others">
            <summary>
            Gets the others.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.EventDefinitionBuilder.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.EventDefinitionBuilder.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.FieldDefinitionBuilder">
            <summary>
            A builder of <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IFieldDefinition"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.FieldDefinitionBuilder.IsStatic">
            <summary>
            Whether this field is static.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.FieldDefinitionBuilder.IsInitOnly">
            <summary>
            Gets or sets a value indicating whether this instance is init only.
            </summary>
            <value>
            	<c>true</c> if this instance is init only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.FieldDefinitionBuilder.Type">
            <summary>
            Field type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.FieldDefinitionBuilder.Literal">
            <summary>
            Gets the constant value of the field, if any.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.FieldDefinitionBuilder.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.FieldDefinitionBuilder.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.GenericParameterDefinitionBuilder">
            <summary>
            A builder of <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IGenericParameterDefinition"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.GenericParameterDefinitionBuilder.Name">
            <summary>
            Name of generic parameter, if any.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.GenericParameterDefinitionBuilder.Constraint">
            <summary>
            Constraint
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.GenericParameterDefinitionBuilder.CustomAttributes">
            <summary>
            The custom attributes.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.GenericParameterDefinitionBuilder.SerializableName">
            <summary>
            Gets a serialiable name of this instance (for the current state of this instance)
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.GenericParameterDefinitionBuilderCollection">
            <summary>
            Collection of GenericParameterDefinitionBuilder
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.GenericParameterDefinitionBuilderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.GenericParameterDefinitionBuilderCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.GenericParameterDefinitionBuilderCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.Builders.GenericParameterDefinitionBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.GenericParameterDefinitionBuilderCollection"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder">
            <summary>
            A builder of module-level definitions.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder.AddCustomAttribute(Microsoft.ExtendedReflection.Metadata.ICustomAttribute)">
            <summary>
            Adds the custom attribute.
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder.DefineType(System.String,System.String,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Adds a type definition.
            </summary>
            <param name="namespace">The namespace.</param>
            <param name="shortName">The short name.</param>
            <param name="baseType">The base type (can be changed later).</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder.RemoveMember(Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder)">
            <summary>
            Removes the member and returns a value indicating if the value was removed
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder.DefineField(System.Boolean,Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Defines the field.
            </summary>
            <param name="isStatic">if set to <c>true</c> [is static].</param>
            <param name="type">The type.</param>
            <param name="shortName">Short name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder.DefineProperty(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Defines the property.
            </summary>
            <param name="type">The type.</param>
            <param name="shortName">Short name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder.DefineEvent(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Defines the event.
            </summary>
            <param name="type">The type.</param>
            <param name="shortName">Short name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder.DefineMethod(System.Boolean,Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Defines the event.
            </summary>
            <param name="isStatic">if set to <c>true</c> [is static].</param>
            <param name="resultType">Type of the result (can be updated later).</param>
            <param name="shortName">Short name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder.GetUniqueMemberName(System.String)">
            <summary>
            Gets a unique member name.
            </summary>
            <param name="name">A preferred name.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder.Assembly">
            <summary>
            Gets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder.MemberDefinitions">
            <summary>
            Gets the member definitions.
            </summary>
            <value>The member definitions.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder.CustomAttributes">
            <summary>
            The custom attributes.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilderCollection">
            <summary>
            Collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilder"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.ModuleDefinitionBuilderCollection"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IOverride">
            <summary>
            Interface describing the meta-data of a method override;
            used as part of ExtendedReflection.Emit infrastructure;
            does not have to represent an existing (reflected) override, but can be an override under construction.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IOverride.OverriddenType">
            <summary>
            Gets the type of the overridden.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IOverride.GenericMethodParametersCount">
            <summary>
            Gets the number of generic method arguments
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IOverride.OverriddenName">
            <summary>
            Gets the name of the overridden.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IOverride.OverridingResultType">
            <summary>
            Gets the type of the overriding result.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IOverride.OverridingName">
            <summary>
            Gets the name of the overriding.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.IOverride.OverridingParameters">
            <summary>
            Gets the overriding parameters.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Impl.OverrideImpl.OverriddenType">
            <summary>
            Gets the type of the overridden.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Impl.OverrideImpl.OverriddenName">
            <summary>
            Gets the name of the overridden.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Impl.OverrideImpl.GenericMethodParametersCount">
            <summary>
            Gets the generic method parameters count
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Impl.OverrideImpl.OverridingResultType">
            <summary>
            Gets the type of the overriding result.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Impl.OverrideImpl.OverridingName">
            <summary>
            Gets the name of the overriding.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Impl.OverrideImpl.OverridingParameters">
            <summary>
            Gets the overriding parameters.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.ReferencedAssemblyMetadataVisitor`1">
            <summary>
            Collects referenced assemblies
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.ReferencedAssemblyMetadataVisitor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.ReferencedAssemblyMetadataVisitor`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.ReferencedAssemblyMetadataVisitor`1.#ctor(Microsoft.ExtendedReflection.Collections.SafeSet{Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.ReferencedAssemblyMetadataVisitor`1"/> class.
            </summary>
            <param name="assemblyReferences">The assembly references.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.ReferencedAssemblyMetadataVisitor`1.#ctor(Microsoft.ExtendedReflection.Collections.SafeSet{Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName},Microsoft.ExtendedReflection.Collections.SafeDictionary{System.Guid,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.ReferencedAssemblyMetadataVisitor`1"/> class.
            </summary>
            <param name="assemblyReferences">The assembly references.</param>
            <param name="_embeddedInteropTypes"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.ReferencedAssemblyMetadataVisitor`1.TryGetEmbeddedInteropTypes(Microsoft.ExtendedReflection.Collections.IFiniteMap{System.Guid,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition}@)">
            <summary>
            Tries to get the COM references
            </summary>
            <param name="embeddedInteropTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.ReferencedAssemblyMetadataVisitor`1.VisitType(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Visits the type.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.ReferencedAssemblyMetadataVisitor`1.VisitMethodDefinition(`0,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Visits the method definition.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="methodDefinition">The method definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.ReferencedAssemblyMetadataVisitor`1.VisitMethodBodyBuilder(`0,Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Visit a method body builder
            </summary>
            <param name="parameter"></param>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.ReferencedAssemblyMetadataVisitor`1.AssemblyReferences">
            <summary>
            Gets the assembly references.
            </summary>
            <value>The assembly references.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.MemberDefinitionFilter`1">
            <summary>
            Callback used to filter member definitions
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberDefinition"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.InstantiationHelper">
            <summary>
            Helper-class to instantiate definitions.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.InstantiationHelper.Instantiate(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Instantiates the specified method definition.
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <param name="genericMethodArguments">The generic method arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.InstantiationHelper.Instantiate(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterReference,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Instantiates the specified parameter definition.
            </summary>
            <param name="parameterDefinition">The parameter definition.</param>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <param name="genericMethodArguments">The generic method arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.InstantiationHelper.Instantiate(Microsoft.ExtendedReflection.Metadata.Interfaces.IFieldReference,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Instantiates the specified field definition.
            </summary>
            <param name="fieldDefinition">The field definition.</param>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.InstantiationHelper.Instantiate(Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyReference,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Instantiates the specified property definition.
            </summary>
            <param name="propertyDefinition">The property definition.</param>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.InstantiationHelper.Instantiate(Microsoft.ExtendedReflection.Metadata.Interfaces.IEventReference,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Instantiates the specified event definition.
            </summary>
            <param name="eventDefinition">The event definition.</param>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.InstantiationHelper.Instantiate(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Instantiates the specified type definition.
            </summary>
            <param name="typeDefinition">The type definition.</param>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.ConstraintBuilder">
            <summary>
            A generic parameter builder
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ConstraintBuilder.Attributes">
            <summary>
            Set of constraints
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ConstraintBuilder.Types">
            <summary>
            Types the instantiation must be compatible with.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ConstraintBuilder.SerializableName">
            <summary>
            Gets a serializable version of this constraint, instantiated for the current state of the builder.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.CustomAttributeCollection">
            <summary>
            Collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.ICustomAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CustomAttributeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.CustomAttributeCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CustomAttributeCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.ICustomAttribute})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.CustomAttributeCollection"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.MemberDefinitionCollection">
            <summary>
            Collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.MethodDefinitionCollection">
            <summary>
            Collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.ParameterDefinitionCollection">
            <summary>
            Collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.ParameterDefinitionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.ParameterDefinitionCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.ParameterDefinitionCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.ParameterDefinitionCollection"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilderCollection">
            <summary>
            Collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilderCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilderCollection.AddMember(Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder)">
            <summary>
            Adds a member
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilderCollection.RemoveMember(Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder)">
            <summary>
            Removes a member
            </summary>
            <param name="member"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilderCollection.DeclaringMember">
            <summary>
            Gets or sets the declaring member
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilderCollection.MemberNames">
            <summary>
            Gets the member names bag
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder">
            <summary>
            A method definition builder
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.DefineParameter(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String,Microsoft.ExtendedReflection.Metadata.ParameterDirection)">
            <summary>
            Defines the parameter.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.DefineParameter(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Defines the parameter.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.DefineGenericMethodParameter(System.String)">
            <summary>
            Defines the generic method parameter.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.DefineBody">
            <summary>
            Creates a <see cref="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.MethodBodyBuilder"/> that can be used to
            build the method body
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.BakeBody(Microsoft.ExtendedReflection.Emit.IMethodBodyCreator,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Bakes the body builder content into a body
            </summary>
            <param name="methodBodyCreator">The method body creator.</param>
            <param name="visibilityContext">The visibility context.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.GetUniqueParameterName(System.String)">
            <summary>
            Gets a unique parameter name.
            </summary>
            <param name="name">A preferred name.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.IsVirtual">
            <summary>
            Whether this method is virtual.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.IsConstructor">
            <summary>
            Whether this method is a constructor.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.IsAbstract">
            <summary>
            Whether this method is virtual.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.IsHideBySig">
            <summary>
            Whether Indicates this method hides by name and signature; otherwise, by name only.
            True by default.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.IsSetter">
            <summary>
            Whether the method is a property setter
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.IsNewslot">
            <summary>
            Whether this method gets a new slot in the vtable.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.IsFinal">
            <summary>
            Whether this method is final.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.IsStatic">
            <summary>
            Whether this method is static.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.ResultParameter">
            <summary>
            Result parameter
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>The type of the result.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.ThisParameter">
            <summary>
            Gets the this parameter.
            </summary>
            <value>The this parameter.</value>
            <exception cref="T:System.InvalidOperationException">the method is static</exception>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.ParameterTypes">
            <summary>
            Gets the parameter types.
            </summary>
            <value>The parameter types.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.GenericMethodParametersCount">
            <summary>
            Gets the number of generic method parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.GenericMethodParameters">
            <summary>
            Gets the generic method parameters.
            </summary>
            <value>The generic method parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.MethodBody">
            <summary>
            Gets the method body. See <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.DefineBody"/>, <see cref="M:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.BakeBody(Microsoft.ExtendedReflection.Emit.IMethodBodyCreator,Microsoft.ExtendedReflection.Metadata.VisibilityContext)"/>
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.MethodBodyBuilder">
            <summary>
            Gets or sets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.NeedsBaking">
            <summary>
            Gets a value indicating whether this method definition builder needs baking.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.GenericParameterDefinitionCollection">
            <summary>
            Collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IGenericParameterDefinition"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.OverrideBuilder">
            <summary>
            A builder of <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IOverride"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.OverrideBuilder.OverriddenType">
            <summary>
            Gets or sets the type of the overridden.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.OverrideBuilder.OverriddenName">
            <summary>
            Gets or sets the name of the overridden.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.OverrideBuilder.GenericMethodParametersCount">
            <summary>
            Gets or sets the generic method parameter count
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.OverrideBuilder.OverridingResultType">
            <summary>
            Gets or sets the type of the overriding result.
            </summary>
            <value>The type of the overriding result.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.OverrideBuilder.OverridingName">
            <summary>
            Gets or sets the name of the overriding.
            </summary>
            <value>The name of the overriding.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.OverrideBuilder.OverridingParameters">
            <summary>
            Gets the overriding parameters.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.OverrideBuilderCollection">
            <summary>
            Collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.OverrideBuilder"/>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilder">
            <summary>
            A builder of <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilder.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilder.GenericMethodParametersCount">
            <summary>
            Gets the generic method parameters count.
            </summary>
            <value>The generic method parameters count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilder.IsOutParameter">
            <summary>
            Gets a value indicating whether it's a C# out parameter (type Spec = ManagedPointer and direction is ByRefOut)
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilder.DeclaringMember">
            <summary>
            Gets the enclosing declaring type, if any.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilder.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilder.Index">
            <summary>
            The zero-based index of this parameter in the list of all parameters, or -1 for the result parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilder.IsThis">
            <summary>
            Gets or sets a value indicating whether this instance is this.
            </summary>
            <value><c>true</c> if this instance is this; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilder.Direction">
            <summary>
            Gets or sets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilder.CustomAttributes">
            <summary>
            The custom attributes.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilder.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilder.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilderCollection">
            <summary>
            Collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilder"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilderCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilderCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Builders.ParameterDefinitionBuilderCollection"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.PropertyDefinitionBuilder">
            <summary>
            A builder of <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyDefinition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.PropertyDefinitionBuilder.DefineThisParameter">
            <summary>
            Defines the this parameter.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.PropertyDefinitionBuilder.DefineParameter(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Defines the parameter.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.PropertyDefinitionBuilder.GetUniqueParameterName(System.String)">
            <summary>
            Gets a unique parameter name.
            </summary>
            <param name="name">A preferred name.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.PropertyDefinitionBuilder.Getter">
            <summary>
            Gets or sets the getter.
            </summary>
            <value>The getter.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.PropertyDefinitionBuilder.Setter">
            <summary>
            Gets or sets the setter.
            </summary>
            <value>The setter.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.PropertyDefinitionBuilder.Others">
            <summary>
            Gets the others.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.PropertyDefinitionBuilder.Type">
            <summary>
            property type
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.PropertyDefinitionBuilder.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.PropertyDefinitionBuilder.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.PropertyDefinitionBuilder.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder">
            <summary>
            A builder of a <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.ImplementInterface(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Implements the interface.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.DefineGenericTypeParameter(System.String)">
            <summary>
            Defines the generic type parameter.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.DefineOverride(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String,System.Int32,Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String,Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition[])">
            <summary>
            Defines the override.
            </summary>
            <param name="overriddenType">Type of the overridden.</param>
            <param name="overriddenName">Name of the overridden.</param>
            <param name="genericMethodParametersCount">Gets the generic parameter count</param>
            <param name="overridingResultType">Type of the overriding result.</param>
            <param name="overridingName">Name of the overriding.</param>
            <param name="overridingParameters">The overriding parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.DefineNestedType(System.String,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Adds a type definition.
            </summary>
            <param name="shortName">The short name.</param>
            <param name="baseType">The base type (can be changed later).</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.DefineField(System.Boolean,System.String,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Defines the field.
            </summary>
            <param name="isStatic">if set to <c>true</c> [is static].</param>
            <param name="shortName">Short name.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.DefineProperty(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Defines the property.
            </summary>
            <param name="type">The type.</param>
            <param name="shortName">Short name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.DefineEvent(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Defines the event.
            </summary>
            <param name="type">The type.</param>
            <param name="shortName">Short name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.DefineMethod(System.Boolean,Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.String)">
            <summary>
            Defines the event.
            </summary>
            <param name="isStatic">Whether the method is static.</param>
            <param name="resultType">Type of the result (can be updated later).</param>
            <param name="shortName">Short name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.RemoveMember(Microsoft.ExtendedReflection.Metadata.Builders.MemberDefinitionBuilder)">
            <summary>
            Removes the member.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.GetUniqueMemberName(System.String)">
            <summary>
            Gets a unique member name.
            </summary>
            <param name="name">A preferred name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.ContainsMemberName(System.String)">
            <summary>
            Checks whether this member name already exists
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.Namespace">
            <summary>
            The namespace in which this type is declared, if any.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.IsAbstract">
            <summary>
            Whether this type is abstract.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.IsInterface">
            <summary>
            Whether this type is an interface.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.IsSealed">
            <summary>
            Whether this type is sealed.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.IsEnumType">
            <summary>
            Whether this type is a subtype of SystemTypes.Enum.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.EnumUnderlyingType">
            <summary>
            The integral type on which an enum is based; only possible if<see cref="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.IsEnumType"/>, and if <code>GenericTypeParameters.Count</code> is zero.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.EnumValues">
            <summary>
            The collection of enum values; only possible if<see cref="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.IsEnumType"/>, and if <code>GenericTypeParameters.Count</code> is zero.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.LayoutKind">
            <summary>
            The kind of <see cref="T:Microsoft.ExtendedReflection.Metadata.Layout"/> this type represents.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.TypeKind">
            <summary>
            The kind of this type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.IsValueType">
            <summary>
            Whether this type is a subtype of <see cref="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.ValueType"/>
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.BaseType">
            <summary>
            The base type, if any.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.Microsoft#ExtendedReflection#Metadata#Interfaces#ITypeDefinition#DeclaredInterfaces">
            <summary>
            Declared implemented interfaces.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.GenericTypeParameters">
            <summary>
            Gets the generic type parameters.
            </summary>
            <value>The generic type parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.GenericTypeParametersCount">
            <summary>
            Gets the number of generic type parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.MemberDefinitions">
            <summary>
            Gets the member definitions.
            </summary>
            <value>The member definitions.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.Overrides">
            <summary>
            Gets the overrides.
            </summary>
            <value>The overrides.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder.SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate">
            <summary>
            Abstract base class for code update descriptions
            </summary>
            <remarks>
            All code updates are (conceptually) immutable.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SetOptional">
            <summary>
            Sets the update as optional
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.TryGetImpliedCodeUpdate(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Feedback.CodeUpdate}@)">
            <summary>
             Tries to get the list of implied updates when this update was applied succesfully
            </summary>
            <param name="impliedUpdates"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.GetUncachedImpliedCodeUpdates">
            <summary>
            Gets the uncached list of code updates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a code update for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.GetHashCodeUncached">
            <summary>
            Computes the hash code, uncached
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddFile(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.String,System.String)">
            <summary>
            Adds a new file to a project
            </summary>
            <param name="name"></param>
            <param name="targetAssembly"></param>
            <param name="fileName"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SetBreakpoint(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName)">
            <summary>
            Sets a breakpoint at the target
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SetBreakpoint(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName)">
            <summary>
            Sets a breakpoint at the target
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.DebugTestsInContext(System.String)">
            <summary>
            A code update that launches a 'Debug Tests in Context' sessions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.DebugTestsInContext">
            <summary>
            Debugs the tests in context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SignProject(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.String,Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            An update that signs a project with a given key
            </summary>
            <param name="name">The name.</param>
            <param name="project">The project.</param>
            <param name="keyFileNameHint">The key file name hint.</param>
            <param name="assemblyKeySource">The assembly key source.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SignProject(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.String,Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference)">
            <summary>
            An update that signs a project with a given key
            </summary>
            <param name="name">The name.</param>
            <param name="project">The project.</param>
            <param name="keyFileNameHint">The key file name hint.</param>
            <param name="assemblyKeySource">The assembly key source.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeProjectPlatform(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,Microsoft.ExtendedReflection.Monitoring.Bitness)">
            <summary>
            Changes the project platform, per configuration
            </summary>
            <param name="name">The name.</param>
            <param name="project">The project.</param>
            <param name="platform">The platform.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToClipboard(System.String,System.String)">
            <summary>
            An update that sends text to the clipboard
            </summary>
            <param name="name">The name.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToTextFile(System.String,System.String,System.String)">
            <summary>
            Creates an update the opens a new in memory file
            </summary>
            <param name="name">The name.</param>
            <param name="fileName">Name of the file.</param>
            <param name="content">The content (may be null)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToMail(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an update the opens a new mail using the default mail client
            </summary>
            <param name="name">The name.</param>
            <param name="subject">The subject.</param>
            <param name="to">To (may be null)</param>
            <param name="content">The content (may be null)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnsureTarget(Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Creates a codeupdate that ensures that background updates have been applied
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveFiles(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.String[])">
            <summary>
            A code update that removes files from a project
            </summary>
            <param name="name"></param>
            <param name="projectName"></param>
            <param name="fileNames"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveMethod(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName)">
            <summary>
            Creates a code update to removes the method.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveAttribute(System.String,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.TypeName)">
            <summary>
            A code update that removes all attributes of a particular type
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
            <param name="attributeType">Type of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveAttribute(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.TypeName)">
            <summary>
            A code update that removes all attributes of a particular type
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
            <param name="attributeType">Type of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddReference(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.Boolean,System.Boolean)">
            <summary>
            Creates a code update that adds a reference to a given project
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
            <param name="reference">The reference.</param>
            <param name="specificVersion">if set to <c>true</c> [specific version].</param>
            <param name="copyLocal">if set to <c>true</c> [copy local].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddReference(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a code update that adds a reference to a given project
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
            <param name="reference">The reference.</param>
            <param name="specificVersion">if set to <c>true</c> [specific version].</param>
            <param name="copyLocal">if set to <c>true</c> [copy local].</param>
            <param name="_alias">alias if any</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateOrUpdateTestProject(System.String,System.String,System.String,System.String)">
            <summary>
            A code update that adds a new project based on a given project.
            </summary>
            <param name="name">The name.</param>
            <param name="sourceProjectName">Name of the source project.</param>
            <param name="projectName">Name of the project.</param>
            <param name="testFrameworkName">name of the test framework that provides the templates</param>
            <returns></returns>
            <remarks>
            Visual Studio will create a test project for that project.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateOrUpdateTestProject(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.String,System.String)">
            <summary>
            A code update that adds a new project based on a given project.
            </summary>
            <param name="name">The name.</param>
            <param name="sourceProject">The source project.</param>
            <param name="projectName">Name of the project.</param>
            <param name="testFrameworkName">Test Framework name</param>
            <returns></returns>
            <remarks>
            Visual Studio will create a test project for that project.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateWorkItem(System.String,Microsoft.ExtendedReflection.Feedback.WorkItem)">
            <summary>
            Creates a new work item update.
            </summary>
            <param name="name">The name.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddType(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName[],Microsoft.ExtendedReflection.Metadata.Visibility,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,System.String,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.Boolean,System.Boolean,System.String,Microsoft.ExtendedReflection.Metadata.ICustomAttribute[])">
            <summary>
            Creates an empty type
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="_references">The _references.</param>
            <param name="visibility">The visibility.</param>
            <param name="newTypeDefinition">The new type definition.</param>
            <param name="_documentation">The _documentation.</param>
            <param name="baseType">the base type (may be null)</param>
            <param name="isAbstract">if set to <c>true</c> [is abstract].</param>
            <param name="isSealed">if set to <c>true</c> [is sealed].</param>
            <param name="fileNameHint">The file name hint.</param>
            <param name="attributes">The attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddTypeSignature(System.String,Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder,System.String)">
            <summary>
            Creates an 'Add Type' code update
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="newTypeDefinition">The new type definition.</param>
            <param name="fileNameHint">The file name hint.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddMethod(System.String,Microsoft.ExtendedReflection.Metadata.Visibility,Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName,System.String)">
            <summary>
            Creates an 'Add Method' code update; method is added to its declaring type.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="visibility">The visibility.</param>
            <param name="newMethod">The new method.</param>
            <param name="_documentation">The _documentation.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddMethod(System.String,Microsoft.ExtendedReflection.Metadata.Visibility,Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName,Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,System.String,Microsoft.ExtendedReflection.Metadata.ICustomAttribute[])">
            <summary>
            Creates an 'Add Method' code update; method is added to its declaring type.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="visibility">The visibility.</param>
            <param name="method">The method.</param>
            <param name="bodyBuilder">The body builder.</param>
            <param name="_documentation">The _documentation.</param>
            <param name="attributes">The attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddMethod(System.String,Microsoft.ExtendedReflection.Metadata.Visibility,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Creates an 'Add Method' code update; method is added to its declaring type.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="visibility">The visibility.</param>
            <param name="newMethod">The new method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddAttribute(System.String,Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Metadata.AttributeArgument[])">
            <summary>
            Creates an 'Add Attribute' code update
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <param name="attributeConstructor">The attribute constructor.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.UpdateAttribute(System.String,Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.ICustomAttribute)">
            <summary>
            Updates the attribute.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <param name="attribute">The attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddAttribute(System.String,Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.ICustomAttribute)">
            <summary>
            Adds the attribute to the target
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <param name="attribute">The attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddAttribute(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Metadata.AttributeArgument[])">
            <summary>
            Creates an 'Add Attribute' code update
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <param name="fileNameHint">The file name hint.</param>
            <param name="attributeConstructor">The attribute constructor.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddAttribute(System.String,Microsoft.ExtendedReflection.Metadata.Names.Name,System.String,System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Metadata.AttributeArgument[])">
            <summary>
            Creates an 'Add Attribute' code update
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <param name="fileNameHint">The file name hint.</param>
            <param name="beginning">if set to <c>true</c> [beginning].</param>
            <param name="attributeConstructor">The attribute constructor.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.UpdateAttribute(System.String,Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Metadata.AttributeArgument[])">
            <summary>
            Creates a 'update attribute' code update
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <param name="attributeConstructor">The attribute constructor.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertCheck(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName,System.String,System.String[],Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName[],System.String)">
            <summary>
            Creates a 'inserts the precondition' code update
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
            <param name="imports">The imports (may be null).</param>
            <param name="references">The references (may be null)</param>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertMemberSource(System.String,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,System.String,System.String[],Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName[],System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.MemberName,System.String)">
            <summary>
            Inserts the source in the target type definition
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
            <param name="imports">The imports (may be null)</param>
            <param name="references">the required references (may be null)</param>
            <param name="smartFormat">if set to <c>true</c> if the inserted member should be smart formatted.</param>
            <param name="insertedMember">The inserted member.</param>
            <param name="nestedFileNameSuffix">The nested file name suffix.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeTypeSignature(System.String,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeTypeSignatureCodeUpdate.SignatureUpdate)">
            <summary>
            Creates a 'changes the type signature'.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeTypePublic(System.String,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName)">
            <summary>
            Makes the type public.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeTypePublic(System.String,Microsoft.ExtendedReflection.Metadata.Names.TypeName)">
            <summary>
            Makes the type public.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeMethodSignature(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName,Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeMethodSignatureCodeUpdate.SignatureUpdate)">
            <summary>
            Creates a 'changes the method signature'.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeMethodPublic(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName)">
            <summary>
            Makes the method public.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeMethodPublic(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Makes the method public.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeMethodPrivate(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName)">
            <summary>
            Makes the method private.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeMethodPrivate(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Makes the method private.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeMethodStatic(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName)">
            <summary>
            Makes the method static.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeMethodStatic(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Makes the method static.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeMethodInstance(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Makes the method instance.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeMethodInstance(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName)">
            <summary>
            Makes the method instance.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeFieldPublic(System.String,Microsoft.ExtendedReflection.Metadata.Names.FieldName)">
            <summary>
            Makes the field public.
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.Combine(System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate[])">
            <summary>
            Combines the specified code updates.
            </summary>
            <param name="name">The name.</param>
            <param name="codeUpdates">The code updates.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.Combine(System.String,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Feedback.CodeUpdate})">
            <summary>
            Combines the specified code updates.
            </summary>
            <param name="name">The name.</param>
            <param name="codeUpdates">The code updates.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.Select(System.String,Microsoft.ExtendedReflection.Feedback.CodeUpdate.SelectCodeUpdate.SelectKind,Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Not really a code update, but handy: select a code region
            </summary>
            <param name="name">name, or <code>null</code> for the default name</param>
            <param name="kind"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeInternalsVisibleTo(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference,Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference)">
            <summary>
            Makes an internal visible code update
            </summary>
            <param name="target"></param>
            <param name="visibleTo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnableCodeContracts(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName)">
            <summary>
            Gets a code update that enables runtime contract checking for an assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnableCodeContracts(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName)">
            <summary>
            Gets a code update that enables runtime contract checking for an assembly
            </summary>
            <param name="name"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.op_Equality(Microsoft.ExtendedReflection.Feedback.CodeUpdate,Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.op_Inequality(Microsoft.ExtendedReflection.Feedback.CodeUpdate,Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.Dump(Microsoft.ExtendedReflection.Logging.DumpTreeWriter,Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Dumps the content for the update, for debug purposes
            </summary>
            <param name="tree">The tree.</param>
            <param name="languageFactory">The language factory.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.Optional">
            <summary>
            Gets a value indicating if a failure on applying the update can be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.Target">
            <summary>
            Gets the target of the update, if any.
            </summary>
            <remarks>
            The target can be any of the 'metadata' instance: 
            <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.TypeName"/>, <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.MethodName"/>, etc...
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.Name">
            <summary>
            Gets name description of the update
            (to be displayed in menu item for example)
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ImageKey">
            <summary>
            Gets the image key to be fetched from
            an imagelist
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MemberCodeUpdate">
            <summary>
            A code update that generates a metadata member
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CompilableCodeUpdate">
            <summary>
            Abstract base class for update containing imports and references.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CompilableCodeUpdate.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.Names.Name,System.String[],Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CompilableCodeUpdate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
            <param name="imports">The imports.</param>
            <param name="_references">The references.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CompilableCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CompilableCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CompilableCodeUpdate.InternalWriteXmlImportsAndReferences(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes source and imports. Write attributes and content
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CompilableCodeUpdate.InternalFromXmlImportsAndReferences(System.Xml.XPath.XPathNavigator,System.String[]@,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName[]@)">
            <summary>
            Reads source and imports
            </summary>
            <param name="nav">The nav.</param>
            <param name="imports">The imports.</param>
            <param name="references">the references</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CompilableCodeUpdate.Imports">
            <summary>
            Tries to get imports if any
            </summary>
            <value>The imports.</value>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CompilableCodeUpdate.References">
            <summary>
            Tries to get the references if any
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MemberCodeUpdate.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.Names.Name,System.String[],Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName[],Microsoft.ExtendedReflection.Metadata.Visibility,Microsoft.ExtendedReflection.Metadata.ICustomAttribute[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MemberCodeUpdate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
            <param name="imports">The imports.</param>
            <param name="references">The references.</param>
            <param name="visibility">The visibility.</param>
            <param name="attributes">The attributes.</param>
            <param name="_documentation">The _documentation.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MemberCodeUpdate.TryGetDocumentation(System.String@)">
            <summary>
            Tries to the Xml documentation content
            </summary>
            <param name="documentation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MemberCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MemberCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MemberCodeUpdate.Visibility">
            <summary>
            Gets the visibility.
            </summary>
            <value>The visibility.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MemberCodeUpdate.CustomAttributes">
            <summary>
            Gets the custom attributes.
            </summary>
            <value>The custom attributes.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveMemberCodeUpdate">
            <summary>
            Code update that removes a member
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveMemberCodeUpdate.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.Names.MemberDefinitionName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveMemberCodeUpdate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveMemberCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveMemberCodeUpdate.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveMemberCodeUpdate.Target">
            <summary>
            Gets the target of the update.
            </summary>
            <value></value>
            <remarks>
            The target can be any of the 'metadata' instance:
            <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.TypeName"/>, <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.MethodName"/>, etc...
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddMethodCodeUpdate">
            <summary>
            Code update that adds a method
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddMethodCodeUpdate.GetUncachedImpliedCodeUpdates">
            <summary>
            Returns EnsureTarget(this.MethodDefinition)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddMethodCodeUpdate.TryGetMethodBody(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilderName@)">
            <summary>
            Gets the method body.
            </summary>
            <value>The method body.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddMethodCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddMethodCodeUpdate.GetPreviewDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets name description of the update
            (to be displayed in menu item for example)
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddMethodCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddMethodCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddMethodCodeUpdate.MethodDefinition">
            <summary>
            Gets the method definition.
            </summary>
            <value>The method definition.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SourceCodeUpdate">
            <summary>
            Abstract base class for update containing source.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SourceCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SourceCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SourceCodeUpdate.InternalWriteXmlSource(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes source and imports
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SourceCodeUpdate.InternalFromXmlSource(System.Xml.XPath.XPathNavigator,System.String@,System.String[]@,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName[]@,System.Boolean@)">
            <summary>
            Reads source and imports
            </summary>
            <param name="nav">The nav.</param>
            <param name="source">The source.</param>
            <param name="imports">The imports.</param>
            <param name="references">the references</param>
            <param name="smartFormat">if set to <c>true</c> [smart format].</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SourceCodeUpdate.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SourceCodeUpdate.SmartFormat">
            <summary>
            Gets a value indicating whether the input should be formatted
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertMemberSourceCodeUpdate">
            <summary>
            Inserts code in a method
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertMemberSourceCodeUpdate.GetUncachedImpliedCodeUpdates">
            <summary>
            Gets an ensure target code update for the insterted member
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertMemberSourceCodeUpdate.TryGetNestedFileNameSuffix(System.String@)">
            <summary>
            Tries to get the name of a nested file in which the source should be added.
            </summary>
            <param name="suffix">The suffix.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertMemberSourceCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets name description of the update
            (to be displayed in menu item for example)
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertMemberSourceCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertMemberSourceCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertMemberSourceCodeUpdate.InsertedMember">
            <summary>
            Gets the inserted member name
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertMemberSourceCodeUpdate.Target">
            <summary>
            Gets the target of the update.
            </summary>
            <value></value>
            <remarks>
            The target can be any of the 'metadata' instance:
            <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName"/>
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddTypeCodeUpdate">
            <summary>
            Abstract base class for code update involving attributes
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddTypeCodeUpdate.TryGetBaseType(Microsoft.ExtendedReflection.Metadata.Names.TypeName@)">
            <summary>
            Tries to get the base type
            </summary>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddTypeCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets name description of the update
            (to be displayed in menu item for example)
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddTypeCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Equals the specified update.
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddTypeCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddTypeCodeUpdate.TypeDefinition">
            <summary>
            Gets the type definition.
            </summary>
            <value>The type definition.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddTypeCodeUpdate.IsAbstract">
            <summary>
            Gets a value indicating if the type should be abstract
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddTypeCodeUpdate.IsSealed">
            <summary>
            Gets a value indicating if the type should be sealed
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddTypeCodeUpdate.FileNameHint">
            <summary>
            Gets the file name hint.
            </summary>
            <value>The file name hint.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddOrUpdateAttributeCodeUpdate">
            <summary>
            Abstract base class for code update involving attributes
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddOrUpdateAttributeCodeUpdate.TryGetFileNameHint(System.String@)">
            <summary>
            Tries to get file name where the assembly level attributes should
            be written. By default, 'AssemblyInfo'.
            </summary>
            <param name="fileNameHint">The file name hint.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddOrUpdateAttributeCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets name description of the update
            (to be displayed in menu item for example)
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddOrUpdateAttributeCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddOrUpdateAttributeCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddOrUpdateAttributeCodeUpdate.AttributeConstructor">
            <summary>
            Gets the constructor of the attribute.
            </summary>
            <value>The attribute constructor.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddOrUpdateAttributeCodeUpdate.AttributeType">
            <summary>
            Gets the type of the attribute.
            </summary>
            <value>The type of the attribute.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddOrUpdateAttributeCodeUpdate.Arguments">
            <summary>
            Gets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddOrUpdateAttributeCodeUpdate.Update">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddOrUpdateAttributeCodeUpdate"/> is update.
            </summary>
            <value><c>true</c> if update; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddOrUpdateAttributeCodeUpdate.Beginning">
            <summary>
            Gets or sets a value indicating if the attribute should be place at the beginning of 
            the attribute list
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveAttributeCodeUpdate">
            <summary>
            A code update that removes attributes
            </summary>
            <remarks>
            Supported for types and methods.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveAttributeCodeUpdate.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Names.TypeName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveAttributeCodeUpdate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
            <param name="attributeType">Type of the attribute.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveAttributeCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveAttributeCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveAttributeCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveAttributeCodeUpdate.AttributeType">
            <summary>
            Gets the type of the attribute.
            </summary>
            <value>The type of the attribute.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveFileCodeUpdate">
            <summary>
            A code update that removes a set of files.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveFileCodeUpdate.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveFileCodeUpdate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="projectName">Name of the project.</param>
            <param name="fileNames">The file names.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveFileCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveFileCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveFileCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveFileCodeUpdate.FileNames">
            <summary>
            Gets the name of the file (relative to the project root)
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddFileCodeUpdate">
            <summary>
            Adds a file to a project
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddFileCodeUpdate.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.RemoveFileCodeUpdate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="projectName">Name of the project.</param>
            <param name="fileName">The file name.</param>
            <param name="content"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddFileCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddFileCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddFileCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddFileCodeUpdate.FileName">
            <summary>
            Gets the name of the file (relative to the project root)
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddFileCodeUpdate.Content">
            <summary>
            Gets the content
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertCheckCodeUpdate">
            <summary>
            Inserts code in a method
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertCheckCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertCheckCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets name description of the update
            (to be displayed in menu item for example)
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertCheckCodeUpdate.Tag">
            <summary>
            Gets the tag
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.InsertCheckCodeUpdate.Target">
            <summary>
            Gets the target of the update.
            </summary>
            <value></value>
            <remarks>
            The target can be any of the 'metadata' instance:
            <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.TypeName"/>, <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.MethodName"/>, etc...
            and a string if the target is an assembly.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeTypeSignatureCodeUpdate">
            <summary>
            Type update
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeTypeSignatureCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeTypeSignatureCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeTypeSignatureCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets name description of the update
            (to be displayed in menu item for example)
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeTypeSignatureCodeUpdate.Update">
            <summary>
            Gets the update.
            </summary>
            <value>The update.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeTypeSignatureCodeUpdate.TypeTarget">
            <summary>
            Gets the type target.
            </summary>
            <value>The type target.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeTypeSignatureCodeUpdate.SignatureUpdate">
            <summary>
            Possible updates
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeTypeSignatureCodeUpdate.SignatureUpdate.Public">
            <summary>
            Turn type public
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeTypeSignatureCodeUpdate.SignatureUpdate.Partial">
            <summary>
            Turn type partial
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeTypeSignatureCodeUpdate.SignatureUpdate.Private">
            <summary>
            Turns type private
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeMethodSignatureCodeUpdate">
            <summary>
            Type update
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeMethodSignatureCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeMethodSignatureCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeMethodSignatureCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets name description of the update
            (to be displayed in menu item for example)
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeMethodSignatureCodeUpdate.Update">
            <summary>
            Gets the update.
            </summary>
            <value>The update.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeMethodSignatureCodeUpdate.MethodTarget">
            <summary>
            Gets the method target.
            </summary>
            <value>The method target.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeMethodSignatureCodeUpdate.SignatureUpdate">
            <summary>
            Possible updates
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeMethodSignatureCodeUpdate.SignatureUpdate.Public">
            <summary>
            Turn type public
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeMethodSignatureCodeUpdate.SignatureUpdate.Static">
            <summary>
            Turns method static
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeMethodSignatureCodeUpdate.SignatureUpdate.Instance">
            <summary>
            Turns method instance
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeMethodSignatureCodeUpdate.SignatureUpdate.Private">
            <summary>
            Turns method private
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateOrUpdateProjectCodeUpdate">
            <summary>
            A code update that adds a new project from a template
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateOrUpdateProjectCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets a short description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateOrUpdateProjectCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateOrUpdateProjectCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateOrUpdateProjectCodeUpdate.ProjectName">
            <summary>
            Gets the new project name
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateOrUpdateProjectCodeUpdate.TestFrameworkName">
            <summary>
            Gets the test framework template
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateOrUpdateProjectCodeUpdate.Target">
            <summary>
            Gets the source project.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SignProjectCodeUpdate">
            <summary>
            An update that signs a project
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SignProjectCodeUpdate.TryGetKeyFileName(System.String@)">
            <summary>
            Tries to get the key file name, relative to the 
            key project path
            </summary>
            <param name="keyFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SignProjectCodeUpdate.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SignProjectCodeUpdate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
            <param name="keyFileNameHint">The key file name hint.</param>
            <param name="keyProject">The key project.</param>
            <param name="keyFileName">Name of the key file (may be null)</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SignProjectCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SignProjectCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SignProjectCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SignProjectCodeUpdate.KeyProject">
            <summary>
            Gets the key project.
            </summary>
            <value>The key project.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SignProjectCodeUpdate.KeyFileNameHint">
            <summary>
            Gets the key file name hint.
            </summary>
            <value>The key file name hint.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SignProjectCodeUpdate.Target">
            <summary>
            Gets the source project.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeProjectPlatformCodeUpdate">
            <summary>
            A code update that changes the bitness of project configurations
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeProjectPlatformCodeUpdate.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,Microsoft.ExtendedReflection.Monitoring.Bitness)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeProjectPlatformCodeUpdate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="project">The project.</param>
            <param name="platform">The platform.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeProjectPlatformCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeProjectPlatformCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeProjectPlatformCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.ChangeProjectPlatformCodeUpdate.Platform">
            <summary>
            Gets the bitness platform
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateWorkItemCodeUpdate">
            <summary>
            Creates a new workitem
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateWorkItemCodeUpdate.#ctor(System.String,Microsoft.ExtendedReflection.Feedback.WorkItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateWorkItemCodeUpdate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="workItem">The work item.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateWorkItemCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateWorkItemCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateWorkItemCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CreateWorkItemCodeUpdate.Item">
            <summary>
            Gets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeInternalsVisibleToCodeUpdate">
            <summary>
            Code update the add an internals visible to attribute
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeInternalsVisibleToCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            </summary>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeInternalsVisibleToCodeUpdate.GetHashCodeUncached">
            <summary>
            Gets the hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeInternalsVisibleToCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the short description
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.MakeInternalsVisibleToCodeUpdate.VisibleToAssembly">
            <summary>
            Gets the visible to assembly name
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnableCodeContractsCodeUpdate">
            <summary>
            A code update to enable Code Contracts Runtime instrumentation
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnableCodeContractsCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Checks equality
            </summary>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnableCodeContractsCodeUpdate.GetHashCodeUncached">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnableCodeContractsCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddReferenceCodeUpdate">
            <summary>
            A code update that adds a project reference
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddReferenceCodeUpdate.TryGetAlias(System.String@)">
            <summary>
            Tries to get the lias
            </summary>
            <param name="alias"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddReferenceCodeUpdate.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddReferenceCodeUpdate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
            <param name="referencedAssembly">The referenced assembly.</param>
            <param name="specificVersion">if set to <c>true</c> [specific version].</param>
            <param name="copyLocal">if set to <c>true</c> [copy local].</param>
            <param name="_alias">the alias if any</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddReferenceCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddReferenceCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddReferenceCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddReferenceCodeUpdate.ReferencedAssembly">
            <summary>
            Gets  the referenced assembly.
            </summary>
            <value>The referenced assembly.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddReferenceCodeUpdate.SpecificVersion">
            <summary>
            Gets a value indicating whether the reference is version specific
            </summary>
            <value><c>true</c> if [version specific]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddReferenceCodeUpdate.CopyLocal">
            <summary>
            Gets or sets the value of the 'Copy Local' property
            </summary>
            <value><c>true</c> if [copy local]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddReferenceCodeUpdate.TargetAssembly">
            <summary>
            Gets the target assembly.
            </summary>
            <value>The target assembly.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnsureTargetCodeUpdate">
            <summary>
            A code update that ensures that background updates have been executed for a particular target
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnsureTargetCodeUpdate.#ctor(Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnsureTargetCodeUpdate"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnsureTargetCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnsureTargetCodeUpdate.InternalWriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Internals the write XML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnsureTargetCodeUpdate.InternalFromXml(System.String,Microsoft.ExtendedReflection.Metadata.Names.Name,System.Xml.XPath.XPathNavigator)">
            <summary>
            Internals from XML.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
            <param name="nav">The nav.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnsureTargetCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.EnsureTargetCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToMailCodeUpdate">
            <summary>
            A code update to open a new email using the default mail client
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToMailCodeUpdate.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToMailCodeUpdate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="subject">The subject.</param>
            <param name="to">To.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToMailCodeUpdate.TryGetTo(System.String@)">
            <summary>
            Tries to get the 'To' recipients
            </summary>
            <param name="to">To.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToMailCodeUpdate.TryGetContent(System.String@)">
            <summary>
            Tries to get the content.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToMailCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToMailCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToMailCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToMailCodeUpdate.Subject">
            <summary>
            Gets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToTextFileCodeUpdate">
            <summary>
            A code update to open a new in memory text file
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToTextFileCodeUpdate.TryGetContent(System.String@)">
            <summary>
            Tries to get the content.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToTextFileCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToTextFileCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToTextFileCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToTextFileCodeUpdate.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToClipboardCodeUpdate">
            <summary>
            A code update that puts text in the clipboard
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToClipboardCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToClipboardCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToClipboardCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SendToClipboardCodeUpdate.Content">
            <summary>
            Gets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SelectCodeUpdate">
            <summary>
            Select; not really a code update but handy
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SelectCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SelectCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SelectCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets name description of the update
            (to be displayed in menu item for example)
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SelectCodeUpdate.Kind">
            <summary>
            Gets the kind.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SelectCodeUpdate.SelectKind">
            <summary>
            What to select exactly
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SelectCodeUpdate.SelectKind.All">
            <summary>
            Entire definition
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SelectCodeUpdate.SelectKind.Body">
            <summary>
            Just the body
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SelectCodeUpdate.SelectKind.FirstLine">
            <summary>
            First line of the body
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SetBreakpointCodeUpdate">
            <summary>
            Sets a break at the first line of a particular method
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SetBreakpointCodeUpdate.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SetBreakpointCodeUpdate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SetBreakpointCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SetBreakpointCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SetBreakpointCodeUpdate.InternalWriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Internals the write XML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SetBreakpointCodeUpdate.FromXml(System.String,Microsoft.ExtendedReflection.Metadata.Names.Name,System.Xml.XPath.XPathNavigator)">
            <summary>
            Froms the XML.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target.</param>
            <param name="nav">The nav.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.SetBreakpointCodeUpdate.Target">
            <summary>
            Gets the target of the update
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.DebugTestsInContextCodeUpdate">
            <summary>
            A code update that launches a 'run tests in context' command
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.DebugTestsInContextCodeUpdate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.DebugTestsInContextCodeUpdate"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.DebugTestsInContextCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.DebugTestsInContextCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.DebugTestsInContextCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the description of the update
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CollectionCodeUpdate">
            <summary>
            Collection of code updates
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CollectionCodeUpdate.Equals(Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Gets a value indicating wheter update
            is equivalent to the current instance
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CollectionCodeUpdate.GetHashCodeUncached">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CollectionCodeUpdate.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets name description of the update
            (to be displayed in menu item for example)
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Feedback.CodeUpdate.CollectionCodeUpdate.CodeUpdates">
            <summary>
            Gets the code updates.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.TypeCollection">
            <summary>
            Collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.IType"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.TypeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.TypeCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.TypeCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.TypeCollection"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.TypeCollection.NoTypes">
            <summary>
            Empty array of IType
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Interfaces.TypeCollection.NoTypeIndexable">
            <summary>
            Empty enumerable of IType
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.TermResolver">
            <summary>
            Delegate type that resolves one term to a more specific one.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Reduction.ContextfulReducer">
            <summary>
            Implication checker.
            </summary>
            <remarks>
            This motivation behind this is class is to do at least some simple syntactical simplications and checkers;
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.ContextfulReducer.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Reduction.ContextfulReducer"/> class.
            </summary>
            <param name="termManager">The term manager.</param>
            <param name="aggressive">whether to remove e.g. vtable lookups</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.ContextfulReducer.Reduce(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Reduces the specified term.
            </summary>
            <param name="term">The term.</param>
            <returns>reduced value</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.ContextfulReducer.AddFact(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Adds a new term to the conjunction;
            does not check whether the term was implied
            </summary>
            <param name="atom">atom</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.ContextfulReducer.GetFacts">
            <summary>
            Gets a compact representation of all facts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.ContextfulReducer.GetFact">
            <summary>
            Gets the fact.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.ContextfulReducer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Visitors.TermSimplifier">
            <summary>
            Rewriter which removes tautologies 
            (which <see cref="T:Microsoft.ExtendedReflection.Interpretation.Reduction.Reducer"/> does not do)
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermSimplifier.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,System.Boolean)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="termManager">The term manager.</param>
            <param name="aggressive">whether to remove e.g. vtable lookups</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermSimplifier.VisitBinary(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.BinaryOperator,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for a binary operation.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operator"></param>
            <param name="left">left operand value</param>
            <param name="right">right operand value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermSimplifier.VisitAc1(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermAc1Set)">
            <summary>
            Visitor for an associative, commutative operation with a unit.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operandSet"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Visitors.TermSimplifier.VisitIfThenElse(Microsoft.ExtendedReflection.Interpretation.Visitors.TVoid,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Visitor for an if-then-else value, that evaluates to the <paramref name="then"/> value if the condition holds, and to <paramref name="else"/> otherwise.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="condition">condition of <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/></param>
            <param name="then">value with same layout as <paramref name="else"/></param>
            <param name="else"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.TermEmitter">
            <summary>
            Outputs terms using a <see cref="T:Microsoft.ExtendedReflection.Emit.IMethodBodyWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermEmitter.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Interpretation.INameCreator)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="termManager"></param>
            <param name="nameCreator"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermEmitter.Clear">
            <summary>
            Sets all counters to zero.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermEmitter.TryEvaluate(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Interpretation.Term},System.Int32,Microsoft.ExtendedReflection.Emit.IMethodBodyWriter)">
            <summary>
            Emits a term to a code writer.
            </summary>
            <param name="values"></param>
            <param name="maxNodes">bound on number of (term-)nodes the emitter may emit; reasonable sizes are 1000</param>
            <param name="codeWriter"></param>
            <returns>number of values evaluated</returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermEmitter.SpilledCount">
            <summary>
            Number of spilled subterms, i.e. number of local variables created as part of evaluation of expressions.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Interpretation.TermEmitter.NewCount">
            <summary>
            Number of newly allocated objects.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.TermEmitter.Evaluator.VisitAc1(Microsoft.ExtendedReflection.Interpretation.TermEmitter.TParameter,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.ITermAc1Set)">
            <summary>
            Visitor for an associative, commutative operation with a unit.
            </summary>
            <param name="parameter">parameter that is threaded through</param>
            <param name="term">the value that is visited</param>
            <param name="operandSet">The operand set.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Interpreter.UncatchableAttribute">
            <summary>
            Attribute that marks an uncatchable exceptions.
            Exceptions tagged with this attribute cannot be caught.
            The interpreter will rethrow them at every opportunity.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Interpreter.UncatchableAttribute.OnException(System.Exception,System.String)">
            <summary>
            If the given exception is an instance of this type, throw an exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="location">The location.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Reduction.I4Range">
            <summary>
            Range of <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> values
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Reduction.I4Range.Min">
            <summary>
            Minimum
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Reduction.I4Range.Max">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.I4Range.IsEmpty(System.Boolean)">
            <summary>
            Whether this range contains no element.
            </summary>
            <param name="signed"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.I4Range.CanOffset(System.Int32)">
            <summary>
            Whether an offset can be added to this range without causing an overflow.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.I4Range.IsFull(System.Boolean)">
            <summary>
            Whether this range contains all elements.
            </summary>
            <param name="signed"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.I4Range.Intersect(System.Boolean,Microsoft.ExtendedReflection.Interpretation.Reduction.I4Range,Microsoft.ExtendedReflection.Interpretation.Reduction.I4Range)">
            <summary>
            Intersects the specified ranges.
            </summary>
            <param name="signed"></param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.I4Range.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Reduction.I4Range"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Reduction.I8Range">
            <summary>
            Range of <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/> values
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Reduction.I8Range.Min">
            <summary>
            Minimum
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Interpretation.Reduction.I8Range.Max">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.I8Range.IsEmpty(System.Boolean)">
            <summary>
            Whether this range contains no element.
            </summary>
            <param name="signed"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.I8Range.IsFull(System.Boolean)">
            <summary>
            Whether this range contains all elements.
            </summary>
            <param name="signed"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.I8Range.CanOffset(System.Int64)">
            <summary>
            Whether an offset can be added to this range without causing an overflow.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.I8Range.Intersect(System.Boolean,Microsoft.ExtendedReflection.Interpretation.Reduction.I8Range,Microsoft.ExtendedReflection.Interpretation.Reduction.I8Range)">
            <summary>
            Intersects the specified ranges.
            </summary>
            <param name="signed"></param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.I8Range.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Interpretation.Reduction.I8Range"/> class.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Interpretation.Reduction.Ranges">
            <summary>
            Provides information about ranges of terms
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Ranges.ClearAndTrim">
            <summary>
            Clears and trims the cache.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Ranges.GetI4Range(Microsoft.ExtendedReflection.Interpretation.Term,System.Boolean)">
            <summary>
            Gets the i4 range.
            </summary>
            <param name="value">The value.</param>
            <param name="signed">whether the value is interpreted as a signed value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Interpretation.Reduction.Ranges.GetI8Range(Microsoft.ExtendedReflection.Interpretation.Term,System.Boolean)">
            <summary>
            Gets the i8 range.
            </summary>
            <param name="value">The value.</param>
            <param name="signed">whether the value is interpreted as a signed value</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.BreakEventLogger">
            <summary>
            Logger that breaks to the debugger in case of errors
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.BreakEventLogger.Attach(Microsoft.ExtendedReflection.Logging.IEventLogSource)">
            <summary>
            Attaches to logging events
            </summary>
            <param name="eventSource"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryCounter">
            <summary>
            A counter for exploration boundary events
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryCounter.Hit(Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind)">
            <summary>
            Hits the specified kind.
            </summary>
            <param name="kind">The kind.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryCounter.Item(Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind)">
            <summary>
            Gets the counter value for the specified kind.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryCounter.Hits">
            <summary>
            Gets the list of non-zero hits.
            </summary>
            <value>The hits.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs">
            <summary>
            Event argument for exploration boundaries.
            </summary>
            <seealso cref="T:Microsoft.ExtendedReflection.Logging.IEventLog"/>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs.ImageKeyName">
            <summary>
            Gets the image key name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs.TryGetFrame(Microsoft.ExtendedReflection.Symbols.StackFrameName@)">
            <summary>
            Tries to get the frame.
            </summary>
            <param name="frame">The frame.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs.#ctor(Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind,System.String,System.String,Microsoft.ExtendedReflection.Symbols.StackFrameName,Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs"/> class.
            </summary>
            <param name="kind">The kind.</param>
            <param name="value">The value.</param>
            <param name="message">The message.</param>
            <param name="frame">The frame.</param>
            <param name="_update">the update (optional)</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs.TryGetCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get the code update if any
            </summary>
            <param name="codeUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs.Equals(Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs.Kind">
            <summary>
            Gets the kind of boundary
            </summary>
            <value>The kind.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs.WikiTopic">
            <summary>
            Gets the help topic.
            </summary>
            <value>The help topic.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs.TargetName">
            <summary>
            Gets or sets the name of the target.
            </summary>
            <value>The name of the target.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind">
            <summary>
            Different kind of boundaries to the solver can reach
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.Timeout">
            <summary>
            Overall exploration time out
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.MaxConstraintSolverTime">
            <summary>
            Time-out for solving any single constraint-system
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.MaxConstraintSolverMemory">
            <summary>
            Out of memory in constraint solver
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.MaxRuns">
            <summary>
            Maximal number of total runs
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.MaxRunsWithUniquePaths">
            <summary>
            Maximal number of runs resulting in distinct execution paths
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.MaxRunsWithoutNewTests">
            <summary>
            Maximal number of consecutive runs not resulting in a new test
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.MaxSequenceLength">
            <summary>
            Maximal number of method calls performed to build an object of a given type
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.MaxBranches">
            <summary>
            Maximal number of executed branches in the code
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.MaxExecutionTreeNodes">
            <summary>
            Maximal number of execution tree nodes
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.MaxCalls">
            <summary>
            Maximal number of invoked methods in the code
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.MaxConditions">
            <summary>
            Maximal number of conditions over the inputs
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.MaxExceptions">
            <summary>
            Maximal number of generated test case which fail with an exception
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.MaxStack">
            <summary>
            Maximal size of stack (measured in frames) 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.MaxWorkingSet">
            <summary>
            Too much memory
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.OutOfMemory">
            <summary>
            An OutOfMemoryException was thrown
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind.Cancelled">
            <summary>
            A cancellation was requested
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind._End">
            <summary>
            Marker for number of fields in the enumeration
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.SolvingLog">
            <summary>
            Abstract base class for <see cref="T:Microsoft.ExtendedReflection.Logging.ISolvingLog"/> implementations
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ISolvingLog">
            <summary>
            Logger interface for explorations
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.ExplorationImprecision(Microsoft.ExtendedReflection.Logging.ExplorationImprecision)">
            <summary>
            Logs an exploration imprecision
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.ExplorationImprecision(Microsoft.ExtendedReflection.Logging.ExplorationImprecisionEventArgs)">
            <summary>
            Logs an exploration imprecision
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.UninstrumentedMethod(Microsoft.ExtendedReflection.Logging.UninstrumentedMethod)">
            <summary>
            Logs a relevant uninstrumented method
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.UninstrumentedMethod(Microsoft.ExtendedReflection.Logging.UninstrumentedMethodEventArgs)">
            <summary>
            Logs a relevant uninstrumented method
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.StaticFieldStore(Microsoft.ExtendedReflection.Logging.StaticFieldStore)">
            <summary>
            Logs a static field store
            </summary>
            <param name="staticFieldStore"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.StaticFieldStore(Microsoft.ExtendedReflection.Logging.StaticFieldStoreEventArgs)">
            <summary>
            Logs a static field store
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.ObservedCallMismatch(Microsoft.ExtendedReflection.Logging.ObservedCallMismatch)">
            <summary>
            Logs an observed call mismatch
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.ObservedCallMismatch(Microsoft.ExtendedReflection.Logging.ObservedCallMismatchEventArgs)">
            <summary>
            Logs an observed call mismatch
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.TryGetBoundaryCounter(Microsoft.ExtendedReflection.Logging.ExplorationBoundaryCounter@)">
            <summary>
            Gets the boundary counter.
            </summary>
            <value>The boundary counter.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.ResetBoundaryCounter">
            <summary>
            Resets the boundary counter
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.ExplorationBoundary(Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs)">
            <summary>
            Logs that an exploration boundary has been hit.
            </summary>
            <param name="args">The <see cref="T:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.ExplorationBoundary(Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind,System.String,System.String,Microsoft.ExtendedReflection.Symbols.StackFrameName)">
            <summary>
            Logs that an exploration boundary has been hit,
            with its value.
            </summary>
            <param name="kind">The kind.</param>
            <param name="value">The value.</param>
            <param name="message">The message.</param>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.ExplorationBoundary(Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind,System.String,System.String,Microsoft.ExtendedReflection.Metadata.CodeLocation)">
            <summary>
            Logs that an exploration boundary has been hit,
            with its value.
            </summary>
            <param name="kind">The kind.</param>
            <param name="value">The value.</param>
            <param name="message">The message.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.TryGetExplorationBoundaryCodeUpdate(Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind,Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get a code update for a give exploration boundary
            </summary>
            <param name="kind"></param>
            <param name="_update"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.SolvingProgress(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Logs the progress of the current solving.
            </summary>
            <param name="runCount">The run count.</param>
            <param name="uniquePathCount">The unique path count.</param>
            <param name="satisfiedAssumptions">The satisfied assumptions.</param>
            <param name="retries">The retries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.Problem(Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Reasoning.ISolverOptions,Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,Microsoft.ExtendedReflection.Interpretation.Term[],Microsoft.ExtendedReflection.Metadata.CodeLocation,Microsoft.ExtendedReflection.Interpretation.Term,System.Double,Microsoft.ExtendedReflection.Reasoning.TryGetModelResult)">
            <summary>
            Logs a conjunction to be solved
            </summary>
            <param name="termManager">The term manager.</param>
            <param name="solverOptions">The solver options.</param>
            <param name="parentOfFlipped">The execution node which represents the flipped location.</param>
            <param name="feasiblePrefix">The feasible prefix.</param>
            <param name="flippedLocation">The flipped location.</param>
            <param name="suffix">The suffix.</param>
            <param name="duration">The duration.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.TrajectorySnapshot(System.DateTime,Microsoft.ExtendedReflection.Logging.TrajectoryEntry[])">
            <summary>
            Logs a set of data points.
            </summary>
            <param name="time">Time associated with values</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.FlushTrajectories">
            <summary>
            Flushes the trajectories.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.TimedTrajectoryEntries(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,Microsoft.ExtendedReflection.Metadata.Names.TypeName,Microsoft.ExtendedReflection.Metadata.Names.MethodName,System.DateTime,Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntries[])">
            <summary>
            Logs flushed, timed trajectory entries.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ISolvingLog.SourceCoverage(System.String)">
            <summary>
            Logs source coverage information.
            </summary>
            <param name="xmlCoverageFile">The XML coverage file.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ISolvingLog.ImprecisionsCount">
            <summary>
            How many imprecisions were encountered so far.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ISolvingLogSource">
            <summary>
            Exposes logging event to attach.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.ISolvingLogSource.ExplorationImprecisionHandler">
            <summary>
            Raised when an exploration imprecision has been found
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.ISolvingLogSource.ObservedCallMismatchHandler">
            <summary>
            Raised when an observed call mismatch has been found
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.ISolvingLogSource.StaticFieldStoreHandler">
            <summary>
            Raised when a value has been stored in a static field
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.ISolvingLogSource.UninstrumentedMethodHandler">
            <summary>
            Raised when an uninstrumented method has been found
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.ISolvingLogSource.ExplorationBoundaryHandler">
            <summary>
            Raised when an exploration boundary has been hit
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.ISolvingLogSource.SolvingProgressHandler">
            <summary>
            Raised on constraint solving progress notification
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.ISolvingLogSource.ProblemHandler">
            <summary>
            Raised on each problem solving attempt
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.ISolvingLogSource.TimedTrajectoryEntriesHandler">
            <summary>
            Raised on snapshot of trajectory data
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.ISolvingLogSource.SourceCoverageHandler">
            <summary>
            Raised on source coverage information
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.SolvingLog"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.ExplorationImprecision(Microsoft.ExtendedReflection.Logging.ExplorationImprecision)">
            <summary>
            Logs an exploration imprecision at <paramref name="location"/>
            </summary>
            <param name="imprecision">The imprecision.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.ExplorationImprecision(Microsoft.ExtendedReflection.Logging.ExplorationImprecisionEventArgs)">
            <summary>
            Logs an exploration imprecision
            </summary>
            <param name="args">The <see cref="T:Microsoft.ExtendedReflection.Logging.ExplorationImprecisionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.ObservedCallMismatch(Microsoft.ExtendedReflection.Logging.ObservedCallMismatch)">
            <summary>
            Logs an observed call mismatch
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.ObservedCallMismatch(Microsoft.ExtendedReflection.Logging.ObservedCallMismatchEventArgs)">
            <summary>
            Logs an observed call mismatch
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.StaticFieldStore(Microsoft.ExtendedReflection.Logging.StaticFieldStore)">
            <summary>
            Logs when a value has been stored in a static field
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.StaticFieldStore(Microsoft.ExtendedReflection.Logging.StaticFieldStoreEventArgs)">
            <summary>
            Logs when a value has been stored in a static field
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.UninstrumentedMethod(Microsoft.ExtendedReflection.Logging.UninstrumentedMethod)">
            <summary>
            Logs an uninstrumented method
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.UninstrumentedMethod(Microsoft.ExtendedReflection.Logging.UninstrumentedMethodEventArgs)">
            <summary>
            Logs an uninstrumented method
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.TryGetBoundaryCounter(Microsoft.ExtendedReflection.Logging.ExplorationBoundaryCounter@)">
            <summary>
            Tries to get the exploration boundary counter
            </summary>
            <param name="counter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.ResetBoundaryCounter">
            <summary>
            Resets the boundary counter
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.ExplorationBoundary(Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind,System.String,System.String,Microsoft.ExtendedReflection.Symbols.StackFrameName)">
            <summary>
            Logs that an exploration boundary has been hit,
            with its value.
            </summary>
            <param name="kind">The kind.</param>
            <param name="value">The value.</param>
            <param name="message">The message.</param>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.ExplorationBoundary(Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind,System.String,System.String,Microsoft.ExtendedReflection.Metadata.CodeLocation)">
            <summary>
            
            </summary>
            <param name="kind"></param>
            <param name="value"></param>
            <param name="message"></param>
            <param name="location"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.TryGetExplorationBoundaryCodeUpdate(Microsoft.ExtendedReflection.Logging.ExplorationBoundaryKind,Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get the exploration boundary code update
            </summary>
            <param name="kind"></param>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.ExplorationBoundary(Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs)">
            <summary>
            Logs that an exploration boundary has been hit.
            </summary>
            <param name="args">The <see cref="T:Microsoft.ExtendedReflection.Logging.ExplorationBoundaryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.SolvingProgress(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Logs the progress of the current solving.
            </summary>
            <param name="runCount">The run count.</param>
            <param name="uniquePathCount">The unique path count.</param>
            <param name="satisfiedAssumptions">The satisfied assumptions.</param>
            <param name="retries">The retries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.Problem(Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Reasoning.ISolverOptions,Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,Microsoft.ExtendedReflection.Interpretation.Term[],Microsoft.ExtendedReflection.Metadata.CodeLocation,Microsoft.ExtendedReflection.Interpretation.Term,System.Double,Microsoft.ExtendedReflection.Reasoning.TryGetModelResult)">
            <summary>
            Logs a conjunction to be solved
            </summary>
            <param name="termManager">The term manager.</param>
            <param name="solverOptions">The solver options.</param>
            <param name="parentOfFlipped">The execution node which represents the flipped location.</param>
            <param name="feasiblePrefix">The feasible prefix.</param>
            <param name="flippedLocation">The flipped location.</param>
            <param name="suffix">The suffix.</param>
            <param name="duration">The duration.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.TrajectorySnapshot(System.DateTime,Microsoft.ExtendedReflection.Logging.TrajectoryEntry[])">
            <summary>
            Logs a set of data points.
            </summary>
            <param name="now"></param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.TryGetScopeInfo(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName@,Microsoft.ExtendedReflection.Metadata.Names.TypeName@,Microsoft.ExtendedReflection.Metadata.Names.MethodName@,System.DateTime@)">
            <summary>
            Gets the current trajectory scope, if any.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.FlushTrajectories">
            <summary>
            Flushes the trajectories.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.TimedTrajectoryEntries(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,Microsoft.ExtendedReflection.Metadata.Names.TypeName,Microsoft.ExtendedReflection.Metadata.Names.MethodName,System.DateTime,Microsoft.ExtendedReflection.Logging.TimedTrajectoryEntries[])">
            <summary>
            Timeds the trajectory entries.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.SourceCoverage(System.String)">
            <summary>
            Publishes source coverage information.
            </summary>
            <param name="xmlCoverageFile"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingLog.Close">
            <summary>
            Closes the logger
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.SolvingLog.ExplorationImprecisionHandler">
            <summary>
            Raised when an exploration imprecision has been found
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.SolvingLog.ImprecisionsCount">
            <summary>
            How many imprecisions were encountered so far.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.SolvingLog.ObservedCallMismatchHandler">
            <summary>
            Raised when an observed call mismatch has been found
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.SolvingLog.StaticFieldStoreHandler">
            <summary>
            Raised when a value has been stored in a static field
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.SolvingLog.UninstrumentedMethodHandler">
            <summary>
            Raised when an uninstrumented method has been found
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.SolvingLog.ExplorationBoundaryHandler">
            <summary>
            Raised when an exploration boundary is hit
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.SolvingLog.SolvingProgressHandler">
            <summary>
            Raised on constraint solving progress notification
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.SolvingLog.ProblemHandler">
            <summary>
            
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.SolvingLog.TimedTrajectoryEntriesHandler">
            <summary>
            Raised when a set trajecotry data is logged
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Logging.SolvingLog.SourceCoverageHandler">
            <summary>
            Raised on source coverage information
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.ProblemEventArgs">
            <summary>
            Problem event args.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.ProblemEventArgs.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Reasoning.ISolverOptions,Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,Microsoft.ExtendedReflection.Interpretation.Term[],Microsoft.ExtendedReflection.Metadata.CodeLocation,Microsoft.ExtendedReflection.Interpretation.Term,System.Double,Microsoft.ExtendedReflection.Reasoning.TryGetModelResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.ProblemEventArgs"/> class.
            </summary>
            <param name="termManager">The term manager.</param>
            <param name="solverOptions">The solver options.</param>
            <param name="parentOfFlipped">The execution node which represents the flipped code location.</param>
            <param name="feasiblePrefix">The feasible prefix.</param>
            <param name="flippedLocation">The flipped location.</param>
            <param name="suffix">The suffix.</param>
            <param name="duration">The duration.</param>
            <param name="result">The result.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ProblemEventArgs.TermManager">
            <summary>
            Gets the term manager.
            </summary>
            <value>The term manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ProblemEventArgs.SolverOptions">
            <summary>
            Gets the solver options.
            </summary>
            <value>The solver options.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ProblemEventArgs.ParentOfFlipped">
            <summary>
            Gets execution node.
            </summary>
            <value>The execution node.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ProblemEventArgs.Duration">
            <summary>
            Gets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ProblemEventArgs.Result">
            <summary>
            Gets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ProblemEventArgs.FeasiblePrefix">
            <summary>
            Gets the feasible prefix.
            </summary>
            <value>The feasible prefix.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ProblemEventArgs.FlippedLocation">
            <summary>
            Gets the location of the branching instruction of which the <see cref="P:Microsoft.ExtendedReflection.Logging.ProblemEventArgs.Suffix"/> is a continuation.
            </summary>
            <value>The flipped location.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.ProblemEventArgs.Suffix">
            <summary>
            Gets the suffix.
            </summary>
            <value>The suffix.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.LogCategories">
            <summary>
            A set of standard Log Categories
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogCategories.HtmlValidation">
            <summary>
            Internal; for debugging only
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogCategories.ArithmeticSolver">
            <summary>
            Arithmetic solver
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogCategories.ConstraintSolver">
            <summary>
            Constraint solver
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogCategories.InputEnumeration">
            <summary>
            Input enumeration
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogCategories.Interpreter">
            <summary>
            Interpreter
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogCategories.Instrumentation">
            <summary>
            Instrumentation
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogCategories.ModelSearch">
            <summary>
            Model search
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogCategories.Metadata">
            <summary>
             Meta data
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogCategories.Profiler">
            <summary>
             profiler
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogCategories.Symbols">
            <summary>
            Symbols
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogCategories.XmlDocumentationFiles">
            <summary>
            XmlDocumentationFiles
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogCategories.Coverage">
            <summary>
            Coverage
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.LogCategories.Packages">
            <summary>
            Packages
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LogCategories.#ctor">
            <summary>
            Don't create instances of this class.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.LoggingResources">
            <summary>
            Helper class to handle Extended Reflection embedded resources
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LoggingResources.WriteCss(Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter)">
            <summary>
            Writes the style sheets.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LoggingResources.WriteScripts(Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter)">
            <summary>
            Writes the scripts.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.LoggingResources.Dump(System.String)">
            <summary>
            Dumps resources to specifed output path
            </summary>
            <param name="outputPath"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.TaggedRemoteEventArgs`1">
            <summary>
            Serializable event args with one argument
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.TaggedRemoteEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.TaggedRemoteEventArgs`1"/> class.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.TaggedRemoteEventArgs`1.Tag">
            <summary>
            Gets the tag.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.RemoteEventHandler`1">
            <summary>
            Remotable event handler delegate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.RemoteException">
            <summary>
            A remotable 'snapshot' of an exception
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.RemoteException.TryGetStackTrace(Microsoft.ExtendedReflection.Symbols.StackTraceName@)">
            <summary>
            Gets the stack trace if available
            </summary>
            <param name="trace">The trace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.RemoteException.TryGetInnerException(Microsoft.ExtendedReflection.Logging.RemoteException@)">
            <summary>
            Tries to get the inner exception.
            </summary>
            <value>The inner exception.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.RemoteException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.RemoteException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.RemoteException.#ctor(Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.Boolean,System.String,System.String,Microsoft.ExtendedReflection.Symbols.StackTraceName,Microsoft.ExtendedReflection.Logging.RemoteException)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.RemoteException"/> class.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <param name="isExceptionTypeExported">if set to <c>true</c> [is exception type exported].</param>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="stackTrace">The stack trace.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.RemoteException.FromException(Microsoft.ExtendedReflection.Symbols.ISymbolManager,System.Object,Microsoft.ExtendedReflection.Symbols.StackTraceName,System.Boolean)">
            <summary>
            Creates a remotable exception from a concrete exception
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="exception">The exception.</param>
            <param name="stackTrace">The stack trace; optional</param>
            <param name="filter">if set to <c>true</c> [filter].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.RemoteException.ToBuildMessage">
            <summary>
            Converts to a build message string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.RemoteException.WriteBuildMessage(System.IO.TextWriter)">
            <summary>
            Writes to a build message string representation.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.RemoteException.TryGetFirstFrameWithSourceInformation(Microsoft.ExtendedReflection.Symbols.StackFrameName@)">
            <summary>
            Gets the first frame with source information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.RemoteException.FromLoggedXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates an exception from previously logged xml.
            </summary>
            <param name="navigator">The navigator.</param>
            <exception cref="T:System.InvalidOperationException">when an error occurrs</exception>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.RemoteException.WriteXml(Microsoft.ExtendedReflection.Symbols.ISymbolManager,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes content to xml
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.RemoteException.Internalize">
            <summary>
            Internalizes the instance of this exception
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.RemoteException.ExceptionType">
            <summary>
            Gets the type of the exception.
            </summary>
            <value>The type of the exception.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.RemoteException.IsExceptionTypeExported">
            <summary>
            Gets a value indicating whether this instance is exception type exported.
            </summary>
            <value>
            	<c>true</c> if this instance is exception type exported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.RemoteException.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.RemoteException.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.SolvingProgressEventArgs">
            <summary>
            Constraint solving progress message
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.SolvingProgressEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.SolvingProgressEventArgs"/> class.
            </summary>
            <param name="runCount">The run count.</param>
            <param name="uniquePathCount">The unique path count.</param>
            <param name="satisfiedAssumptions">The satisfied assumptions.</param>
            <param name="retries">The retries.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.SolvingProgressEventArgs.RunCount">
            <summary>
            Gets the run count.
            </summary>
            <value>The run count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.SolvingProgressEventArgs.UniquePathCount">
            <summary>
            Gets the unique path count.
            </summary>
            <value>The unique path count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.SolvingProgressEventArgs.SatisfiedAssumptions">
            <summary>
            Gets the satisfied assumptions.
            </summary>
            <value>The satisfied assumptions.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.SolvingProgressEventArgs.Retries">
            <summary>
            Gets the retries.
            </summary>
            <value>The retries.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.WikiTopics">
            <summary>
            A set of standard Wiki Topics
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.WikiTopics.MissingWikiTopic">
            <summary>
            To make FxCop happy; also allows to quickly search for missing documentation
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.WikiTopics.#ctor">
            <summary>
            Don't create instances of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.WikiTopics.IsWikiTopic(System.String)">
            <summary>
            Determines whether topic is not null or missing.
            </summary>
            <param name="topic">The topic.</param>
            <returns>
            	<c>true</c> if [is wiki topic] [the specified topic]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Logging.XmlLoggerBase">
            <summary>
            Abstract base class for xml loggers
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.MetadataTokenFormat">
            <summary>
            Format string to convert metadata token to string
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.SetWriter(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Sets the writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.XmlLoggerBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.#ctor(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.XmlLoggerBase"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.Close">
            <summary>
            Closes the xml writer.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.GetEncoding">
            <summary>
            Gets the encoding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteAssemblyAttributes(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.Reflection.Assembly)">
            <summary>
            Writes the assembly attributes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteAssemblyAttributes(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Writes the assembly attributes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteTypeAttributes(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.Type)">
            <summary>
            Writes the type attributes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteTypeAttributes(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Writes the type attributes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteTypeAttributes(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Writes the type attributes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteMethodAttributes(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Writes the method attributes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteMethodAttributes(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Writes the method attributes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteMethodAttributes(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Writes the method attributes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteFieldAttributes(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,Microsoft.ExtendedReflection.Metadata.Names.FieldName)">
            <summary>
            Writes the field attributes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteMethodAttributes(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.Reflection.MethodInfo)">
            <summary>
            Writes the method attributes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteMethodParameters(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.Reflection.MethodInfo)">
            <summary>
            Writes the method parameters.
            </summary>
            <param name="writer">The writer.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteMethodParameters(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Writes the method parameters.
            </summary>
            <param name="writer">The writer.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteEnvironment(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the environment.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteLog(Microsoft.ExtendedReflection.Symbols.ISymbolManager,Microsoft.ExtendedReflection.Logging.LogEventArgs)">
            <summary>
            Writes the log.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="e">The <see cref="T:Microsoft.ExtendedReflection.Logging.LogEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteLog(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,Microsoft.ExtendedReflection.Symbols.ISymbolManager,Microsoft.ExtendedReflection.Logging.LogEventArgs)">
            <summary>
            Writes the log.
            </summary>
            <param name="writer">The writer.</param>
            <param name="symbols">The symbols.</param>
            <param name="e">The <see cref="T:Microsoft.ExtendedReflection.Logging.LogEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteLightLog(Microsoft.ExtendedReflection.Logging.LogEventArgs)">
            <summary>
            Writes the light log.
            </summary>
            <param name="e">The <see cref="T:Microsoft.ExtendedReflection.Logging.LogEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteLightLog(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,Microsoft.ExtendedReflection.Logging.LogEventArgs)">
            <summary>
            Writes the light log.
            </summary>
            <param name="writer">The writer.</param>
            <param name="e">The <see cref="T:Microsoft.ExtendedReflection.Logging.LogEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.WriteException(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,Microsoft.ExtendedReflection.Symbols.ISymbolManager,System.Object,Microsoft.ExtendedReflection.Symbols.StackTraceName,System.Boolean)">
            <summary>
            Writes the exception.
            </summary>
            <param name="writer">The writer.</param>
            <param name="symbols">The symbols.</param>
            <param name="exception">The exception</param>
            <param name="stackTrace">optional stacktrace</param>
            <param name="filter">if set to <c>true</c> [filter].</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.Writer">
            <summary>
            Gets the writer.
            </summary>
            <value>The writer.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Logging.XmlLoggerBase.Closed">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.ExtendedReflection.Logging.XmlLoggerBase"/> is closed.
            </summary>
            <value><c>true</c> if closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.AttributeArgument">
            <summary>
            A custom attribute argument
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.Equals(System.Object)">
            <summary>
            Checks whether this object is equal to another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.Equals(Microsoft.ExtendedReflection.Metadata.AttributeArgument)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.AddTo(Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder)">
            <summary>
            Adds self to the attribute builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.GetImports(Microsoft.ExtendedReflection.Collections.SafeSet{System.String})">
            <summary>
            Gets the imports (result is cached)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates an attribute argument for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.Constructor(Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Creates a attribute constructor argument.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.Named(Microsoft.ExtendedReflection.Metadata.Interfaces.IField,Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Creates a named attribute argument.
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.Named(Microsoft.ExtendedReflection.Metadata.Interfaces.IProperty,Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Creates a named attribute argument.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.op_Equality(Microsoft.ExtendedReflection.Metadata.AttributeArgument,Microsoft.ExtendedReflection.Metadata.AttributeArgument)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.op_Inequality(Microsoft.ExtendedReflection.Metadata.AttributeArgument,Microsoft.ExtendedReflection.Metadata.AttributeArgument)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AttributeArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AttributeArgument.Imports">
            <summary>
            Gets the imports necessary for this argument
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AttributeArgument.SerializableName">
            <summary>
            Returns  a serializable instance of this argument
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.AttributeArgument.ConstructorArgument">
            <summary>
            Constructor argument
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.ConstructorArgument.AddTo(Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder)">
            <summary>
            Adds self to the attribute builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.ConstructorArgument.GetImports(Microsoft.ExtendedReflection.Collections.SafeSet{System.String})">
            <summary>
            Gets the imports (result is cached)
            </summary>
            <param name="imports"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.ConstructorArgument.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.ConstructorArgument.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AttributeArgument.ConstructorArgument.SerializableName">
            <summary>
            Returns  a serializable instance of this argument
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.AttributeArgument.NamedArgument">
            <summary>
            Named argument
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.NamedArgument.#ctor(Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.AttributeArgument.NamedArgument"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.NamedArgument.Equals(Microsoft.ExtendedReflection.Metadata.AttributeArgument)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.NamedArgument.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.NamedArgument.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.NamedArgument.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.NamedArgument.Microsoft#ExtendedReflection#Collections#IInternalizable#Internalize">
            <summary>
            Gets an internalized instance of the object. The instance might be internalized
            as a whole or sub-parts of it.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AttributeArgument.NamedArgument.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.AttributeArgument.FieldValue">
            <summary>
            Field value
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.FieldValue.AddTo(Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder)">
            <summary>
            Adds self to the attribute builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.FieldValue.GetImports(Microsoft.ExtendedReflection.Collections.SafeSet{System.String})">
            <summary>
            Gets the imports (result is cached)
            </summary>
            <param name="imports"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.FieldValue.Equals(Microsoft.ExtendedReflection.Metadata.AttributeArgument)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.FieldValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.FieldValue.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AttributeArgument.FieldValue.Field">
            <summary>
            Gets the field.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AttributeArgument.FieldValue.SerializableName">
            <summary>
            Returns  a serializable instance of this argument
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AttributeArgument.FieldValue.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.AttributeArgument.PropertyValue">
            <summary>
            Property value
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.PropertyValue.AddTo(Microsoft.ExtendedReflection.Metadata.Builders.CustomAttributeBuilder)">
            <summary>
            Adds self to the attribute builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.PropertyValue.GetImports(Microsoft.ExtendedReflection.Collections.SafeSet{System.String})">
            <summary>
            Gets the imports (result is cached)
            </summary>
            <param name="imports"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.PropertyValue.Equals(Microsoft.ExtendedReflection.Metadata.AttributeArgument)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.PropertyValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeArgument.PropertyValue.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AttributeArgument.PropertyValue.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AttributeArgument.PropertyValue.SerializableName">
            <summary>
            Returns  a serializable instance of this argument
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.AttributeArgument.PropertyValue.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.AttributeArgumentCollection">
            <summary>
            A collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.AttributeArgument"/>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.AttributeArgumentNamedCollection">
            <summary>
            A collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.AttributeArgument"/>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.AttributeArgumentConstructorCollection">
            <summary>
            A collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.AttributeArgument"/>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.AttributeHelper">
            <summary>
            Class with auxiliary functions to deal with attribtues
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.PrettifyAttributeName(System.String)">
            <summary>
            Prettifies the name of the attribute.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.GetAttribute(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Gets an
            <see cref="T:System.Attribute"/> of type <paramref name="attributeBaseType"/>
            if it is defined on the <paramref name="target"/>, otherwise
            returns <c>null</c>.
            </summary>
            <param name="target"></param>
            <param name="attributeBaseType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.TryGetAttribute``1(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,``0@)">
            <summary>
            Tries to get an attribute of a particular type
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="target">The target.</param>
            <param name="attribute">The attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.GetAttribute(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="target">The target.</param>
            <param name="attributeBaseType">Type of the attribute base.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.IsDefined(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Gets an
            <see cref="T:System.Attribute"/> of type <paramref name="attributeBaseType"/>
            if it is defined on the <paramref name="target"/>, otherwise
            returns <c>null</c>.
            </summary>
            <param name="target"></param>
            <param name="attributeBaseType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.IsDefined(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Determines whether the specified target is defined.
            </summary>
            <param name="target">The target.</param>
            <param name="attributeBaseType">Type of the attribute base.</param>
            <returns>
            	<c>true</c> if the specified target is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.GetAttribute``1(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,System.Boolean)">
            <summary>
            Gets an
            <see cref="T:System.Attribute"/> of type <paramref name="attributeBaseType"/>
            if it is defined on the <paramref name="target"/>, otherwise
            returns <c>null</c>.
            </summary>
            <param name="target">The target.</param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.GetAttribute``1(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.IsDefined``1(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,System.Boolean)">
            <summary>
            Gets an
            <see cref="T:System.Attribute"/> of type <paramref name="attributeBaseType"/>
            if it is defined on the <paramref name="target"/>, otherwise
            returns <c>null</c>.
            </summary>
            <param name="target"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.IsDefined``1(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx)">
            <summary>
            Determines whether the specified target is defined.
            </summary>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if the specified target is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.GetAttributes(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Boolean)">
            <summary>
            Gets all
            <see cref="T:System.Attribute"/> of type <paramref name="attributeName"/>
            defined on the <paramref name="target"/>.
            </summary>
            <param name="target">The provider.</param>
            <param name="attributeBaseType">Type of the attribute.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.GetAttributes``1(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx)">
            <summary>
            Gets all
            <see cref="T:System.Attribute"/> of type <paramref name="attributeName"/>
            defined on the <paramref name="target"/>.
            </summary>
            <param name="target">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.GetAttributes``1(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,System.Boolean)">
            <summary>
            Gets all
            <see cref="T:System.Attribute"/> of type <paramref name="attributeName"/>
            defined on the <paramref name="target"/>.
            </summary>
            <param name="target">The provider.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.GetAttributesWithCascade(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Boolean)">
            <summary>
            Gets the attributes from the method, its declaring type and
            containing assembly
            </summary>
            <param name="method">The method.</param>
            <param name="attributeBaseType">Type of the attribute base.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.GetAttributesWithCascade(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Boolean)">
            <summary>
            Gets the attributes of the type, and its containing module, assembly
            </summary>
            <param name="type">The type.</param>
            <param name="attributeBaseType">Type of the attribute base.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.GetAttributes(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets the attributes.
            </summary>
            <param name="target">The target.</param>
            <param name="attributeBaseType">Name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.IsCompilerGenerated(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx)">
            <summary>
            Determines whether the target is marked with 
            <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute"/>
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.IsObsolete(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx)">
            <summary>
            Determines whether the specified target is marked with
            <see cref="T:System.ObsoleteAttribute"/>.
            </summary>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if the specified target is obsolete; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.IsDebuggerHidden(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines if a method should be hidden in a regular debugger. This method is not cached!
            </summary>
            <param name="_methodDefinition"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.AttributeHelper.Member">
            <summary>
            Helper classes working on the IMemberDefinition
            TODO: refactor this.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.Member.IsDefinedByShortName(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition,System.String)">
            <summary>
            Determines whether the specified attribute is defined, matching the type short name only
            (it ignores the namespace).
            </summary>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if the specified target is defined; otherwise, <c>false</c>.
            </returns>
            <param name="attributeShortName">attribute type short name</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.Member.IsDefined(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition,Microsoft.ExtendedReflection.Metadata.Names.TypeName)">
            <summary>
            Determines whether the specified target is defined.
            </summary>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if the specified target is defined; otherwise, <c>false</c>.
            </returns>
            <param name="attributeName">attribute type name</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.Member.TryGetAttribute(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition,Microsoft.ExtendedReflection.Metadata.Names.TypeName,Microsoft.ExtendedReflection.Metadata.ICustomAttribute@)">
            <summary>
            Tries to get the attribute from the assembly
            </summary>
            <param name="target"></param>
            <param name="attributeName"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.Member.IsDefined``1(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition)">
            <summary>
            Determines whether the specified target is defined.
            </summary>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if the specified target is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.Member.IsDefined(Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Determines whether the specified target is defined.
            </summary>
            <param name="target">The target.</param>
            <param name="attributeType">Type of the attribute</param>
            <returns>
            	<c>true</c> if the specified target is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.Member.TryGetAttribute(Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Metadata.ICustomAttribute@)">
            <summary>
            Tries to get the attribute from the member
            </summary>
            <param name="attributeType"></param>
            <param name="member"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.Member.IsDefined``1(Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition)">
            <summary>
            Determines whether the specified target is defined.
            </summary>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if the specified target is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.Member.IsCompilerGenerated(Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition)">
            <summary>
            Determines whether the target is marked with 
            <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute"/>
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.Member.IsGeneratedCode(Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition)">
            <summary>
            Determines whether the target is marked with 
            <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute"/>
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.Member.IsObsolete(Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition)">
            <summary>
            Determines whether the specified target is marked with
            <see cref="T:System.ObsoleteAttribute"/>.
            </summary>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if the specified target is obsolete; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.Member.IsExtension(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Determines if the method is an extension method
            </summary>
            <param name="methodDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.Member.IsEmbeddedInteropType(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Determines if a type is an embedded interop type
            </summary>
            <param name="typeDefinition"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.AttributeHelper.Member.TryGetEmbeddedInteropTypeGuid(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition,System.Guid@)">
            <summary>
            Tries to extract the embedded interop type from a type definition
            </summary>
            <param name="definition"></param>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.OverrideKey">
            <summary>
            A wrapper that creates a key for method definitions.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Interfaces.OverrideKey.Name">
            <summary>
            Gets the name of the method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Interfaces.OverrideKey.GenericMethodParametersCount">
            <summary>
            Gets the generic method argument count
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Interfaces.OverrideKey.Parameters">
            <summary>
            Gets the list of parameters
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Interfaces.OverrideKey.ParameterTypes">
            <summary>
            Gets the list of parameter types
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.OverrideKey.#ctor(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Initializes a new instance of the key
            </summary>
            <param name="method"></param>
            <param name="parameterTypes"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.OverrideKey.CreateFromGenericContext(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Initializes a new instance of the override key from a method definition and the generic type arguments in context
            </summary>
            <param name="method"></param>
            <param name="genericTypeArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.OverrideKey.Equals(Microsoft.ExtendedReflection.Metadata.Interfaces.OverrideKey)">
            <summary>
            Gets a value indicating if other is equal to the current instance
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.OverrideKey.GetHashCode">
            <summary>
            Gets the hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper">
            <summary>
            Various helper classes over metadata interfaces
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetTypeDefinitions(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Gets the type definitions.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetTypeDefinitions(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition)">
            <summary>
            Gets the type definitions.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetNestedTypes(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Gets the nested types.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetAccessors(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition})">
            <summary>
            Gets the list of accessor members (i.e. member that implement
            properties or events)
            </summary>
            <param name="memberDefinitions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetTypeDefinitionCount(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition)">
            <summary>
            Gets the type definition count.
            </summary>
            <param name="assemblyDefinition">The assembly definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.IsUnsafe(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Determines whether the specified method has an unsafe signature.
            </summary>
            <param name="method">The method.</param>
            <returns>
            	<c>true</c> if the specified method is unsafe; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.IsUnsafe(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition)">
            <summary>
            Determines whether the specified parameter definition is unsafe in the C# sense
            </summary>
            <param name="parameterDefinition">The parameter definition.</param>
            <returns>
            	<c>true</c> if the specified parameter definition is unsafe; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.IsUnsafe(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Determines whether the specified parameter definition is unsafe in the C# sense
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if the specified type is unsafe; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.ContainsPointersToNonValueType(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Determines whether a type contains contains pointers to non-value types.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TryGetOverride(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.IOverride@)">
            <summary>
            Gets the override.
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetOverrides(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Gets the overrides for a given method
            </summary>
            <param name="declaringType"></param>
            <param name="methodDefinition"></param>
            <param name="genericTypeArgumentsInContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetOverrides(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Gets the overrides.
            </summary>
            <param name="methodDefinition">The method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Matches(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType},System.Boolean)">
            <summary>
            Gets a value indicating if parameters direction and type match.
            </summary>
            <param name="lefts">The lefts.</param>
            <param name="leftTypes"></param>
            <param name="rights">The rights.</param>
            <param name="rightTypes"></param>
            <param name="skipThis">if set to <c>true</c> [skip this].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Matches(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Gets a value indicating if parameters direction and type match.
            </summary>
            <param name="lefts">The lefts.</param>
            <param name="leftTypes"></param>
            <param name="rights">The rights.</param>
            <param name="rightTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Matches(Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if parameters direction and type match.
            </summary>
            <param name="left">The left.</param>
            <param name="leftType"></param>
            <param name="right">The right.</param>
            <param name="rightType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetUniqueName``1(Microsoft.ExtendedReflection.Collections.IMap{System.String,``0},System.String)">
            <summary>
            Gets a unique name.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="names">The names.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetUniqueNumberedName(Microsoft.ExtendedReflection.Collections.ISet{System.String},System.String)">
            <summary>
            Gets a unique name.
            </summary>
            <param name="names">The existing names.</param>
            <param name="name">The preferred new name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetUniqueName(Microsoft.ExtendedReflection.Collections.IBag{System.String},System.String)">
            <summary>
            Gets a unique name.
            </summary>
            <param name="names">The existing names.</param>
            <param name="name">The preferred new name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetUniqueName(Microsoft.ExtendedReflection.Collections.ISet{System.String},System.String)">
            <summary>
            Gets a unique name.
            </summary>
            <param name="names">The existing names.</param>
            <param name="name">The preferred new name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetUniqueName(Microsoft.ExtendedReflection.Utilities.Safe.SafeFunc{System.String,System.Boolean},System.String)">
            <summary>
            Gets a unique name.
            </summary>
            <param name="contains">A delegate that returns true if the name is contained.</param>
            <param name="name">The preferred new name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TrimGenericNumber(System.String)">
            <summary>
            Finds the 'generic' backtick and removes it (and the number trailing)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetMethodNames``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the set of member short names.
            </summary>
            <param name="members">The existing members.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetMemberNames``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the set of member short names.
            </summary>
            <param name="members">The existing members.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetUniqueMemberName``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Gets a unique member name.
            </summary>
            <param name="members">The existing members.</param>
            <param name="name">The preferred new name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetUniqueMemberName(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition,System.String)">
            <summary>
            Gets a unique member name from the type definition
            </summary>
            <param name="typeDefinition"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetUniqueParameterName(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IParameterDefinition},System.String)">
            <summary>
            Gets a unique parameter name.
            </summary>
            <param name="parameters">The existing parameters.</param>
            <param name="name">The preferred new name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.SortByName(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition})">
            <summary>
            Sorts the member definitions by name.
            </summary>
            <param name="memberDefinitions">The member definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.CompareMemberShortName(Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition)">
            <summary>
            Compares the name of the member short.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Sort(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition})">
            <summary>
            Sorts members by name
            </summary>
            <param name="members">The members.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.CompareMemberDefinition``1(``0,``0)">
            <summary>
            Shallows the compare member definition.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Sort(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.ICustomAttribute})">
            <summary>
            Sorts the attributes by name
            </summary>
            <param name="customAttributes">The custom attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.CanSee(Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Determines whether this instance can see the specified visibility.
            </summary>
            <param name="visibility">The visibility.</param>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if this instance can see the specified visibility; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.HasAnyParameterPointerType(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Determines whether the method
            has <see cref="T:System.IntPtr"/> parameters.
            </summary>
            <param name="methodDefinition">The method definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.IsDelegate(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Determines whether the specified type definition is delegate.
            </summary>
            <param name="typeDefinition">The type definition.</param>
            <returns>
            	<c>true</c> if the specified type definition is delegate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.ContainsGeneratedCode(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Determines whether a type definitions contains generated code.
            </summary>
            <param name="typeDefinition">The type definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.IsGeneratedCode(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Determins whether a type definition is marked with the 'GeneratedCode' attribute.
            </summary>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.IsGeneratedCode(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.ICustomAttribute})">
            <summary>
            Determines whether any attribute is <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute"/>.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.IsCompilerGenerated(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Determines whether the type is tagged with CompilerGeneratedAttribute
            </summary>
            <param name="typeDefinition">The type definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.IsCompilerGenerated(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the method is tagged with CompilerGeneratedAttribute
            </summary>
            <param name="methodDefinition">The method definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.IsIndexer(Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyDefinition)">
            <summary>
            Gets a value indicating if the property is an indexer
            </summary>
            <param name="propertyDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetDeclaredMethods(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Gets the declared methods (static and instance)
            </summary>
            <param name="typeDefinition">The type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetInstanceProperties(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets the instance properties.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TrimShortName(System.String)">
            <summary>
            Trims a short name after '`' or '&lt;'
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.IsAssignableTo(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Checks whether one type definition is somehow assignable to another.
            </summary>
            <param name="valueDefinition">The value definition.</param>
            <param name="targetDefinition">The target definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TryIsAssignableTo(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition,Microsoft.ExtendedReflection.Collections.ICountable{Microsoft.ExtendedReflection.Metadata.Names.TypeName}@)">
            <summary>
            Checks whether one type definition is somehow assignable to another.
            </summary>
            <param name="valueDefinition">The value definition.</param>
            <param name="targetDefinition">The target definition.</param>
            <param name="matchedTypes">Matched type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.ConvertToTypeEx(System.Type[])">
            <summary>
            Converts Type to to TypeEx.
            </summary>
            <param name="exceptionTypes">The exception types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TryGetAssemblyReference(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference@)">
            <summary>
            Tries to get the assembly name of the name.
            </summary>
            <param name="name">The name.</param>
            <param name="assemblyName">Name of the assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.IsCompilerGeneratedLazyInitializedField(Microsoft.ExtendedReflection.Metadata.Field,System.Boolean@)">
            <summary>
            Checks whether the given field is initialized only once.
            </summary>
            <param name="field"></param>
            <param name="mayUndo">whether it is safe to undo the initialization by setting the field to null</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TryGetProperty(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.IPropertyDefinition@)">
            <summary>
            Tries to get the property related to this method
            </summary>
            <param name="methodDefinition"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TryGetProperty(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Metadata.PropertyDefinition@)">
            <summary>
            Tries to get the property related to this method
            </summary>
            <param name="methodDefinition"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.ContainsPointers(Microsoft.ExtendedReflection.Metadata.Interfaces.IType[])">
            <summary>
            Determines whether the specified types contains pointer types.
            </summary>
            <param name="types">The types.</param>
            <returns>
            	<c>true</c> if the specified types contains pointers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.ContainsPointers(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Determines whether the specified type is a pointer types.
            </summary>
            <param name="t">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetTypeIdentification(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TypeIdentificationConstructors,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod@)">
            <summary>
            Returns arguments describing the type compatible with the visibility context.
            If the type is visible, simple a typeof(xx) expression, otherwize
            a type from that assembly and the type full name
            </summary>
            <param name="typeDefinition">type definition.</param>
            <param name="forVisibilityContext">For visibility context.</param>
            <param name="constructors">The constructors.</param>
            <param name="ctor">The selected constructor.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetTypeIdentification(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TypeIdentificationConstructors,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod@)">
            <summary>
            Returns arguments describing the type compatible with the visibility context.
            If the type is visible, simple a typeof(xx) expression, otherwize
            a type from that assembly and the type full name
            </summary>
            <param name="concreteType">Type of the concrete.</param>
            <param name="forVisibilityContext">For visibility context.</param>
            <param name="constructors">The constructors.</param>
            <param name="ctor">The selected constructor.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetImports(Microsoft.ExtendedReflection.Collections.SafeSet{System.String},Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Collects the namespaces of all types that are part of the (constructed) given type.
            </summary>
            <param name="imports"></param>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetDeclaringType(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName)">
            <summary>
            Gets the declaring type of the method, and fails if not found
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetSafeParameterName(Microsoft.ExtendedReflection.Metadata.Parameter)">
            <summary>
            Gets the name of a parameter, and creates a argi name if the name is null.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetSafeReturnParameterName(Microsoft.ExtendedReflection.Metadata.Parameter)">
            <summary>
            Gets the name of a parameter, wrapped in 'result(...)'
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.IsValidCSharpTypeConstraint(Microsoft.ExtendedReflection.Metadata.Interfaces.IConstraint)">
            <summary>
            Determines whether [is valid C sharp type constraint] [the specified constraint].
            </summary>
            <param name="constraint">The constraint.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.IsBasedOn(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Gets a value indicating if the thisDefinition is based on baseType
            </summary>
            <param name="thisDefinition"></param>
            <param name="baseDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.HasObsoleteMembers(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Gets a value indicating if the type or any member of that type is tagged with obsolete
            </summary>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetAsyncMethods(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Returns the pairs of BeginYYY/EndYYY method pairs from the type definition
            </summary>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetStaticMembers(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Gets the list of static member names defined in the type and base types
            </summary>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetMemberNames(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Gets the member names declaring in the type definition and sub types.
            </summary>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetOverloadedMembers(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Gets the overloaded member names.
            </summary>
            <param name="typeDefinition">The type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetFinalVirtualMethods(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Gets the methods that are virtual and final (sealed in C#)
            or have been overriden with a non-virtual method.
            </summary>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TryGetVisibleDefaultConstructor(Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition@)">
            <summary>
            Gets a value indicating if there is a visible default instance constructor
            </summary>
            <param name="visibility"></param>
            <param name="typeDefinition"></param>
            <param name="ctor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.IsUserDelegate(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition@)">
            <summary>
            Returns a value indicating if the type inherits from MultiCastDelegate and has an instance Invoke method
            </summary>
            <param name="typeDefinition"></param>
            <param name="invokeMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.HasEmbeddedInteropTypeAsGenericTypeArgument(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type has embedded interop types
            as generic type arguments
            </summary>
            <param name="_type">may be null</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.HasEmbeddedInteropTypeAsGenericTypeArgument(Microsoft.ExtendedReflection.Metadata.Collections.SafeTypeSet,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets a value indicating if the type has embedded interop types
            as generic type arguments
            </summary>
            <param name="visited">type definition that already have been validated</param>
            <param name="_type">may be null</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetSignatureHashCode(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition},Microsoft.ExtendedReflection.Metadata.VisibilityContext,System.Predicate{Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition})">
            <summary>
            Computes a hashcode of the member signatures fullfilling the filters
            </summary>
            <param name="typeDefinitions"></param>
            <param name="visibility"></param>
            <param name="typeDefinitionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.GetSignatureHashCode(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition,Microsoft.ExtendedReflection.Metadata.VisibilityContext,System.Predicate{Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition})">
            <summary>
            Computes a hashcode of the member signatures fullfilling the filters
            </summary>
            <param name="assembly"></param>
            <param name="visibility"></param>
            <param name="typeDefinitionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.HasParametersExcludingReceiver(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference)">
            <summary>
            Has any parameters besides the receiver
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.MemberTypeComparer">
            <summary>
            Orders members in the following order:
              - fields,
              - constructors,
              - properties,
              - events,
              - methods,
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.MemberTypeComparer.Compare(Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition,Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.MemberTypeComparer.Score(Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition)">
            <summary>
            Scores the specified member.
            </summary>
            <param name="member">The member.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters">
            <summary>
            member definitions filters
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.Any``1">
            <summary>
            Gets a filter that select all types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.And``1(Microsoft.ExtendedReflection.Metadata.Interfaces.MemberDefinitionFilter{``0},Microsoft.ExtendedReflection.Metadata.Interfaces.MemberDefinitionFilter{``0})">
            <summary>
            Combines 2 filter with a 'and' operator
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.Not``1(Microsoft.ExtendedReflection.Metadata.Interfaces.MemberDefinitionFilter{``0})">
            <summary>
            Negates a filter 
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.ShortName``1(System.String)">
            <summary>
            Filter over member shortname
            </summary>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.Namespace``1(System.String)">
            <summary>
            Filter over member shortname
            </summary>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.ToMemberFilter(Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.MemberKind,System.String)">
            <summary>
            Creates the member filter string (parseable by TryParseMemberFilter)
            </summary>
            <param name="kind"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.ToMemberFilter(Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Converst to a member filter
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.Member(Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.MemberKind,System.String)">
            <summary>
            Creates a member filter
            </summary>
            <param name="kind">The kind.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.TryParseMemberFilter(System.String,Microsoft.ExtendedReflection.Metadata.Interfaces.MemberDefinitionFilter{Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinition}@)">
            <summary>
            Tries to parse the member filter.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.MemberKind">
            <summary>
            Filtering members
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.MemberKind.Constructor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.MemberKind.Method">
            <summary>
            Method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.MemberKind.Property">
            <summary>
            Property
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.MemberKind.Event">
            <summary>
            Event
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.Filters.MemberKind.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TypeIdentificationConstructors">
            <summary>
            Helper class that holds the usual three constructors to identify a closed type reference
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TypeIdentificationConstructors.TypeCtor">
            <summary>
            Constructor that takes type
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TypeIdentificationConstructors.TypeOfAssemblyAndTypeNameCtor">
            <summary>
            Constructor that takes type of assembly, and precise name of type
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TypeIdentificationConstructors.AssemblyNameAndTypeNameCtor">
            <summary>
            Constructor that takes precise name of assembly, and precise name of type
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TypeIdentificationConstructors.#ctor(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Interfaces.MetadataHelper.TypeIdentificationConstructors"/> class.
            </summary>
            <param name="typeCtor">The type ctor.</param>
            <param name="typeOfAssemblyAndTypeNameCtor">The type of assembly and type name ctor.</param>
            <param name="assemblyNameAndTypeNameCtor">The assembly name and type name ctor.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.LoadingErrorEventArgs">
            <summary>
            Arguments for event that is triggerred whenever a type load attempt fails
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.LoadingErrorEventArgs.#ctor(Microsoft.ExtendedReflection.Metadata.Names.Name,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.LoadingErrorEventArgs"/> class.
            </summary>
            <param name="originator">The originator.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.LoadingErrorEventArgs.Originator">
            <summary>
            Gets the originator.
            </summary>
            <value>The originator.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.LoadingErrorEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression">
            <summary>
            Serializable metadata expression
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.Microsoft#ExtendedReflection#Collections#IInternalizable#Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.ToValue">
            <summary>
            Turns the metadata expression into a value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.GetImports(Microsoft.ExtendedReflection.Collections.SafeSet{System.String})">
            <summary>
            Gets the imports (result will be cached)
            </summary>
            <param name="imports">The imports.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.Equals(Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.String(System.String)">
            <summary>
            Turns a string into an expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I1(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Byte)">
            <summary>
            Turns an integer into an expression.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I2(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Int16)">
            <summary>
            Turns an integer into an expression.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I4(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Int32)">
            <summary>
            Turns an integer into an expression.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.Bool(System.Boolean)">
            <summary>
            Bools the specified value.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.EnumValue(System.Enum)">
            <summary>
            Gets the equivalent enum expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I8(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,System.Int64)">
            <summary>
            Turns an integer into an expression.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.R4(System.Single)">
            <summary>
            Turns a float into an expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.R8(System.Double)">
            <summary>
            Turns a float into an expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.TypeOf(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Turns a type name into an expression.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.TypeOf(System.Type)">
            <summary>
            Types the of.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.TypeOf(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference)">
            <summary>
            Turns a type name into an expression.
            </summary>
            <param name="typeDefinition">The type definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.Array(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Metadata.MetadataExpression[])">
            <summary>
            Arrays the specified elements.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="elements">The elements.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates an attribute argument for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.op_Equality(Microsoft.ExtendedReflection.Metadata.MetadataExpression,Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.op_Inequality(Microsoft.ExtendedReflection.Metadata.MetadataExpression,Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.NoMetadataExpressions">
            <summary>
            Empty array of <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.Imports">
            <summary>
            Gets the import for this value
            </summary>
            <value>The import.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.Null">
            <summary>
            The null expression.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.Constructor">
            <summary>
            Constructor of metadata expressions
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.Destructor">
            <summary>
            Destructor of metadata expressions
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression.NullExpression">
            <summary>
            Null expression
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.NullExpression.ToValue">
            <summary>
            Turns the metadata expression into a value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.NullExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression.StringExpression">
            <summary>
            String expression
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.StringExpression.ToValue">
            <summary>
            Turns the metadata expression into a value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.StringExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.StringExpression.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression.ArrayExpression">
            <summary>
            Array expression
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.ArrayExpression.GetImports(Microsoft.ExtendedReflection.Collections.SafeSet{System.String})">
            <summary>
            Gets the imports (result will be cached)
            </summary>
            <param name="imports">The imports.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.ArrayExpression.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.ArrayExpression.Equals(Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Checks whether this instance is equal to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.ArrayExpression.ToValue">
            <summary>
            Turns the metadata expression into a value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.ArrayExpression.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.ArrayExpression.ElementType">
            <summary>
            Gets the type of the element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.ArrayExpression.Elements">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression.EnumableExpression">
            <summary>
            Expression that can represent an enum value
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.EnumableExpression.TryGetEnumFieldNames(Microsoft.ExtendedReflection.Collections.IIndexable{System.String}@)">
            <summary>
            Tries to get enum field names for
            the current value (the type should be an enum type)
            </summary>
            <param name="enumFieldNames">The enum field names.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.EnumableExpression.#ctor(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Collections.IIndexable{System.String},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression.EnumableExpression"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="enumFieldNames">The enum field names.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.EnumableExpression.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.EnumableExpression.Equals(Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.EnumableExpression.GetImports(Microsoft.ExtendedReflection.Collections.SafeSet{System.String})">
            <summary>
            Gets the imports (result will be cached)
            </summary>
            <param name="imports">The imports.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.EnumableExpression.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression.EnumableExpression"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.EnumableExpression.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.EnumableExpression.Type">
            <summary>
            The actual type of this expression.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.EnumableExpression.IsEnumType">
            <summary>
            Gets a value indicating whether the expression is an enum
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.EnumableExpression.ValueAsLong">
            <summary>
            Gets the value as long.
            </summary>
            <value>The value as long.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I1Expression">
            <summary>
            I1 expression
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I1Expression.Equals(Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Checks whether this instance is equal to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I1Expression.ToValue">
            <summary>
            Turns the metadata expression into a value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I1Expression.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I1Expression.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I1Expression.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I1Expression.ValueAsLong">
            <summary>
            Gets the value as long.
            </summary>
            <value>The value as long.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I2Expression">
            <summary>
            I2 expression
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I2Expression.Equals(Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Checks whether this instance is equal to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I2Expression.ToValue">
            <summary>
            Turns the metadata expression into a value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I2Expression.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I2Expression.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I2Expression.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I2Expression.ValueAsLong">
            <summary>
            Gets the value as long.
            </summary>
            <value>The value as long.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I4Expression">
            <summary>
            I4 expression
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I4Expression.Equals(Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Checks whether this instance is equal to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I4Expression.ToValue">
            <summary>
            Turns the metadata expression into a value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I4Expression.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I4Expression.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I4Expression.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I4Expression.ValueAsLong">
            <summary>
            Gets the value as long.
            </summary>
            <value>The value as long.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I8Expression">
            <summary>
            I8 expression
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I8Expression.Equals(Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Checks whether this instance is equal to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I8Expression.ToValue">
            <summary>
            Turns the metadata expression into a value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I8Expression.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I8Expression.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I8Expression.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.I8Expression.ValueAsLong">
            <summary>
            Gets the value as long.
            </summary>
            <value>The value as long.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression.R4Expression">
            <summary>
            R4 expression
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.R4Expression.ToValue">
            <summary>
            Turns the metadata expression into a value
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.R4Expression.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression.R8Expression">
            <summary>
            R8 expression
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.R8Expression.ToValue">
            <summary>
            Turns the metadata expression into a value
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.R8Expression.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression.TypeOfExpression">
            <summary>
            typeof(xxx) expression
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.TypeOfExpression.GetTypeDefinition">
            <summary>
            Gets the type definition from the type or the type definition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.TypeOfExpression.GetImports(Microsoft.ExtendedReflection.Collections.SafeSet{System.String})">
            <summary>
            Gets the imports (result will be cached)
            </summary>
            <param name="imports">The imports.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.TypeOfExpression.GetHashCode">
            <summary>
            Gets the hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.TypeOfExpression.Equals(Microsoft.ExtendedReflection.Metadata.MetadataExpression)">
            <summary>
            Checks whether this instance is equal to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.TypeOfExpression.ToValue">
            <summary>
            Turns the metadata expression into a value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataExpression.TypeOfExpression.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.TypeOfExpression.Type">
            <summary>
            Gets the type, if any.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.MetadataExpression.TypeOfExpression.TypeDefinition">
            <summary>
            Gets the type definition, if any.
            </summary>
            <value>The type definition.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataExpressionCollection">
            <summary>
            Collection of <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataExpression"/>
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Metadata`1">
            <summary>
            This class provides access to meta data by instantiating this class."/> values.
            </summary>
            <typeparam name="T">type for which to obtain meta data</typeparam>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Metadata`1.Type">
            <summary>
            Meta data type information.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Metadata`1.Definition">
            <summary>
            Meta data type definition information.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Metadata`1.#cctor">
            <summary>
            this static constructor is automatically 
            protected by the profiler
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Metadata`1.Module">
            <summary>
            Meta data module information.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Metadata`1.Assembly">
            <summary>
            Meta data assembly information.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Metadata`1.SerializableName">
            <summary>
            The serializable name of the type.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataForArrays">
            <summary>
            This class allows to obtain magic array meta data.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataForArrays.GetSzArrayElementsField(Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Returns the (virtual) field in which array elements of this layout
            are stored.
            </summary>
            <param name="elementLayout">elementLayout</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataForArrays.GetMdArrayElementsField(Microsoft.ExtendedReflection.Metadata.Layout,System.Int32)">
            <summary>
            Returns the (virtual) field in which array elements of this layout
            and rank are stored.
            </summary>
            <param name="elementLayout"></param>
            <param name="rank"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices">
            <summary>
            This class provides access to meta data given their global indices.
            </summary>
            <remarks>
            All <see cref="T:Microsoft.ExtendedReflection.Metadata.TypeEx"/>, <see cref="T:Microsoft.ExtendedReflection.Metadata.TypeDefinition"/>, <see cref="T:Microsoft.ExtendedReflection.Metadata.Method"/>, <see cref="T:Microsoft.ExtendedReflection.Metadata.GenericMethod"/>, <see cref="T:Microsoft.ExtendedReflection.Metadata.MethodDefinition"/>, <see cref="T:Microsoft.ExtendedReflection.Metadata.Field"/>, and <see cref="T:Microsoft.ExtendedReflection.Metadata.FieldDefinition"/>.
            provide global indices. Global Indices are natural numbers starting from 1.
            Global indices are only assigned to actually used meta data entities, so
            that the indices occupy a tight range.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices.GetType(System.Int32)">
            <summary>
            Retrieves a type from its global index.
            </summary>
            <param name="globalIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices.GetTypeDefinition(System.Int32)">
            <summary>
            Retrieves a type definition from its global index.
            </summary>
            <param name="globalIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices.GetMethod(System.Int32)">
            <summary>
            Retrieves a method from its global index.
            </summary>
            <param name="globalIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices.GetMethodDefinition(System.Int32)">
            <summary>
            Retrieves a method definition from its global index.
            </summary>
            <param name="globalIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices.GetGenericMethod(System.Int32)">
            <summary>
            Retrieves a generic method from its global index.
            </summary>
            <param name="globalIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices.GetField(System.Int32)">
            <summary>
             Retrieves a field from its global index.
            </summary>
            <param name="globalIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices.GetFieldDefinition(System.Int32)">
            <summary>
             Retrieves a field definition from its global index.
            </summary>
            <param name="globalIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices.GetProperty(System.Int32)">
            <summary>
             Retrieves a property from its global index.
            </summary>
            <param name="globalIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices.GetPropertyDefinition(System.Int32)">
            <summary>
             Retrieves a property definition from its global index.
            </summary>
            <param name="globalIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices.GetEvent(System.Int32)">
            <summary>
             Retrieves a event from its global index.
            </summary>
            <param name="globalIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices.GetEventDefinition(System.Int32)">
            <summary>
             Retrieves a event definition from its global index.
            </summary>
            <param name="globalIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromGlobalIndices.GetLayout(System.Int32)">
            <summary>
            Gets a layout from its global index.
            </summary>
            <param name="globalIndex">Global index.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection">
            <summary>
            This class provides access to meta data given a reflection type or generic type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetType(System.Type)">
            <summary>
            Retrieves a type given a (fully instantiated) reflection type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.TryGetIType(System.Type,Microsoft.ExtendedReflection.Metadata.Interfaces.IType@)">
            <summary>
            Takes into account that the type might be in a bad state.
            </summary>
            <param name="inType">Type of the in.</param>
            <param name="outType">Type of the out.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetIType(System.Type)">
            <summary>
            Retrieves a (partially self-instantiated) type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetTypes(System.Type[])">
            <summary>
            Retrieves a list of types given a (fully instantiated) reflection type).
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetTypeDefinition(System.Type)">
            <summary>
            Retrieves a type definition given a reflection type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetModule(System.Reflection.Module)">
            <summary>
            Retrieves a module given a reflection module.
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetAssembly(System.Reflection.Assembly)">
            <summary>
            Retrieves the assembly given a reflection assembly.
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetAssemblies(System.Reflection.Assembly[])">
            <summary>
            Gets the assemblies.
            </summary>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.LoadAssembly(System.Reflection.AssemblyName)">
            <summary>
            Loads an assembly given the name of the assembly.
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetMethod(System.Reflection.MethodBase)">
            <summary>
            Retrieves a method given a reflection method or constructor info.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetInstantiatedMethod(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Retrieves a method given a generic reflection method and arguments.
            </summary>
            <param name="genericMethod"></param>
            <param name="genericArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetGenericMethod(System.Reflection.MethodInfo)">
            <summary>
            Retrieves a generic method given a reflection method info.
            </summary>
            <param name="genericMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetMethodDefinition(System.Reflection.MethodBase)">
            <summary>
            Retrieves a method definition from a reflection method or constructor info. May return null if method has no definition.
            </summary>
            <remarks>
            The reflection method info or its declaring type can be instantiated.
            </remarks>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetField(System.Reflection.FieldInfo)">
            <summary>
            Retrieves a field given a reflection field info.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetFieldDefinition(System.Reflection.FieldInfo)">
            <summary>
            Retrieves a field definition given a reflection field info.
            </summary>
            <remarks>
            The reflection field info's declaring type can be instantiated.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Retrieves a property given a reflection property info.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetPropertyDefinition(System.Reflection.PropertyInfo)">
            <summary>
            Retrieves a property definition given a reflection property info.
            </summary>
            <remarks>
            The reflection property info's declaring type can be instantiated.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetEvent(System.Reflection.EventInfo)">
            <summary>
            Retrieves a event given a reflection event info.
            </summary>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetEventDefinition(System.Reflection.EventInfo)">
            <summary>
            Retrieves a event definition given a reflection event info.
            </summary>
            <remarks>
            The reflection event info's declaring type can be instantiated.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.GetParameter(System.Reflection.ParameterInfo)">
            <summary>
            Retrieves a parameter given a reflection parameter info.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.RaiseLoadingError(System.Object,Microsoft.ExtendedReflection.Metadata.Names.Name,System.Exception)">
            <summary>
            Raises a loading error.
            </summary>
            <param name="sender">The sender.</param>
            <param name="originator">The originator.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.TryCreateCustomAttributeValue(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.ICustomAttribute,System.Object@)">
            <summary>
            Tries to create a fresh instance of a custom attribute.
            </summary>
            <param name="container">The container.</param>
            <param name="customAttribute">The custom attribute.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.DumpStatistics(System.IO.TextWriter)">
            <summary>
            Dumps statistics about all metadata entities in use
            </summary>
            <param name="textWriter"></param>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.CustomAttributeCreation">
            <summary>
            Event raised whenever a custom attribute instance is created, or its creation fails.
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Metadata.MetadataFromReflection.LoadingError">
            <summary>
            Event raised whenever a loading error occurs.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.MetadataFromRuntimeHandles">
            <summary>
            This class provides access to meta data given <see cref="T:System.RuntimeTypeHandle"/>,
            <see cref="T:System.RuntimeFieldHandle"/> and <see cref="T:System.RuntimeMethodHandle"/> values.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromRuntimeHandles.#cctor">
            <summary>
            Initializes the <see cref="T:Microsoft.ExtendedReflection.Metadata.MetadataFromRuntimeHandles"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromRuntimeHandles.GetMethod(System.RuntimeTypeHandle,System.RuntimeMethodHandle)">
            <summary>
            Retrieves a method from runtime handles.
            </summary>
            <param name="declaringTypeHandle"></param>
            <param name="methodHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromRuntimeHandles.GetMethod(System.RuntimeMethodHandle)">
            <summary>
            Retrieves a method from runtime handles.
            </summary>
            <param name="methodHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromRuntimeHandles.GetGenericMethod(System.RuntimeTypeHandle,System.RuntimeMethodHandle)">
            <summary>
            Retrieves a generic method from runtime handles.
            </summary>
            <param name="declaringTypeHandle"></param>
            <param name="genericMethodHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromRuntimeHandles.GetGenericMethod(System.RuntimeMethodHandle)">
            <summary>
            Retrieves a generic method from runtime handles.
            </summary>
            <param name="genericMethodHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromRuntimeHandles.GetField(System.RuntimeTypeHandle,System.RuntimeFieldHandle)">
            <summary>
            Retrieves a field from runtime handles.
            </summary>
            <param name="declaringTypeHandle"></param>
            <param name="fieldHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromRuntimeHandles.GetField(System.RuntimeFieldHandle)">
            <summary>
            Retrieves a field from runtime handles.
            </summary>
            <param name="fieldHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromRuntimeHandles.GetType(System.RuntimeTypeHandle)">
            <summary>
            Retrieves a type from runtime handles.
            </summary>
            <param name="typeHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromRuntimeHandles.GetObjectType(System.Object)">
            <summary>
            Retrieves the type of a reference.
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromRuntimeHandles.GetObjectTypeDefinition(System.Object)">
            <summary>
            Retrieves the type of a reference.
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.MetadataFromRuntimeHandles.GetTypeDefinition(System.RuntimeTypeHandle)">
            <summary>
            Retrieves a type definition from runtime handles.
            </summary>
            <param name="typeDefinitionHandle"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName">
            <summary>
            A serializable attribute
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.FromAttribute(Microsoft.ExtendedReflection.Metadata.ICustomAttribute)">
            <summary>
            Creates a serializable attribute from another attribute.
            </summary>
            <param name="attribute">The attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.GetValue">
            <summary>
            throws InvalidOperationException
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Reads the custom attribute from the xml
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.Equals(Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName)">
            <summary>
            Checks whether this instance is equal to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName,Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName,Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.Constructor">
            <summary>
            Gets the constructor.
            </summary>
            <value>The constructor.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.ConstructorArguments">
            <summary>
            Gets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.NamedArguments">
            <summary>
            Gets the named arguments.
            </summary>
            <value>The named arguments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.CustomAttributeName.HasValue">
            <summary>
            Whether the attribute value is available.
            (always false in this case)
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName">
            <summary>
            Serializable CodeLocation
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName.Method">
            <summary>
            The method, can be <code>null</code>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName.Offset">
            <summary>
            The offset, can be <code>-1</code> if <see cref="F:Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName.Method"/> is <code>null</code>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName.#ctor(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName.Equals(Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName,Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName,Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName">
            <summary>
            Serializable name of a event definition
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.MemberDefinitionName">
            <summary>
            Member definition name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MemberDefinitionName.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName@)">
            <summary>
            Gets the declaring type.
            </summary>
            <param name="declaringType">Type of the declaring.</param>
            <returns></returns>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MemberDefinitionName.Kind">
            <summary>
            Kind value for fast switching.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MemberDefinitionName.AssemblyName">
            <summary>
            Gets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MemberDefinitionName.ShortName">
            <summary>
            Name of this member definition
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.#ctor(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.Int32,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,System.String,Microsoft.ExtendedReflection.Metadata.Names.TypeName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="metadataToken">The metadata token.</param>
            <param name="declaringType">The declaring type.</param>
            <param name="shortName">The short name.</param>
            <param name="eventType">The event type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.FromEventInfo(System.Reflection.EventInfo)">
            <summary>
            Creates a name for the event base.
            </summary>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName@)">
            <summary>
            Gets the declaring type.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.GetShortName(Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name.
            </summary>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.GetFullName(Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name.
            </summary>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.Instantiate(Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Instantiates this event definition with the specified generic type arguments.
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes content to xml
            </summary>
            <param name="writer">The writer.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a name for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.CompareTo(Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.Equals(Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.FullName">
            <summary>
            Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.ShortName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.MetadataToken">
            <summary>
            Gets the metadata token.
            </summary>
            <value>The metadata token.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.EventType">
            <summary>
            Gets the event type.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.EventDefinitionName.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.EventName">
            <summary>
            Serializable name of a event reference
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.MemberName">
            <summary>
            Member name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MemberName.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Names.TypeName@)">
            <summary>
            Gets the declaring type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MemberName.Kind">
            <summary>
            Kind value for fast switching.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventName.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Names.TypeName@)">
            <summary>
            Gets the declaring type.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventName.FromEventInfo(System.Reflection.EventInfo)">
            <summary>
            Obtains a name from a reflection event; may return in rare cases.
            </summary>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventName.InternalFromEvent(Microsoft.ExtendedReflection.Metadata.Event)">
            <summary>
            Obtains a name from a event; may return in rare cases.
            </summary>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes content to xml
            </summary>
            <param name="writer">The writer.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a name for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventName.CompareTo(Microsoft.ExtendedReflection.Metadata.Names.EventName)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventName.Equals(Microsoft.ExtendedReflection.Metadata.Names.EventName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.EventName,Microsoft.ExtendedReflection.Metadata.Names.EventName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.EventName,Microsoft.ExtendedReflection.Metadata.Names.EventName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.EventName.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.EventName.Definition">
            <summary>
            Gets the definition.
            </summary>
            <value>The definition.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.EventName.Type">
            <summary>
            Event type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.EventName.GenericTypeArguments">
            <summary>
            Gets the generic type arguments.
            </summary>
            <value>The generic type arguments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.EventName.ShortName">
            <summary>
            Gets the short name.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.EventName.FullName">
            <summary>
            Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName">
            <summary>
            Serializable name of a field definition
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.#ctor(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.Int32,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,System.Boolean,System.String,Microsoft.ExtendedReflection.Metadata.Names.TypeName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="metadataToken">The metadata token.</param>
            <param name="declaringType">The declaring type.</param>
            <param name="isStatic">if set to <c>true</c> [is static].</param>
            <param name="shortName">The short name.</param>
            <param name="fieldType">The field type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.FromFieldInfo(System.Reflection.FieldInfo)">
            <summary>
            Creates a name for the field base.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName@)">
            <summary>
            Gets the type of the declaring.
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.GetShortName(Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name.
            </summary>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.GetFullName(Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name.
            </summary>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.Instantiate(Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Instantiates this field definition with the specified generic type arguments.
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes content to xml
            </summary>
            <param name="writer">The writer.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a name for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.CompareTo(Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.Equals(Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.IsStatic">
            <summary>
            Gets a value indicating whether this instance is static.
            </summary>
            <value><c>true</c> if this instance is static; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.FullName">
            <summary>
            Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.ShortName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.MetadataToken">
            <summary>
            Gets the metadata token.
            </summary>
            <value>The metadata token.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.FieldType">
            <summary>
            Gets the field type.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.FieldDefinitionName.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.FieldName">
            <summary>
            Serializable name of a field reference
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldName.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Names.TypeName@)">
            <summary>
            Gets the declaring type.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldName.FromFieldInfo(System.Reflection.FieldInfo)">
            <summary>
            Obtains a name from a reflection field; may return in rare cases.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldName.InternalFromField(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Obtains a name from a field; may return in rare cases.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes content to xml
            </summary>
            <param name="writer">The writer.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a name for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldName.CompareTo(Microsoft.ExtendedReflection.Metadata.Names.FieldName)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldName.Equals(Microsoft.ExtendedReflection.Metadata.Names.FieldName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.FieldName,Microsoft.ExtendedReflection.Metadata.Names.FieldName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.FieldName,Microsoft.ExtendedReflection.Metadata.Names.FieldName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.FieldName.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.FieldName.Definition">
            <summary>
            Gets the definition.
            </summary>
            <value>The definition.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.FieldName.Type">
            <summary>
            Field type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.FieldName.IsStatic">
            <summary>
            Gets a value indicating whether this instance is static.
            </summary>
            <value><c>true</c> if this instance is static; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.FieldName.GenericTypeArguments">
            <summary>
            Gets the generic type arguments.
            </summary>
            <value>The generic type arguments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.FieldName.ShortName">
            <summary>
            Gets the short name.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.FieldName.FullName">
            <summary>
            Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName">
            <summary>
            Serializable name of a method definition
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.FromModuleMethod(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.Int32,System.Boolean,System.String,System.String[],Microsoft.ExtendedReflection.Metadata.Names.TypeName,Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName[])">
            <summary>
            Creates a method definition name from a module method (not declaring type)
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="metadataToken">The metadata token.</param>
            <param name="isStatic">if set to <c>true</c> [is static].</param>
            <param name="shortName">The short name.</param>
            <param name="genericMethodParameterNames">The generic method parameter names</param>
            <param name="resultType">The resultType.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.FromTypeMethod(System.Int32,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,System.Boolean,System.String,System.String[],Microsoft.ExtendedReflection.Metadata.Names.TypeName,Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName[])">
            <summary>
            Creates a method definition name from a *non*-module method (has declaring type)
            </summary>
            <param name="metadataToken">The metadata token.</param>
            <param name="declaringType">The declaring type.</param>
            <param name="isStatic">if set to <c>true</c> [is static].</param>
            <param name="shortName">The short name.</param>
            <param name="genericMethodParameterNames">The generic method parameter names.</param>
            <param name="resultType">The resultType.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.#ctor(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.Int32,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,System.Boolean,System.String,System.String[],Microsoft.ExtendedReflection.Metadata.Names.TypeName,Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="metadataToken">The metadata token.</param>
            <param name="declaringType">The declaring type.</param>
            <param name="isStatic">if set to <c>true</c> [is static].</param>
            <param name="shortName">The short name.</param>
            <param name="genericMethodParameterNames">The generic method parameters.</param>
            <param name="resultType">The resultType.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.FromMethodBase(System.Reflection.MethodBase)">
            <summary>
            Creates a name for the method base.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName@)">
            <summary>
            Gets the declaring type.
            </summary>
            <param name="declaringType">Type of the declaring.</param>
            <returns></returns>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.GetShortName(System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.TypeName[],Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name.
            </summary>
            <param name="typed">if set to <c>true</c> [typed].</param>
            <param name="pretty">specifies if a C# like name should be created (i.e. replace .ctor by the declaring type name</param>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <param name="genericMethodParameters">The generic method parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.GetFullName(Microsoft.ExtendedReflection.Metadata.Names.TypeName[],Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the full name.
            </summary>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <param name="genericMethodParameters">The generic method parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.GetShortNameWithParameters(System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.TypeName[],Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name with parameters.
            </summary>
            <param name="typed">if set to <c>true</c> [typed].</param>
            <param name="pretty">specifies if a C# like name should be created (i.e. replace .ctor by the declaring type name</param>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <param name="genericMethodParameters">The generic method parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.GetShortNameWithParameterNames(System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.TypeName[],Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name with parameters.
            </summary>
            <param name="typed">if set to <c>true</c> [typed].</param>
            <param name="pretty">using a C# like syntax (i.e. .ctor becomes the declaring type name)</param>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <param name="genericMethodParameters">The generic method parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.GetFullNameWithParameters(Microsoft.ExtendedReflection.Metadata.Names.TypeName[],Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name with parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.Instantiate(Microsoft.ExtendedReflection.Metadata.Names.TypeName[],Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Instantiates this method definition with the specified generic type and method arguments.
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <param name="genericMethodArguments">The generic method arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.TryGetUnstubbedInstance(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName@)">
            <summary>
            Gets a version of this method where any stub name mangling has been removed.
            Extended Reflection creates stubs, and substitutions also
            have special prefix/postfix
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.GetUnstubbedInstance">
            <summary>
            Uncached unstubbing
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes content to xml
            </summary>
            <param name="writer">The writer.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a name for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.CompareTo(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.Equals(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.IsStatic">
            <summary>
            Gets a value indicating whether this instance is static.
            </summary>
            <value><c>true</c> if this instance is static; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.FullName">
            <summary>
            Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.ShortName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.GenericMethodParameterNames">
            <summary>
            Gets the generic method parameters.
            </summary>
            <value>The generic method parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.MetadataToken">
            <summary>
            Gets the metadata token.
            </summary>
            <value>The metadata token.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.ResultType">
            <summary>
            Gets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.ResultParameter">
            <summary>
            Gets the result parameter.
            </summary>
            <value>The result parameter.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.IsConstructor">
            <summary>
            Gets a value indicating whether this instance is constructor.
            </summary>
            <value>
            	<c>true</c> if this instance is constructor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.ShortNameWithParameters">
            <summary>
            Gets the short name with parameters.
            </summary>
            <value>The short name with parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.ShortTypedPrettyNameWithParameters">
            <summary>
            Gets the pretty short name with parameters, prepended with
            the short type name
            </summary>
            <value>The short name with parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.ShortTypedNameWithParameters">
            <summary>
            Gets the short name with parameters, prepended with
            the short type name
            </summary>
            <value>The short name with parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.ShortNameWithParameterNames">
            <summary>
            Gets the short name with parameter names.
            </summary>
            <value>The short name with parameter names.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.ShortTypedNameWithParameterNames">
            <summary>
            Gets the short name with parameter names, prepended with
            the short type name
            </summary>
            <value>The short name with parameter names.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.FullNameWithParameters">
            <summary>
            Gets the full name with parameters.
            </summary>
            <value>The full name with parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.GenericMethodParametersCount">
            <summary>
            Gets the number of generic method parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.MethodName">
            <summary>
            Serializable name of a method reference
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodName.FromMethodBase(System.Reflection.MethodBase)">
            <summary>
            Obtains a name from a reflection method; may return in rare cases.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodName.InternalFromMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Obtains a name from a method; may return in rare cases.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodName.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Names.TypeName@)">
            <summary>
            Gets the declaring type.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes content to xml
            </summary>
            <param name="writer">The writer.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a name for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodName.CompareTo(Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodName.Equals(Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.MethodName.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodName.Definition">
            <summary>
            Gets the definition.
            </summary>
            <value>The definition.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodName.IsStatic">
            <summary>
            Gets a value indicating whether this instance is static.
            </summary>
            <value><c>true</c> if this instance is static; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodName.IsConstructor">
            <summary>
            Gets a value indicating whether this instance is constructor.
            </summary>
            <value>
            	<c>true</c> if this instance is constructor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodName.GenericTypeArguments">
            <summary>
            Gets the generic type arguments.
            </summary>
            <value>The generic type arguments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodName.GenericMethodArguments">
            <summary>
            Gets the generic method arguments.
            </summary>
            <value>The generic method arguments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodName.ShortName">
            <summary>
            Gets the short name.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodName.FullName">
            <summary>
            Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodName.ShortNameWithParameters">
            <summary>
            Gets the name with parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodName.ShortTypedNameWithParameters">
            <summary>
            Gets the name with parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodName.ShortTypedPrettyNameWithParameters">
            <summary>
            Gets the name with parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodName.ShortNameWithParameterNames">
            <summary>
            Gets the name with parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.MethodName.FullNameWithParameters">
            <summary>
            Gets the name with parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName">
            <summary>
            Serializable assembly name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.#ctor(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a name for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.FromModule(System.Reflection.Module)">
            <summary>
            Creates a name for the assembly.
            </summary>
            <param name="module">The module.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.Equals(Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.CompareTo(Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.Assembly">
            <summary>
            Gets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ModuleDefinitionName.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName">
            <summary>
            A serializable parameter definition name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.#ctor(Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.String,System.Int32,System.Boolean,Microsoft.ExtendedReflection.Metadata.ParameterDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
            <param name="isThis">whether this parameter is the implicit 'this' parameter</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.MakeResult(Microsoft.ExtendedReflection.Metadata.Names.TypeName)">
            <summary>
            Makes the result.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.FromParameterInfo(System.Boolean,System.Reflection.ParameterInfo)">
            <summary>
            Creates a parameter name.
            </summary>
            <param name="methodIsStatic">whether the declaring method is static</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.MakeThis(Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.Boolean,System.Boolean)">
            <summary>
            Makes the this parameter.
            </summary>
            <param name="declaringType">Type of the declaring.</param>
            <param name="isValueType">if set to <c>true</c> [is value type].</param>
            <param name="isConstructor">if set to <c>true</c> [is constructor].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.Instantiate(Microsoft.ExtendedReflection.Metadata.Names.TypeName[],Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Instantiates the specified generic type arguments.
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <param name="genericMethodArguments">The generic method arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String,System.String,System.String)">
            <summary>
            Writes itself to xml
            </summary>
            <param name="writer">The writer.</param>
            <param name="elementName">Name of the element.</param>
            <param name="attributeName">Optional attribute to persist axiliary information.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a remote parameter info from previously logged xml.
            </summary>
            <param name="navigator">The navigator.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">when an error occurrs</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.Equals(Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.CompareTo(Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName)">
            <summary>
            Equality operator.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName)">
            <summary>
            Inequality operator.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.DeclaringMember">
            <summary>
            Gets the enclosing declaring type, if any.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.GenericMethodParametersCount">
            <summary>
            Gets the number of generic method parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.Type">
            <summary>
            Gets the type of the parameter.
            </summary>
            <value>The type of the parameter.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.Name">
            <summary>
            Gets the name; can be null for the result parameter.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.IsThis">
            <summary>
            Whether this parameter is the implicit 'this' parameter.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.Index">
            <summary>
            Gets the position; -1 for the result parameter;
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.Direction">
            <summary>
            Gets the direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName.Microsoft#ExtendedReflection#Metadata#Interfaces#IParameterReference#SerializableName">
            <summary>
            Gets a serializable name of this metadata reference.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.ParameterName">
            <summary>
            Serializable name of a method reference
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes content to xml
            </summary>
            <param name="writer">The writer.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a name for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.CompareTo(Microsoft.ExtendedReflection.Metadata.Names.ParameterName)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.Equals(Microsoft.ExtendedReflection.Metadata.Names.ParameterName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.ParameterName,Microsoft.ExtendedReflection.Metadata.Names.ParameterName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.ParameterName,Microsoft.ExtendedReflection.Metadata.Names.ParameterName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.Definition">
            <summary>
            Gets the definition.
            </summary>
            <value>The definition.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.DeclaringMember">
            <summary>
            Gets the declaring method.
            </summary>
            <value>The declaring method.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.Name">
            <summary>
            Gets the short name.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.Type">
            <summary>
            Gets the type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.GenericMethodArguments">
            <summary>
            Gets the type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.GenericMethodParametersCount">
            <summary>
            Gets the number of generic method parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.IsThis">
            <summary>
            Whether this parameter is the first argument of an instance method.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ParameterName.Index">
            <summary>
            The index of this parameter in the list of parameters of the method.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName">
            <summary>
            Serializable name of a property definition
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.#ctor(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.Int32,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,System.String,Microsoft.ExtendedReflection.Metadata.Names.TypeName,Microsoft.ExtendedReflection.Metadata.Names.ParameterDefinitionName[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="metadataToken">The metadata token.</param>
            <param name="declaringType">The declaring type.</param>
            <param name="shortName">The short name.</param>
            <param name="propertyType">The property type.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.FromPropertyInfo(System.Reflection.PropertyInfo)">
            <summary>
            Creates a name for the property base.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName@)">
            <summary>
            Gets the declaring type.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.GetShortName(System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name.
            </summary>
            <param name="typed">if set to <c>true</c> [typed].</param>
            <param name="pretty">C# like syntax (i.e. using 'this').</param>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.GetShortNameWithParameters(System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name with parameters.
            </summary>
            <param name="typed">if set to <c>true</c> [typed].</param>
            <param name="pretty">C# like syntax (i.e. using 'this').</param>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.GetShortNameWithParameterNames(System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name with parameters.
            </summary>
            <param name="typed">if set to <c>true</c> [typed].</param>
            <param name="pretty">C# like syntax (i.e. using 'this').</param>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.GetFullNameWithParameters(System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name with parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.GetFullName(System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name.
            </summary>
            <param name="pretty">a value indicating whether the 'Item' name should be substituted to 'this'</param>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.Instantiate(Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Instantiates this property definition with the specified generic type arguments.
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes content to xml
            </summary>
            <param name="writer">The writer.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a name for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.CompareTo(Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.Equals(Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.FullName">
            <summary>
            Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.ShortName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.ShortNameWithParameters">
            <summary>
            Gets the short name with parameters.
            </summary>
            <value>The short name with parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.ShortTypedNameWithParameters">
            <summary>
            Gets the short name with parameters, prepended with
            the short type name
            </summary>
            <value>The short name with parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.ShortTypedPrettyNameWithParameters">
            <summary>
            Gets the short name with parameters, prepended with
            the short type name
            </summary>
            <value>The short name with parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.ShortNameWithParameterNames">
            <summary>
            Gets the short name with parameter names.
            </summary>
            <value>The short name with parameter names.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.ShortTypedNameWithParameterNames">
            <summary>
            Gets the short name with parameter names, prepended with
            the short type name
            </summary>
            <value>The short name with parameter names.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.FullNameWithParameters">
            <summary>
            Gets the full name with parameters.
            </summary>
            <value>The full name with parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.MetadataToken">
            <summary>
            Gets the metadata token.
            </summary>
            <value>The metadata token.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.PropertyType">
            <summary>
            Gets the property type.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.ParameterTypes">
            <summary>
            Gets the parameter types
            </summary>
            <value>The parameter types.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.PropertyName">
            <summary>
            Serializable name of a property reference
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Names.TypeName@)">
            <summary>
            Gets the declaring type.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.FromPropertyInfo(System.Reflection.PropertyInfo)">
            <summary>
            Obtains a name from a reflection property; may return in rare cases.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.InternalFromProperty(Microsoft.ExtendedReflection.Metadata.Property)">
            <summary>
            Obtains a name from a property; may return in rare cases.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes content to xml
            </summary>
            <param name="writer">The writer.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a name for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.CompareTo(Microsoft.ExtendedReflection.Metadata.Names.PropertyName)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.Equals(Microsoft.ExtendedReflection.Metadata.Names.PropertyName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.PropertyName,Microsoft.ExtendedReflection.Metadata.Names.PropertyName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.PropertyName,Microsoft.ExtendedReflection.Metadata.Names.PropertyName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.Definition">
            <summary>
            Gets the definition.
            </summary>
            <value>The definition.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.Type">
            <summary>
            Property type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.ParameterTypes">
            <summary>
            Gets the parameter types.
            </summary>
            <value>The parameter types.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.GenericTypeArguments">
            <summary>
            Gets the generic type arguments.
            </summary>
            <value>The generic type arguments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.ShortName">
            <summary>
            Gets the short name.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.ShortNameWithParameters">
            <summary>
            Gets the name with parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.ShortTypedNameWithParameters">
            <summary>
            Gets the name with parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.ShortTypedPrettyNameWithParameters">
            <summary>
            Gets the name with parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.ShortNameWithParameterNames">
            <summary>
            Gets the name with parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.FullNameWithParameters">
            <summary>
            Gets the name with parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.PropertyName.FullName">
            <summary>
            Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName">
            <summary>
            Serializable assembly name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="_publicKey">The public key.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="publicKey">The public key.</param>
            <param name="_location">The location.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a name for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.FromAssembly(System.Reflection.Assembly)">
            <summary>
            Creates a name for the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.FromAssemblyName(System.Reflection.AssemblyName)">
            <summary>
            Creates a name for the assembly.
            </summary>
            <param name="assemblyName">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.FromAssemblyName(System.Reflection.AssemblyName,System.String)">
            <summary>
            Creates a name for the assembly.
            </summary>
            <param name="assemblyName">The assembly.</param>
            <param name="_location"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.FromName(System.String)">
            <summary>
            Creates a name for the assembly.
            </summary>
            <param name="name">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.FromName(System.String,System.Byte[])">
            <summary>
            Creates a name for the assembly.
            </summary>
            <param name="name">The assembly.</param>
            <param name="_publicKey">The public key.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.FromName(System.String,System.Byte[],System.String)">
            <summary>
            Creates a name for the assembly.
            </summary>
            <param name="name">The assembly.</param>
            <param name="_publicKey">The public key.</param>
            <param name="_location">The location.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.Equals(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.CompareTo(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.PublicKey">
            <summary>
            Gets the public key.
            </summary>
            <value>The public key.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName">
            <summary>
            Serializable name of a type definition
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.FromName(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.Int32,System.Boolean,System.String,System.String,System.String[])">
            <summary>
            Creates a new instance from a non-nested type
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="metadataToken">The metadata token.</param>
            <param name="isValueType">if set to <c>true</c> [is value type].</param>
            <param name="namespace">The @namespace.</param>
            <param name="name">The name.</param>
            <param name="genericTypeParameterNames">The generic type parameter names.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.FromName(System.Int32,System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,System.String,System.String[])">
            <summary>
            Creates a new instance of a nested type definition
            </summary>
            <param name="metadataToken">The metadata token.</param>
            <param name="isValueType">if set to <c>true</c> [is value type].</param>
            <param name="declaringType">Type of the declaring.</param>
            <param name="name">The name.</param>
            <param name="genericTypeParameterNames">The generic type parameter names.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.#ctor(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.Int32,System.Boolean,System.String,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="metadataToken">The metadata token.</param>
            <param name="isValueType">if set to <c>true</c> [is value type].</param>
            <param name="namespace">The @namespace.</param>
            <param name="declaringType">The declaring type.</param>
            <param name="name">The name.</param>
            <param name="genericTypeParameterNames">The generic type parameter names.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.GetShortName(Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name.
            </summary>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.GetFullName(Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Gets the name.
            </summary>
            <param name="genericTypeParameters">The generic type parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.FromType(System.Type)">
            <summary>
            Creates a <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.TypeName"/> instance from
            a <see cref="T:System.Type"/>
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.Instantiate(Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Instantiates this type definition with the specified generic type arguments.
            </summary>
            <param name="_genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.InternalFromTypeDefinition(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Creates a <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.TypeName"/> instance from
            a <see cref="T:Microsoft.ExtendedReflection.Metadata.TypeEx"/>
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes to xml
            </summary>
            <param name="writer"></param>
            <param name="elementName"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a name for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.CompareTo(Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.Equals(Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.TryGetDeclaringType(Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName@)">
            <summary>
            Tries to obtain the declaring type if this is a nested type definition.
            </summary>
            <param name="declaringType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.ToShortString">
            <summary>
            Returns a short <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.Internalize">
            <summary>
            Returns an internalized clone of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.GenericTypeParameterNames">
            <summary>
            Gets the generic type parameters
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.GenericTypeParameterCount">
            <summary>
            Gets the number of generic type parameter.
            </summary>
            <value>The generic type parameter count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.AssemblyName">
            <summary>
            Gets the type assembly name
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.IsValueType">
            <summary>
            Gets a value indicating whether this instance is value type.
            </summary>
            <value>
            	<c>true</c> if this instance is value type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.Namespace">
            <summary>
            Gets the namespace
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.ShortName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.FullName">
            <summary>
            Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.MetadataToken">
            <summary>
            Gets the metadata token; might not be known.
            </summary>
            <value>The metadata token.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName.SelfInstantiation">
            <summary>
            Gets the self instantiation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.Names.TypeName">
            <summary>
            Serializable name of a type reference
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.Instantiate(Microsoft.ExtendedReflection.Metadata.Names.TypeName[],Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Instantiates this type with the specified generic type arguments.
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <param name="genericMethodArguments">The generic method arguments.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.SubstituteGenericParameters(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Interfaces.IType})">
            <summary>
            Substitutes the generic parameters.
            </summary>
            <param name="genericMethodArguments">The generic method arguments.</param>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.SubstituteGenericParameters(Microsoft.ExtendedReflection.Metadata.Names.TypeName[],Microsoft.ExtendedReflection.Metadata.Names.TypeName[])">
            <summary>
            Substitutes the generic parameters.
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <param name="genericMethodArguments">The generic method arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.ToShortString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.String,System.String,System.String)">
            <summary>
            Writes to xml
            </summary>
            <param name="writer">The writer.</param>
            <param name="elementName">Name of the element.</param>
            <param name="attributeName">Optional attribute to persist auxiliary information.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.FromTypes(System.Type[])">
            <summary>
            Creates a name for the types.
            </summary>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.FromType(System.Type)">
            <summary>
            Creates a <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.TypeName"/> instance from
            a <see cref="T:System.Type"/>
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.FromXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates a name for the XML.
            </summary>
            <param name="nav">The nav.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.CompareTo(Microsoft.ExtendedReflection.Metadata.Names.TypeName)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.Equals(Microsoft.ExtendedReflection.Metadata.Names.TypeName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.op_Equality(Microsoft.ExtendedReflection.Metadata.Names.TypeName,Microsoft.ExtendedReflection.Metadata.Names.TypeName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.op_Inequality(Microsoft.ExtendedReflection.Metadata.Names.TypeName,Microsoft.ExtendedReflection.Metadata.Names.TypeName)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.MakeGenericTypeParameter(System.Int32)">
            <summary>
            Makes the generic type parameter.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.MakeGenericMethodParameter(System.Int32)">
            <summary>
            Makes the generic method parameter.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.GetMdArrayType(System.Int32)">
            <summary>
            Gets the type of the md array.
            </summary>
            <param name="rank">The rank.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.TryGetTypeNameFromString(System.String,Microsoft.ExtendedReflection.Metadata.Names.TypeName@)">
            <summary>
            Gets the TypeName by looking up all assemblies in resolver path. Not an optimized function and uses expensive search
            to lookup
            </summary>
            <param name="type"></param>        
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.Spec">
            <summary>
            Kind of type spec this type represents.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.NoTypes">
            <summary>
            Empty array of types.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.MdRank">
            <summary>
            Gets the rank if <see cref="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.SzArray"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.MdArray"/>.
            </summary>
            <value>The rank.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.ElementType">
            <summary>
            Gets the type of the element if <see cref="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.SzArray"/>, 
            <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.MdArray"/>, <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Pointer"/>, or <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ManagedPointer"/>.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.Definition">
            <summary>
            Gets the type definition if <see cref="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ValueType"/> or <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Class"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.GenericTypeArguments">
            <summary>
            Gets the type arguments if <see cref="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.ValueType"/>
            or <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.Class"/>.
            </summary>
            <value>The type arguments.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.GenericIndex">
            <summary>
            Gets the index of a generic parameters if <see cref="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.Spec"/> is <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.GenericTypeParameter"/>
            or <see cref="F:Microsoft.ExtendedReflection.Metadata.TypeSpec.GenericMethodParameter"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.FullName">
            <summary>
            Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.ShortName">
            <summary>
            Gets the short name.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.SzArrayType">
            <summary>
            Returns an sz-array with this type as the element type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.HasManagedPointerType">
            <summary>
            Types containing unmanaged pointer do not have managed pointer types.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.ManagedPointerType">
            <summary>
            Returns manager pointer type of this type; only defined if <see cref="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.HasManagedPointerType"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.Names.TypeName.PointerType">
            <summary>
            Returns pointer type of this type.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.SzArray.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.MdArray.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.Names.TypeName.PossiblyManagedPointer.Internalize">
            <summary>
            Returns an internalized instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.SystemTypes">
            <summary>
            This class provides access to all basic system types.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Object">
            <summary>
            A type representing <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Null">
            <summary>
            A special type, that is assignable to all reference types.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Void">
            <summary>
            A type representing <see cref="T:System.Void"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.VoidBox">
            <summary>
            A type representing <see cref="T:Microsoft.ExtendedReflection.Metadata.Impl.__VoidBox"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.MarshalByRefObject">
            <summary>
            A type representing <see cref="T:System.MarshalByRefObject"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Array">
            <summary>
            A type representing <see cref="T:System.Array"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Type">
            <summary>
            A type representing <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.RuntimeType">
            <summary>
            A type representing <see cref="T:System.RuntimeType"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Module">
            <summary>
            A type representing <see cref="T:System.Reflection.Module"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Assembly">
            <summary>
            A type representing <see cref="T:System.Reflection.Module"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.FieldInfo">
            <summary>
            A type representing <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.MethodInfo">
            <summary>
            A type representing <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.MethodBase">
            <summary>
            A type representing <see cref="T:System.Reflection.MethodBase"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Char">
            <summary>
            A type representing <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Bool">
            <summary>
            A type representing <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Int8">
            <summary>
            A type representing <see cref="T:System.SByte"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Int16">
            <summary>
            A type representing <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Int32">
            <summary>
            A type representing <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Int64">
            <summary>
            A type representing <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.IntPtr">
            <summary>
            A type representing <see cref="T:System.IntPtr"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.UInt8">
            <summary>
            A type representing <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.UInt16">
            <summary>
            A type representing <see cref="T:System.UInt16"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.UInt32">
            <summary>
            A type representing <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.UInt64">
            <summary>
            A type representing <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.UIntPtr">
            <summary>
            A type representing <see cref="T:System.UIntPtr"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Single">
            <summary>
            A type representing <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Double">
            <summary>
            A type representing <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Decimal">
            <summary>
            A type representing <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.DateTime">
            <summary>
            A type representing <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.MidpointRounding">
            <summary>
            A type representing <see cref="T:System.MidpointRounding"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.TimeSpan">
            <summary>
            A type representing <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Enum">
            <summary>
            A type representing <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.String">
            <summary>
            A type representing <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.TypedReference">
            <summary>
            A type representing <see cref="T:System.TypedReference"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.ArgIterator">
            <summary>
            A type representing <see cref="T:System.ArgIterator"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.RuntimeArgumentHandle">
            <summary>
            A type representing <see cref="T:System.RuntimeArgumentHandle"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.ValueType">
            <summary>
            A type representing <see cref="T:System.ValueType"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Exception">
            <summary>
            A type representing <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Environment">
            <summary>
            A type representing <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.ArgumentException">
            <summary>
            A type representing <see cref="T:System.ArgumentException"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.RuntimeTypeHandle">
            <summary>
            A type representing <see cref="T:System.RuntimeTypeHandle"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.RuntimeMethodHandle">
            <summary>
            A type representing <see cref="T:System.RuntimeMethodHandle"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.RuntimeFieldHandle">
            <summary>
            A type representing <see cref="T:System.RuntimeFieldHandle"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Delegate">
            <summary>
            A type representing <see cref="T:System.Delegate"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.MulticastDelegate">
            <summary>
            A type representing <see cref="T:System.MulticastDelegate"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Attribute">
            <summary>
            A type representing <see cref="T:System.Attribute"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.InternalsVisibleToAttribute">
            <summary>
            A type representing <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Console">
            <summary>
            A type representing <see cref="T:System.Console"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.Math">
            <summary>
            A type representing <see cref="T:System.Math"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.IDisposable">
            <summary>
            A type representing <see cref="T:System.IDisposable"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.IServiceProvider">
            <summary>
            A type representing <see cref="T:System.IServiceProvider"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.SystemTypes.Map(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            A type representing a map from keys to values.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.SystemTypes.MdIndex(System.Int32)">
            <summary>
            A type representing a tuple of indices into a multi-dimensional array.
            </summary>
            <param name="rank">number of dimensions</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.IEnumerable">
            <summary>
            A type representing <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.IEnumerator">
            <summary>
            A type representing <see cref="T:System.Collections.IEnumerator"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.ICollection">
            <summary>
            A type representing <see cref="T:System.Collections.ICollection"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.IList">
            <summary>
            A type representing <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.IDictionary">
            <summary>
            A type representing <see cref="T:System.Collections.IDictionary"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.SZArrayHelper">
            <summary>
            An internal helper type of the CLR
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.SZGenericArrayEnumerator">
            <summary>
            An internal helper type of the CLR
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.GenericIEnumerator">
            <summary>
            A type definition representing the generic IEnumerator type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.GenericIEnumerable">
            <summary>
            A type definition representing the generic IEnumerable type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.GenericICollection">
            <summary>
            A type definition representing the generic ICollection type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.GenericIList">
            <summary>
            A type definition representing the generic IList type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.GenericIDictionary">
            <summary>
            A type definition representing the generic IDictionary type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.GenericNullable">
            <summary>
            A type definition representing the generic Nullable type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.GenericBox">
            <summary>
            A type definition representing the (internal) generic Box type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.GenericByRefHolder">
            <summary>
            A type definition representing the (internal) generic Box type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.GenericMap">
            <summary>
            A type definition representing the (internal) generic Map type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.SystemTypes.GenericArrayHelper">
            <summary>
            A type definition representing the (internal) generic __ArrayHelper type.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.SystemTypes.SByte">
            <summary>
            A type representing <see cref="T:System.SByte"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.SystemTypes.Byte">
            <summary>
            A type representing <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.VisibilityContext">
            <summary>
            Base class for visibility contexts.
            </summary>
            <remarks>
            The visibility context defines which members are visible. 
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.VisibilityContext.CanSeeType(Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Recurses a type structure to see if visible
            </summary>
            <param name="visibility"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.VisibilityContext.CanSeeMethodDefinition(Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Scans a method signature to see if it all parameters are visibles
            </summary>
            <param name="visibility"></param>
            <param name="methodDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.VisibilityContext.CanSeeMethodParameters(Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Gets a value indicating if the visibility can see all the method parameters,
            including the result type, and generic type parameter constraints
            </summary>
            <param name="visibility"></param>
            <param name="methodDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.VisibilityContext.CanSeeDefinition(Microsoft.ExtendedReflection.Metadata.Interfaces.IMemberDefinitionWithVisibility)">
            <summary>
            Determines whether this instance can see the definition the specified metadata definition.
            </summary>
            <param name="metadataDefinition">The metadata definition.</param>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.VisibilityContext.Private">
            <summary>
            The visibility context that sees everything.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.VisibilityContext.Or(Microsoft.ExtendedReflection.Metadata.VisibilityContext[])">
            <summary>
            Disjunction.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.VisibilityContext.And(Microsoft.ExtendedReflection.Metadata.VisibilityContext[])">
            <summary>
            Conjunction.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.VisibilityContext.Not(Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Negation.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.VisibilityContext.Exported">
            <summary>
            The visibility context that only sees exported members.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.VisibilityContext.Empty">
            <summary>
            The visibility context that is blind.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.VisibilityContext.OfAssembly(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference)">
            <summary>
            Context sees what is visible everyone in the given assembly.
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.VisibilityContext.OfTypeDefinition(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Context sees what is visible in the given type definition.
            </summary>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.VisibilityContext.OfSubtypeDefinition(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference,Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Context sees what is visible in a newly defined subtype of a given type;
            The subtype can life in a designated assembly. If no assembly is given, a fresh assembly
            with a unique name is assumed.
            </summary>
            <param name="declaringAssembly">The declaring assembly.</param>
            <param name="supertypeDefinition">The supertype definition.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.BranchTargetKind">
            <summary>
            Enum to encode branch targets; used by AtBranchTarget callback
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.BranchTargetKind.EntryPoint">
            <summary>
            This branch target label is an entry point, i.e. either the beginning of the method, or an exception handler
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.BranchTargetKind.JoinPoint">
            <summary>
            This point can be reached in two ways through explicit control-flow changes (branches, or falling through)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.BranchTargetKind.BranchTarget">
            <summary>
            This point is the target of a conditional branch (not just fall-through)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.BranchTargetKind.FlagMask">
            <summary>
            Bit mask combining all flags
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.BranchTargetKind.RunningCounterMask">
            <summary>
            Bit mask for the running counter of a branch target label
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.Bitness">
            <summary>
            Bitness of CLR process
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.Bitness.AnyCPU">
            <summary>
            Don't care
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.Bitness.x86">
            <summary>
            Force x86 in x64 environments
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.Bitness.x64">
            <summary>
            Use native x64 in x64 environments
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.Bitness.Unsupported">
            <summary>
            Unsupported platform
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ProfilerInteraction">
            <summary>
            Describes how ER interacts with other registered profilers
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerInteraction.Override">
            <summary>
            Default behavior, overrides any other profiler guid
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerInteraction.Fail">
            <summary>
            Fails
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerInteraction.Dispatch">
            <summary>
            Loads other profilers and delegates calls (experimental)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerInteraction.AllowLoading">
            <summary>
            Allows other profiler to load ER  (experimental)
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.BitnessHelper">
            <summary>
            Helpers for the <see cref="T:Microsoft.ExtendedReflection.Monitoring.Bitness"/> enumeration
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.BitnessHelper.GetIntPtrSize">
            <summary>
            Gets the pointer size
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.BitnessHelper.GetProcessBitness">
            <summary>
            Computes the bitness of the current process
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.BitnessHelper.ToBitness(System.Reflection.ProcessorArchitecture)">
            <summary>
            Converts a <see cref="T:System.Reflection.ProcessorArchitecture"/> value
            to <see cref="T:Microsoft.ExtendedReflection.Monitoring.Bitness"/>.
            </summary>
            <param name="architecture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.BitnessHelper.GetAssemblyBitness(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Gets the assembly bitness.
            </summary>
            <param name="assemblyEx">The assembly ex.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.BitnessHelper.TryGetAssemblyBitness(System.String,Microsoft.ExtendedReflection.Monitoring.Bitness@)">
            <summary>
            Gets the bitness of a .NET assembly without loading the file,
            by reading the PE/CLI headers. Does NOT guarantee that the file is a valid .NET assembly.
            </summary>
            <param name="fileName">Assembly to probe</param>
            <param name="bitness">bitness if successfull</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.BitnessHelper.TryDetectInvalidBitness(System.String,Microsoft.ExtendedReflection.Instrumentation.InstrumentationReflectionResult@)">
            <summary>
            Tries to detect incompatibility betwen the assembly and the current process bitness
            </summary>
            <param name="assemblyFullPath"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ControllerSetUp">
            <summary>
            Helper class to enable monitoring
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerSetUp.SetInstrumentationFlags(System.Collections.Specialized.StringDictionary,Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags)">
            <summary>
            Gets the monitoring instrumentation flags
            </summary>
            <param name="vars"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerSetUp.SetMonitoringEnvironmentVariables(System.Collections.Specialized.StringDictionary,Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags,System.Boolean,System.String,System.String,System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String,System.Boolean,System.String,System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Monitoring.ProfilerInteraction,System.String)">
            <summary>
            Gets the monitoring environment variables.
            </summary>
            <param name="vars">The vars.</param>
            <param name="flags">The instrumentation flags.</param>
            <param name="trackGCAddresses">Whether GC addresses should be monitored.</param>
            <param name="userAssembly">The user assembly.</param>
            <param name="userType">Type of the user.</param>
            <param name="substitutionAssemblies">The substitution assemblies. Must be fully qualified file names.</param>
            <param name="typesToMonitor">The types to monitor.</param>
            <param name="typesToExcludeMonitor">The types to exclude monitor.</param>
            <param name="namespacesToMonitor">The namespaces to monitor.</param>
            <param name="namespacesToExcludeMonitor">The namespaces to exclude monitor.</param>
            <param name="assembliesToMonitor">The assemblies to monitor.</param>
            <param name="assembliesToExcludeMonitor">The assemblies to exclude monitor.</param>
            <param name="typesToProtect">The types to protect</param>
            <param name="typesToInject">The types to inject.</param>
            <param name="namespacesToInject">The namespaces to inject.</param>
            <param name="assembliesToInject">The assemblies to inject.</param>
            <param name="eraseCctorTypes">The list of types for which the static cctor should be skiped</param>
            <param name="eraseFinalizerTypes">The list of type for which finalizer should be skipped</param>
            <param name="clrMonitorLogFileName">Name of the CLR monitor log file.</param>
            <param name="crashOnFailure">if set to if the profiler should just terminate the process on failure instead of opening friendly diagnosis windows; only configurable in DEBUG builds</param>
            <param name="targetClrVersion">The target CLR version.</param>
            <param name="protectAllCctors">Whether all static constructors should be protected (i.e. whether no callbacks should be issued from static constructors)</param>
            <param name="disableMscorlibSupressions">if set to <c>true</c> [disable mscorlib supressions].</param>
            <param name="profilerInteraction">Profiler interaction</param>
            <param name="instrumentAttributeFullName">additional instrumentation attribute full name</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerSetUp.UnsetMonitoringEnvironmentVariables">
            <summary>
            Clears all ExtendedReflection environment variables
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerSetUp.GetMonitorableProcessStartInfo(System.String,System.String[],Microsoft.ExtendedReflection.Instrumentation.InstrumentationSettingsName,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Monitoring.ProfilerInteraction,System.String,System.String,System.String)">
            <summary>
            Gets a monitorable process start info
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
            <param name="instrumentationSettings"></param>
            <param name="_userAssembly"></param>
            <param name="_userType"></param>
            <param name="clrMonitorLogFileName"></param>
            <param name="crashOnFailure"></param>
            <param name="targetClrVersion"></param>
            <param name="protectAllCctors"></param>
            <param name="disableMscorlibSupressions"></param>
            <param name="profilerInteraction"></param>
            <param name="instrumentAttributeFullName"></param>
            <param name="driver"></param>
            <param name="driverArgumentFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerSetUp.GetMonitorableProcessStartInfo(System.String,System.String[],Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags,System.Boolean,System.String,System.String,System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String,System.Boolean,System.String,System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Monitoring.ProfilerInteraction,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:System.Diagnostics.ProcessStartInfo"/> that will enable
            monitoring for the process start with this info.
            </summary>
            <param name="fileName">name of executable for new process</param>
            <param name="arguments">arguments given to entry point of new process: must be quoted appropriately</param>
            <param name="flags">The instrumentation flags.</param>
            <param name="trackGCAddresses">Whether GC addresses should be monitored</param>
            <param name="userAssembly">The user assembly.</param>
            <param name="userType">Type of the user.</param>
            <param name="substitutionAssemblies">The substitution assemblies. Must be fully qualified file names.</param>
            <param name="typesToMonitor">list of type names to monitor in new process; monitors all methods in type</param>
            <param name="typesToExcludeMonitor">The types to exclude monitor.</param>
            <param name="namespacesToMonitor">The namespaces to monitor.</param>
            <param name="namespacesToExcludeMonitor">The namespaces to exclude monitor.</param>
            <param name="assembliesToMonitor">list of assemblies to monitor in new process; monitors all types in assembly</param>
            <param name="assembliesToExcludeMonitor">The assemblies to exclude monitor.</param>
            <param name="typesToProtect">The types to protect</param>
            <param name="typesToInject">The types to inject.</param>
            <param name="namespacesToInject">The namespaces to inject.</param>
            <param name="assembliesToInject">The assemblies to inject.</param>
            <param name="eraseCctorTypes">The list of types for which the static cctor should be skiped. Requires protectAllCctors</param>
            <param name="eraseFinalizerTypes">The list of type for which finalizer should be skipped</param>
            <param name="clrMonitorLogFileName">optional; file name of log file for debug information of the instrumentation framework; may only be functional in debug builds</param>
            <param name="crashOnFailure">if set to if the profiler should just terminate the process on failure instead of opening friendly diagnosis windows; only configurable in DEBUG builds</param>
            <param name="targetClrVersion">optional; name of the desired, clr version, e.g. v2.0.x86chk</param>
            <param name="protectAllCctors">Whether all static constructors should be protected (i.e. whether no callbacks should be issued from static constructors)</param>
            <param name="disableMscorlibSupressions">if set to <c>true</c> [disable mscorlib supressions].</param>
            <param name="profilerInteraction">Profiler interaction</param>
            <param name="instrumentAssemblyFullName">Additional instrumentation attribute</param>
            <param name="driver">The driver.</param>
            <param name="driverArgumentFormat">The driver argument format.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerSetUp.CheckInstrumentation(System.Boolean)">
            <summary>
            Ensures that the process is properly instrumented
            </summary>
            <param name="x64FailSilently"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerSetUp.TryStopIIS(System.IO.TextWriter)">
            <summary>
            Tries to stop the Internet Information Services services.
            </summary>
            <param name="_logger"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerSetUp.GetProcessEnvironment(System.Diagnostics.Process)">
            <summary>
            Reads the environment variables of a given process
            </summary>
            <param name="process"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerSetUp.TryStartIIS(System.IO.TextWriter,System.Collections.Specialized.StringDictionary,System.Int32,System.String,System.Diagnostics.Process@)">
            <summary>
            Tries to start IIS and Asp.NET with the extended reflection
            profiler attached. Returns the IIS process attached.
            </summary>
            <param name="_logger"></param>
            <param name="vars"></param>
            <param name="timeOut">time out in seconds</param>
            <param name="startUrl">action that starts browsing</param>
            <param name="process"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ControllerSetUp.TryStartIIS(System.IO.TextWriter,System.Collections.Specialized.StringDictionary,System.Int32,Microsoft.ExtendedReflection.Utilities.Safe.SafeAction,System.Diagnostics.Process@)">
            <summary>
            Tries to start IIS and Asp.NET with the extended reflection
            profiler attached. Returns the IIS process attached.
            </summary>
            <param name="_logger"></param>
            <param name="vars"></param>
            <param name="timeOut">time out in seconds</param>
            <param name="startAction">action that starts browsing</param>
            <param name="process"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.GCAddress">
            <summary>
            A location tracked by the GC.
            </summary>
            <remarks>
            This is a struct, since we don't want to add any additional memory pressure.
            However, it encapsulates an unmanaged resource, so it is really important to make sure that <see cref="M:Microsoft.ExtendedReflection.Monitoring.GCAddress.Release"/>
            is called eventually.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.GCAddress.FromAddress(System.UIntPtr,Microsoft.ExtendedReflection.Monitoring.GCAddress@)">
            <summary>
            Obtains a GCAddress from an address, if possible.
            </summary>
            <param name="interiorAddress">The address.</param>
            <param name="gcAddress">The gc address.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.GCAddress.FromObject(System.Object,Microsoft.ExtendedReflection.Monitoring.GCAddress@)">
            <summary>
            Obtains a GCAddress from an object, if possible.
            </summary>
            <param name="object">The object.</param>
            <param name="gcAddress">The gc address.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.GCAddress.FromByRef``1(``0@,Microsoft.ExtendedReflection.Monitoring.GCAddress@)">
            <summary>
            Obtains a GCAddress from an address, if possible.
            </summary>
            <param name="interiorAddress">The address.</param>
            <param name="gcAddress">The gc address.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.GCAddress.Equals(Microsoft.ExtendedReflection.Monitoring.GCAddress)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.GCAddress.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.GCAddress.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.GCAddress.op_Equality(Microsoft.ExtendedReflection.Monitoring.GCAddress,Microsoft.ExtendedReflection.Monitoring.GCAddress)">
            <summary>
            
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.GCAddress.op_Inequality(Microsoft.ExtendedReflection.Monitoring.GCAddress,Microsoft.ExtendedReflection.Monitoring.GCAddress)">
            <summary>
            
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.GCAddress.AddRef">
            <summary>
            Increment reference counter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.GCAddress.Release">
            <summary>
            Release object handle
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.GCAddress.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
            <filterPriority>2</filterPriority>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.GCAddress.GetClassName">
            <summary>
            Obtains a description of the class a given object handle. Expensive, not cached. May return null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.GCAddress.Describe">
            <summary>
            Describes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.GCAddress.IsStaticField">
            <summary>
            Checks whether the object handle points to a static field.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.GCAddressSet">
            <summary>
            Set of <see cref="T:Microsoft.ExtendedReflection.Monitoring.GCAddress"/>es. Increases reference count when an added, and releases reference on dispose.
            </summary>
            <remarks>
            We don't implement the finalizer ~GCAddressSet, to keep the live of the GC simple.
            However, that means that we really really must make sure that <see cref="M:Microsoft.ExtendedReflection.Monitoring.GCAddressSet.Dispose"/> is called.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.GCAddressSet.CheckDisposed">
            <summary>
            Checks whether this instance has been disposed.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.IExecutionValueInjector">
            <summary>
            An execution monitor that injects values
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IExecutionValueInjector.ShouldInjectValue``1(Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor,``0,System.Int32)">
            <summary>
            This method is called just before an 'injection' could be done.
            </summary>
            <param name="monitor">The monitor.</param>
            <param name="value">The value.</param>
            <param name="codeLabel">The code label.</param>
            <returns>session object</returns>
            <remarks>
            This method returns a null reference if no injection should be done;
            otherwise returns the session object.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IExecutionValueInjector.InjectValue``1(System.Object,System.Int32)">
            <summary>
            This method queries a new injected value
            </summary>
            <param name="session">The session returned by ShouldInjectValue.</param>
            <param name="popCount">number of elements poped from the stack</param>
            <returns></returns>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.IThreadMonitorFactory">
            <summary>
            A factory for <see cref="T:Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor"/> instances
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.IThreadMonitorFactory.TryCreateThreadMonitor(System.Int32,Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor@)">
            <summary>
            Tries to create the thread monitor.
            </summary>
            <param name="threadID">The thread ID.</param>
            <param name="monitor">The monitor.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags">
            <summary>
            Flags to control the code instrumentation
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.None">
            <summary>
            No instrumentation
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.EnterLeaveMethod">
            <summary>
            'M': EnterMethod / LeaveMethod callbacks 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.UnwindMethod">
            <summary>
            'U': UnwindMethod callbacks
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.ExceptionalBehaviorOfAllInstrumentedInstructions">
            <summary>
            'E': Callbacks for the exeptional behavior of 
            all instrumented instructions (see 'c', 'f', 'o') 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.AllNormalBehaviorOfAllInstrumentedInstructions">
            <summary>
            'F': Callbacks for all normal behaviors of 
            all instrumented instructions (see 'c', 'f', 'o') 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.MethodArguments">
            <summary>
            'A': Passes all arguments of method calls to the monitor 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.MethodReturnArguments">
            <summary>
            'r': Passes all arguments of method calls to the monitor before returning.
            Argument of index -1 is the return value if any
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.ExceptionHandlers">
            <summary>
            'e': Callbacks for all exception handlers 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.JoinPoints">
            <summary>
            'p': Callbacks at all branch targets of the method.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.BrachInstructions">
            <summary>
            'j': Callbacks for all branch instruction 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.MethodCalls">
            <summary>
            'c': Callbacks on all instructions which call methods (or get their addresses) 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.FieldAccess">
            <summary>
            'f': Callbacks on all instructions that access fields (or get their addresses) 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.AllInstructions">
            <summary>
            'o': Callbacks on all other instructions 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnLocalAlloc">
            <summary>
            'L': Special callbacks on localloc 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnThrows">
            <summary>
            'T': Special callbacks on throw 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnBranchInstructions">
            <summary>
            'J': Special callbacks on branch instructions 
            (e.g. whether they fall through or jump to a target) 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnCalling">
            <summary>
            'C': Special callbacks on calling instructions 
            (target method for virtual calls, receiver object for instance calls) 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnFields">
            <summary>
            'v': Special callbacks on field access instructions 
            (receiver object for instance field accesses) 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnMethodResults">
            <summary>
            'R': Special callbacks to pass all results of 
            method calls to the monitor 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnReads">
            <summary>
            'G': Special callbacks to pass all values read 
            from fields or array elements to the monitor 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnWrites">
            <summary>
            'g': Special callbacks to pass all values written
            to fields or array elements to the monitor; only active in combination with 
            <see cref="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnVolatileMemoryAccess"/> and <see cref="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnMemoryAccess"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnUnbox">
            <summary>
            'B': Special callbacks after unbox instructions
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnMemoryAccess">
            <summary>
            'P': Special callbacks on all (potentially shared) memory accesses
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnVolatileMemoryAccess">
            <summary>
            'V': Special callbacks on all memory accesses marked with volatile prefix
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.InjectValueOnLoadConstant">
            <summary>
            'l': inject values on load constant
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.ProfilerEventsQueue">
            <summary>
            'q': whether certain profiler events should be made accessible through a queue
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnNew">
            <summary>
            'N': Special callbacks on newobj/newarr instructions 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.GeneralSubstitutionsOnDelegateBeginEndInvoke">
            <summary>
            'D': General substitutions for calls to the BeginInvoke/EndInvoke methods of delegates
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SwallowFinalizerExceptions">
            <summary>
            'x': Finalizers of non-mscorlib assemblies are instrumented with catch handler that swallows the exception
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.CreateInstrumentationData">
            <summary>
            'i': Create instrumentation data
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.EnableDetours">
            <summary>
            'd': Enable detours
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnArrays">
            <summary>
            'a': Special callbacks to track array indices (before handling the actual array access instructions) 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.CheckMethodReady">
            <summary>
            'm': Enables per-method counter to disable instrumentation selectively at runtime
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.SpecialOnBeforeAnyCall">
            <summary>
            'b': Special callbacks to before any kind of call
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.ThreadMonitorFlags">
            <summary>
            Combination of flags necessary for a thread monitor
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.Most">
            <summary>
            Most instrumentation 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags.All">
            <summary>
            All instrumentation
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlagsHelper">
            <summary>
            Helper class to convert insturmentation flags to string
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlagsHelper.ConvertToString(Microsoft.ExtendedReflection.Monitoring.MonitorInstrumentationFlags)">
            <summary>
            Converts the 'enum' version of the flag to the string
            that the profiler can understand
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ObjectAccessTracker">
            <summary>
            Tracks read and writes in objects
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectAccessTracker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Monitoring.ObjectAccessTracker"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectAccessTracker.ContainsWrite(Microsoft.ExtendedReflection.Monitoring.GCAddress)">
            <summary>
            Determines whether the specified address is written to.
            </summary>
            <param name="address">The address.</param>
            <returns>
            	<c>true</c> if the specified address contains write; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectAccessTracker.ContainsReadOrWrite(Microsoft.ExtendedReflection.Monitoring.GCAddress)">
            <summary>
            Determines whether the specified address is read or written to.
            </summary>
            <param name="address">The address.</param>
            <returns>
            	<c>true</c> if [contains read or write] [the specified address]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectAccessTracker.AddRead(Microsoft.ExtendedReflection.Monitoring.GCAddress)">
            <summary>
            Called when [read].
            </summary>
            <param name="address">The address.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectAccessTracker.AddWrite(Microsoft.ExtendedReflection.Monitoring.GCAddress)">
            <summary>
            Called when [write].
            </summary>
            <param name="address">The address.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectAccessTracker.Add(Microsoft.ExtendedReflection.Monitoring.ObjectAccessTracker)">
            <summary>
            Adds the address from the map.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectAccessTracker.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectAccessTracker.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterPriority>2</filterPriority>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectAccessTracker.CheckDisposed">
            <summary>
            Checks whether this instance has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectAccessTracker.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ObjectTracking">
            <summary>
            Class to access object tracking facilities of unmanaged profiling API.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.GetObjectHandle``1(``0@,System.UIntPtr@,System.UIntPtr@)">
            <summary>
            Gets the object handle; if successful, must call <see cref="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.ReleaseObjectHandle(System.UIntPtr)"/>.
            </summary>
            <param name="interiorPointer">The interior pointer.</param>
            <param name="objectHandle">The object handle.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.GetCurrentRawAddress``1(``0@)">
            <summary>
            Obtains the raw address from a managed interior pointer.
            WARNING: The address will be invalid once the next garbage collection occurs,
            which might be before the value can be inspected.
            </summary>
            <param name="interiorPointer">The interior pointer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.GetObjectHandle(System.UIntPtr,System.UIntPtr@,System.UIntPtr@)">
            <summary>
            Gets the object handle; if successful, must call <see cref="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.ReleaseObjectHandle(System.UIntPtr)"/>.
            </summary>
            <param name="interiorPointer">The interior pointer.</param>
            <param name="objectHandle">The object handle.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.AddObjectHandleRef(System.UIntPtr)">
            <summary>
            Increases the reference counter of the object handle; returns new reference count.
            </summary>
            <param name="objectHandle">The object handle.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.IsStaticField(System.UIntPtr)">
            <summary>
            Checks whether the object handle points to a static field.
            </summary>
            <param name="objectHandle">The object handle.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.TryGetClassHandle(System.UIntPtr,System.UIntPtr@)">
            <summary>
            Tries to the get the class handle of an object handle.
            </summary>
            <param name="objectHandle">The object handle.</param>
            <param name="classHandle">The class handle.</param>
            <returns></returns>
            <remarks>
            This method may ail then the (valid) object handle represents a static field.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.GetClassName(System.UIntPtr)">
            <summary>
            Obtains a description of the class given by its class handle.
            </summary>
            <param name="classHandle">The class handle.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.ReleaseObjectHandle(System.UIntPtr)">
            <summary>
            Releases the object handle.
            </summary>
            <param name="objectHandle">The object handle.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.ReleaseObjectHandles(System.UIntPtr[])">
            <summary>
            Releases the object handles.
            </summary>
            <param name="objectHandles">The object handles.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.StopMonitoring">
            <summary>
            Stops all monitoring.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.TryGetAllObjectHandles(System.UIntPtr[]@)">
            <summary>
            Tries to get all object handles.
            </summary>
            <param name="objectHandles">The object handles.</param>
            <remarks>
            Some object handles may be <see cref="F:System.UIntPtr.Zero"/>.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.SuppressThreadObjectTracking">
            <summary>
            Suppresses thread object tracking in current thread.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTracking.RestoreThreadObjectTracking">
            <summary>
            Restores object tracking in current thread.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ObjectTrackingSnapshot">
            <summary>
            A snapshot of the current object tracking state
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTrackingSnapshot.Create">
            <summary>
            Tries to create a snapshot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTrackingSnapshot.GetClassCounts">
            <summary>
            Determines how many instances of each class exist in this snapshot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTrackingSnapshot.CheckDisposed">
            <summary>
            Checks whether this instance has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTrackingSnapshot.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ObjectTrackingSnapshot.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Microsoft.ExtendedReflection.Monitoring.ObjectTrackingSnapshot"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ProfilerEventKind">
            <summary>
            Kinds of profiler events
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventKind.ThreadCreated">
            <summary>
            Thread created
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventKind.ThreadDestroyed">
            <summary>
            Thread destroyed
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventKind.ThreadAssignedToOSThread">
            <summary>
            Thread assigned to OS Thread
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventKind.GarbageCollection">
            <summary>
            Garbage collection
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadCreated">
            <summary>
            Profiler event
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadCreated.Kind">
            <summary>
            Kind
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadCreated.Size">
            <summary>
            Size of this struct
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadCreated.ManagedThreadId">
            <summary>
            Managed thread id
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadCreated.FromHandle(System.UIntPtr)">
            <summary>
            Creates an event from a handle.
            </summary>
            <remarks>Call <see cref="M:Microsoft.ExtendedReflection.Monitoring.ProfilerEventQueue.FreeProfilerEvent(System.UIntPtr)"/> to release memory of this instance</remarks>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadDestroyed">
            <summary>
            Profiler event
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadDestroyed.Kind">
            <summary>
            Kind
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadDestroyed.Size">
            <summary>
            Profiler event
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadDestroyed.ManagedThreadId">
            <summary>
            Managed thread id
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadDestroyed.FromHandle(System.UIntPtr)">
            <summary>
            Creates an event from a handle.
            </summary>
            <remarks>Call <see cref="M:Microsoft.ExtendedReflection.Monitoring.ProfilerEventQueue.FreeProfilerEvent(System.UIntPtr)"/> to release memory of this instance</remarks>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadAssignedToOSThread">
            <summary>
            Profiler event
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadAssignedToOSThread.Kind">
            <summary>
            Kind
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadAssignedToOSThread.Size">
            <summary>
            Profiler event
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadAssignedToOSThread.ManagedThreadId">
            <summary>
            Managed thread id
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadAssignedToOSThread.OsThreadId">
            <summary>
            OS thread id
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ProfilerEventThreadAssignedToOSThread.FromHandle(System.UIntPtr)">
            <summary>
            Creates an event from a handle.
            </summary>
            <remarks>Call <see cref="M:Microsoft.ExtendedReflection.Monitoring.ProfilerEventQueue.FreeProfilerEvent(System.UIntPtr)"/> to release memory of this instance</remarks>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ProfilerEventGarbageCollectionHeaps">
            <summary>
            Flags indicating which heaps were garbage collected.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventGarbageCollectionHeaps.Generation0">
            <summary>
            Generation 0
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventGarbageCollectionHeaps.Generation1">
            <summary>
            Generation 1
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventGarbageCollectionHeaps.Generation2">
            <summary>
            Generation 2
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventGarbageCollectionHeaps.LargeObjectHeap">
            <summary>
            Large object heap
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ProfilerEventGarbageCollectionReason">
            <summary>
            Reason for a garbage collection 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventGarbageCollectionReason.Induced">
            <summary>
            Induced
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventGarbageCollectionReason.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ProfilerEventGarbageCollection">
            <summary>
            Profiler event
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventGarbageCollection.Kind">
            <summary>
            Kind
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventGarbageCollection.Size">
            <summary>
            Profiler event
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventGarbageCollection.Heaps">
            <summary>
            Which heaps were garbage collected
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ProfilerEventGarbageCollection.Reason">
            <summary>
            Reason for garbage collection
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ProfilerEventGarbageCollection.FromHandle(System.UIntPtr)">
            <summary>
            Creates an event from a handle.
            </summary>
            <remarks>Call <see cref="M:Microsoft.ExtendedReflection.Monitoring.ProfilerEventQueue.FreeProfilerEvent(System.UIntPtr)"/> to release memory of this instance</remarks>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ProfilerEventQueue">
            <summary>
            Helper class to digest profiler events
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ProfilerEventQueue.TryDequeueProfilerEvent(Microsoft.ExtendedReflection.Monitoring.ProfilerEventKind@,System.UIntPtr@)">
            <summary>
            Tries to dequeue a profiler event.
            </summary>
            <param name="kind">The kind.</param>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ProfilerEventQueue.FreeProfilerEvent(System.UIntPtr)">
            <summary>
            Frees the profiler event.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.ProfilerEventQueue.ProfilerEventAvailableEvent">
            <summary>
            Gets the profiler event available event.
            </summary>
            <value>The profiler event available event.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionValueInjectorEmpty">
            <summary>
            A disabled implementation of <see cref="T:Microsoft.ExtendedReflection.Monitoring.IExecutionValueInjector"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionValueInjectorEmpty.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionValueInjectorEmpty.#ctor(System.Int32)">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionValueInjectorEmpty.ShouldInjectValue``1(Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor,``0,System.Int32)">
            <summary>
            This method is called just before an 'injection' could be done.
            </summary>
            <param name="monitor">The monitor.</param>
            <param name="value">The value.</param>
            <param name="codeLabel">The code label.</param>
            <returns>null</returns>
            <remarks>
            This method always return null.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionValueInjectorEmpty.InjectValue``1(System.Object,System.Int32)">
            <summary>
            This method queries a new injected value
            </summary>
            <param name="session">The session returned by ShouldInjectValue.</param>
            <param name="popCount">number of elements poped from the stack</param>
            <returns></returns>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Monitoring.ThreadExecutionValueInjectorEmpty.ThreadId">
            <summary>
            Gets the thread id.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Metadata.CodeLocation">
            <summary>
            Identifier of code locations 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.CodeLocation.Method">
            <summary>
            The method; null means an unknown method
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Metadata.CodeLocation.Offset">
            <summary>
            Offset within method; negative number means an unknown offset
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CodeLocation.#ctor(Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Metadata.CodeLocation"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="offset">The offset within the method.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CodeLocation.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CodeLocation.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CodeLocation.Equals(Microsoft.ExtendedReflection.Metadata.CodeLocation)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CodeLocation.op_Equality(Microsoft.ExtendedReflection.Metadata.CodeLocation,Microsoft.ExtendedReflection.Metadata.CodeLocation)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CodeLocation.op_Inequality(Microsoft.ExtendedReflection.Metadata.CodeLocation,Microsoft.ExtendedReflection.Metadata.CodeLocation)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Metadata.CodeLocation.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Metadata.CodeLocation.SerializableName">
            <summary>
            Gets the serializable name of the code location.
            </summary>
            <value>The name of the serializable.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.Domains.DomainProvider">
            <summary>
            Default domain provider.
            </summary>
            <remarks>
            This domain provider doesn't provide anything. 
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider">
            <summary>
            Interface to obtain domains.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider.GetAllMatchingTypes(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Retrieves a list of all types compatible with the given type.
            </summary>
            <remarks>
            The method must return all types that match which can be returned by any
            of the more specific finite value domains.
            </remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider.GetTypeWeights(Microsoft.ExtendedReflection.Collections.IFiniteSet{Microsoft.ExtendedReflection.Metadata.TypeEx})">
            <summary>
            Gets a comparable that orders types
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider.IsValidMatchingType(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Checks if a type can be added to the list of matching types.
            </summary>
            <remarks>
            Chcks if Pex knows how to construct an instance of this type.
            </remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider.ValidMatchingTypeDesired(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Notifies domain provider that it would have been beneficial if the specified
            type would have been a matching type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider.IsExplorable(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Whether the only way to create an instance of this type is by calling a creation method
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider.IsCreatable(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Whether instances of this type can be created freely.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider.TryGetObject(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain an object for a given type.
            </summary>
            <param name="type"></param>
            <param name="index">non-negative index</param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider.TryGetNewObject(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to retrieve a new object for a given type.
            </summary>
            <param name="type"></param>
            <param name="index"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider.TryGetSymbolInvariant(Microsoft.ExtendedReflection.Interpretation.ISymbolIdWithType,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get a symbol invariant.
            </summary>
            <param name="symbolId">The symbol id.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider.TryGetInvariant(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an invariant for a value type or class.
            </summary>
            <param name="valueTypeOrClass">The value type or class.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider.TryGetInstanceFieldInvariant(Microsoft.ExtendedReflection.Metadata.Field,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an instance field invariant.
            </summary>
            <param name="instanceField">The instance field.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider.TryGetArrayElementInvariant(Microsoft.ExtendedReflection.Metadata.Layout,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an array element invariant.
            </summary>
            <param name="elementLayout">The element layout.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.IDomainProvider.TryGetObjectPropertyInvariant(Microsoft.ExtendedReflection.Interpretation.ObjectProperty,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an object property invariant.
            </summary>
            <param name="objectProperty">The object property.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.DomainProvider.TryGetNewObject(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to retrieve a new object for a given type.
            </summary>
            <param name="type"></param>
            <param name="index"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.DomainProvider.ValidMatchingTypeDesired(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Notifies domain provider that it would have been beneficial if the specified
            type would have been a matching type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.DomainProvider.TryGetObject(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain an object for a given type.
            </summary>
            <param name="type"></param>
            <param name="index">non-negative index</param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.DomainProvider.GetAllMatchingTypes(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets all matching types.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.DomainProvider.IsExplorable(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether the specified type is explorable.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.DomainProvider.IsCreatable(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether the specified type is creatable.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.DomainProvider.TryGetInvariant(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an invariant for a value type or class.
            </summary>
            <param name="valueTypeOrClass">The value type or class.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.DomainProvider.TryGetSymbolInvariant(Microsoft.ExtendedReflection.Interpretation.ISymbolIdWithType,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get a symbol invariant.
            </summary>
            <param name="symbolId">The symbol id.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.DomainProvider.TryGetInstanceFieldInvariant(Microsoft.ExtendedReflection.Metadata.Field,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an instance field invariant.
            </summary>
            <param name="instanceField">The instance field.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.DomainProvider.TryGetArrayElementInvariant(Microsoft.ExtendedReflection.Metadata.Layout,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an array element invariant.
            </summary>
            <param name="elementLayout">The elements layout.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.DomainProvider.TryGetObjectPropertyInvariant(Microsoft.ExtendedReflection.Interpretation.ObjectProperty,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an object property invariant.
            </summary>
            <param name="objectProperty">The object property.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.DomainProvider.IsValidMatchingType(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Checks if a type can be added to the list of matching types.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.Domains.DomainProvider.GetTypeWeights(Microsoft.ExtendedReflection.Collections.IFiniteSet{Microsoft.ExtendedReflection.Metadata.TypeEx})">
            <summary>
            Gets a comparable that orders types
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol">
            <summary>
            An additional root symbol for the constraint solver, 
            produced at a particular execution node
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol.Segment">
            <summary>
            Gets the segment in which the symbol belongs
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol.SymbolId">
            <summary>
            Symbol id
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol.#ctor(System.Int32,Microsoft.ExtendedReflection.Interpretation.ISymbolIdWithType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol"/> class.
            </summary>
            <param name="segment">The segment.</param>
            <param name="symbolId">The symbol id.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol.Equals(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol.op_Equality(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol,Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol)">
            <summary>
            Checks whether left is equal to right.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol.op_Inequality(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol,Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol)">
            <summary>
            Checks whether left is unequal to right.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedEventArgs">
            <summary>
            Event args used when an execution tree node got exhausted.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedEventArgs.ExecutionNode">
            <summary>
            Execution node
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedEventArgs.ExhaustedReason">
            <summary>
            Reason why the node got exhausted
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedEventArgs.#ctor(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="executionNode"></param>
            <param name="exhaustedReason"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason">
            <summary>
            This enumeration characterizes the rason why an execution node will not participate in the search anymore.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason.NotYetExhausted">
            <summary>
            Node is still involved in search
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason.Leaf">
            <summary>
            This is the final node of an execution path.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason.SuccessorsComplete">
            <summary>
            All successors found
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason.NoMoreSuccessorsExist">
            <summary>
            The constraint solver determined that there are no more successors.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason.NoMoreSuccessorsFoundBecauseOfTimeOut">
            <summary>
            The constraint solver gave up.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason.NoMoreSuccessorsFoundBecauseOfOutOfMemory">
            <summary>
            The constraint solver gave up.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason.NoMoreSuccessorsFoundBecauseOfOther">
            <summary>
            The constraint solver gave up.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason.AbandonedBecauseOfAssumptionViolation">
            <summary>
            This node was abandoned. 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason.AbandonedBecauseOfBoundsExceeded">
            <summary>
            This node was abandoned. 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason.AbandonedBecauseOfDuplicatePath">
            <summary>
            This node was abandoned. 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason.AbandonedBecauseOfOther">
            <summary>
            This node was abandoned. 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason.Other">
            <summary>
            Other reason
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeExhaustedReason._End">
            <summary>
            One after last entry
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeSubtreeExhaustedEventArgs">
            <summary>
            Event args used when an execution tree node got exhausted.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeSubtreeExhaustedEventArgs.ExecutionNode">
            <summary>
            Execution node
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeSubtreeExhaustedEventArgs.#ctor(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="executionNode"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeSuccessorAddedEventArgs">
            <summary>
            Event args used when an execution node gets a new successor
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeSuccessorAddedEventArgs.ExecutionNode">
            <summary>
            The node which got a new successor node
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeSuccessorAddedEventArgs.SuccessorExecutionNode">
            <summary>
            The newly added successor node
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeSuccessorAddedEventArgs.#ctor(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Creates an instance of this type
            </summary>
            <param name="executionNode"></param>
            <param name="successorExecutionNode"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeHelper">
            <summary>
            Static helper methods for execution nodes
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeHelper.AttachOnSubtreeExhaustedBySearchHandler(Microsoft.ExtendedReflection.Logging.IEventLog,Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,System.EventHandler{Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ExecutionNodeSubtreeExhaustedEventArgs})">
            <summary>
            Attach an event handler to a node that gets triggered when the entire subtree under this node gets exhausted (including this node).
            </summary>
            <remarks>
            This handler cannot be removed.
            </remarks>
            <param name="log">log</param>
            <param name="executionNode"></param>
            <param name="eventHandler"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionSignature">
            <summary>
            The signature of an execution
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionSignature.ObjectCreationTimes">
            <summary>
            Gets a mapping of objects to their creation time &gt; 0; 
            the time 0 indicates that the object is available in the initial state.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionSignature.ParameterSymbols">
            <summary>
            Gets the parameter symbols.
            </summary>
            <value>The parameter symbols.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionSignature.ByRefHolderObjectIds">
            <summary>
            Gets the by-ref-holder object ids
            </summary>
            <value>The by-ref-holder object ids</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionSignature.PreparedTypeIndices">
            <summary>
            Gets the global indices of types that were already prepared
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionSignature.Distance">
            <summary>
            Gets the distance from the root execution signature.
            </summary>
            <value>The distance.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ISequenceId">
            <summary>
            Identifier to mark a point in the execution
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ISequenceId.IsRoot">
            <summary>
            Whether this is the original id that spawned everything
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ParameterRootSymbol">
            <summary>
            A root symbol of a parameter of an explored method.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ParameterRootSymbol.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ParameterRootSymbol.SequenceId">
            <summary>
            Sequence id
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ParameterRootSymbol.SymbolId">
            <summary>
            Symbol id
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ParameterRootSymbol.#ctor(System.Int32,Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ISequenceId,Microsoft.ExtendedReflection.Interpretation.ISymbolIdFromParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ParameterRootSymbol"/> class.
            </summary>
            <param name="time">The time.</param>
            <param name="sequenceId">The sequence id.</param>
            <param name="symbolId">The symbol id.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.PathConditionInfo">
            <summary>
            Information about the path condition.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.PathConditionInfo.Conjuncts">
            <summary>
            Conjuncts (may be flipped)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.PathConditionInfo.Invariants">
            <summary>
            Conjuncts (flipping is pointless)
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.PathConditionInfo.AdditionalRootSymbols">
            <summary>
            Choices
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.PathConditionInfo.MinimizationRequests">
            <summary>
            I4/I8 values that should be minimized (involved in memory allocations or loop bounds)
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.PathConditionInfo.#ctor(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Interpretation.Term},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Interpretation.Term},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Interpretation.Term})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.PathConditionInfo"/> class.
            </summary>
            <param name="conjuncts">The conjuncts.</param>
            <param name="invariants">The invariants.</param>
            <param name="additionalRootSymbols">The additional root symbols.</param>
            <param name="minimizationRequests">The minimization requests.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.IPriorityBag`1">
            <summary>
            A priorithized bag
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.IPriorityBag`1.Add(`0,System.Int32)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="count">The count.</param>
            <returns>new total count of that value</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.IPriorityBag`1.Contains(`0)">
            <summary>
            Determines whether the bag contains the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.IPriorityBag`1.RemoveAll(`0)">
            <summary>
            Removes all instance of value in the bag
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>old count</remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.IPriorityBag`1.TryGetLeastFrequent(System.Random,`0@)">
            <summary>
            Tries to choose a location that was chosen the least number of times so far.
            </summary>
            <param name="random">Resolves choices within same levels</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.IPriorityBag`1.GetFrequency(`0)">
            <summary>
            Gets the frequency indicating how often a value was chosen.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.IPriorityBag`1.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the specified state of the bag
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.IPriorityBag`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafePriorityBag`1">
            <summary>
            A safe prioritized bag
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Collections.SafePriorityBag`1.countedObjects">
            <summary>
            (n, {cl1,cl2}) is in countedObjects iff nodes corresponding to each of the objects
            cl1 and cl2 have been picked by the frontier n number of times
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Collections.SafePriorityBag`1.currentCounts">
            <summary>
            maps an object to the number of times a node corresponding to it has been picked by the frontier
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafePriorityBag`1.Add(`0,System.Int32)">
            <summary>
            if the object is in this bag, it increments the number of times the object has been picked by count
            if it is not there, it adds to the bag and marks as being picked count no. times
            </summary>
            <param name="value"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafePriorityBag`1.Contains(`0)">
            <summary>
            Determines whether the bag contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafePriorityBag`1.RemoveAll(`0)">
            <summary>
            Removes all instance of value in the bag
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafePriorityBag`1.TryGetLeastFrequent(System.Random,`0@)">
            <summary>
            systematically returns one from the set of objects corresponding to the 
            smallest key of the countedObjects (least frequently picked so far).
            </summary>
            <param name="random">resolves choice within same levels</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafePriorityBag`1.GetFrequency(`0)">
            <summary>
            Gets the frequency.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafePriorityBag`1.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the specified state of the bag
            </summary>
            <param name="textWriter">The text writer.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafePriorityBag`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.IInputModelProvider">
            <summary>
            A provider of an input model.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.IInputModelProvider.InputModel">
            <summary>
            Gets the input model.
            </summary>
            <value>The input model.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.InputModel">
            <summary>
            A model with additional information about the origin of the model
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.InputModel.ExecutionSignature">
            <summary>
            The execution signature for which the input model was generated.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.InputModel.AdditionalRootSymbols">
            <summary>
            Additional root symbols that are available in this model.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.InputModel.MinimizationRequests">
            <summary>
            Minimization requests
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.InputModel.Model">
            <summary>
            The actual model
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.InputModel.Name">
            <summary>
            Name of the input model
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.InputModel.IsCustomInput">
            <summary>
            A value indicating if the model was mined from an existing suite
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.InputModel.TryGetCustomInputMethodDefinition(Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to get the method from which the test was mined from.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.InputModel.IsGenerated">
            <summary>
            A value indicating if the model was generated by Pex
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.InputModel.#ctor(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionSignature,System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.AdditionalRootSymbol},System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Interpretation.Term},Microsoft.ExtendedReflection.Reasoning.IModel,System.String,Microsoft.ExtendedReflection.Interpretation.Term[],Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,Microsoft.ExtendedReflection.Interpretation.Term,System.Boolean,Microsoft.ExtendedReflection.Metadata.Method,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Reasoning.InputModel"/> class.
            </summary>
            <param name="executionSignature">The executionSignature.</param>
            <param name="additionalRootSymbols">The additional root symbols.</param>
            <param name="minimizationRequests">The minimization requests.</param>
            <param name="model">The model.</param>
            <param name="name">The name.</param>
            <param name="feasiblePrefix">The feasible prefix.</param>
            <param name="parentOfTarget">The parent of target.</param>
            <param name="suffix">The suffix.</param>
            <param name="isCustomInput">a value indicating if the model was given as an input</param>
            <param name="_customInputMethod">the method from which the input was mined from (optional)</param>
            <param name="isGenerated">a value indicating if the model was generated by Pex</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.InputModel.Constraints">
            <summary>
            The constraints that generated this model.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.InputModel.ParentOfTarget">
            <summary>
            Gets the parent of target.
            </summary>
            <value>The parent of target.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ISolverOptions">
            <summary>
            Options for solver
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ISolverOptions.TryGetPointerSpace(Microsoft.ExtendedReflection.Utilities.VirtualMemory@)">
            <summary>
            Tries to get a region of memory that constitutes valid non-null pointers.
            </summary>
            <param name="vm">The vm.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ISolverOptions.ClearPointerSpace">
            <summary>
            Resets the content of the pointer space buffer
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ISolverOptions.ValidatePointerSpace">
            <summary>
            Validates pointer space if possible.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ISolverOptions.MaxDuration">
            <summary>
            How long each query may take
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.ISolverOptions.MemoryLimit">
            <summary>
            How much memory may be used for each query, in bytes.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ISolverFactory">
            <summary>
            Factory of a solver
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ISolverFactory.CreateSolver(Microsoft.ExtendedReflection.Reasoning.ISolverStatistics)">
            <summary>
            Creates the solver.
            </summary>
            <param name="statistics">A container for statistics, if any.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ISolverFactory.CreateStatistics">
            <summary>
            Creates a container for statistics.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.ISolverStatistics">
            <summary>
            Statistics of a solver
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Reasoning.ISolverStatistics.Dump(Microsoft.ExtendedReflection.Logging.DumpTreeWriter)">
            <summary>
            Dumps the statistics to the specified text writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.SolverOptions">
            <summary>
            Default implementation of <see cref="T:Microsoft.ExtendedReflection.Reasoning.ISolverOptions"/> interface
            </summary>
            <remarks>
            This implementation uses some arbitrary default, which can be overriden.
            </remarks>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.SolverOptions.MaxDuration">
            <summary>
            How long each query may take
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reasoning.SolverOptions.MemoryLimit">
            <summary>
            How much memory may be used for each query, in bytes.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reasoning.TryGetModelResult">
            <summary>
            Result of a model query.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.TryGetModelResult.None">
            <summary>
            No attempt was undertaken yet to obtain a model
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.TryGetModelResult.Success">
            <summary>
            Model successfully obtained.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.TryGetModelResult.Timeout">
            <summary>
            Model couldn't be computed in given time.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.TryGetModelResult.OutOfMemory">
            <summary>
            Model couldn't be computed with available memory.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.TryGetModelResult.NoModelFound">
            <summary>
            Abilities of constraint solver are not sufficient to find more, nor to prove that none exists
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.TryGetModelResult.NoModelExists">
            <summary>
            There is no model.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Reasoning.TryGetModelResult.Redo">
            <summary>
            Please redo the exact same model computation
            (possibly so that this time the constraint solver might log more information to diagnose an error)
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Remote.IRemoteClientConnector">
            <summary>
            A client side remote connection point
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.IRemoteClientConnector.TryGetService(System.Type,Microsoft.ExtendedReflection.ComponentModel.IService@)">
            <summary>
            Tries to get a service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceObject">The service object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.IRemoteClientConnector.Cancel">
            <summary>
            Cancels this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.IRemoteClientConnector.NextExploration">
            <summary>
            Fast forward
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Remote.IRemoteServerConnector">
            <summary>
            A remote server connection point
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.IRemoteServerConnector.TryGetService(System.Type,Microsoft.ExtendedReflection.ComponentModel.IService@)">
            <summary>
            Tries to get a service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceObject">The service object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.IRemoteServerConnector.Reset">
            <summary>
            Resets the wait event.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.IRemoteServerConnector.Ping">
            <summary>
            Pings the server
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.IRemoteServerConnector.ClientReady">
            <summary>
            the client notifies the server that it's remoting server is 
            ready and can be accessed
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.IRemoteServerConnector.WaitUntilReady">
            <summary>
            Waits the until ready.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Remote.IRemoteServerConnector.IsReady">
            <summary>
            Gets a value indicating whether this instance is ready.
            </summary>
            <value><c>true</c> if this instance is ready; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Remote.RemoteClient">
            <summary>
            A remoting client port
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteClient.#ctor(Microsoft.ExtendedReflection.ComponentModel.IServiceProvider)">
            <summary>
            Initializes server instance of connector
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteClient.UnregisterServer(System.Runtime.Remoting.Channels.IChannel)">
            <summary>
            Unregisters the server.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteClient.TryRegisterServer(System.String,Microsoft.ExtendedReflection.ComponentModel.IServiceProvider,System.Runtime.Remoting.Channels.IChannel@)">
            <summary>
            Tries to register the server.
            </summary>
            <param name="channelName">Name of the channel.</param>
            <param name="serviceProvider">The service provider.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteClient.GetConnector(System.String)">
            <summary>
            Gets the connector.
            </summary>
            <param name="channelName">Name of the channel.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Remote.RemoteClient.CancelManager">
            <summary>
            Gets the cancel manager.
            </summary>
            <value>The cancel manager.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Remote.RemoteClient.Instance">
            <summary>
            Gets the static log instance
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Remote.RemoteClient.Connector">
            <summary>
            </summary>
            <remarks>
            DO NOT ADD FIELDS TO THIS CLASS
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Remote.RemoteServer">
            <summary>
            A remote 'remoting' server
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteServer.#ctor(Microsoft.ExtendedReflection.ComponentModel.IServiceProvider)">
            <summary>
            Initializes server instance of connector
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteServer.WaitReady">
            <summary>
            Waits until ready.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteServer.Reset">
            <summary>
            Resets the ready event.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteServer.TryGetService(System.Type,Microsoft.ExtendedReflection.ComponentModel.IService@)">
            <summary>
            Tries to get the service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceObject">The service object.</param>
            <returns></returns>
            <remarks>
            Do not use <see cref="T:Microsoft.ExtendedReflection.Metadata.TypeEx"/> for this method, 
            it will break remoting.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteServer.ResetInstance">
            <summary>
            Resets the remote connector if any.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteServer.WaitTillClientReady">
            <summary>
            Waits till the client notifies the server
            that it has started it's serialization channel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteServer.WaitTillServerReady">
            <summary>
            Waits till the instance is ready
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteServer.UnregisterServer(System.Runtime.Remoting.Channels.IChannel)">
            <summary>
            Unregisters the server.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteServer.TryRegisterServer(System.String,Microsoft.ExtendedReflection.ComponentModel.IServiceProvider,System.Runtime.Remoting.Channels.IChannel@)">
            <summary>
            Tries to register the server.
            </summary>
            <param name="channelName">Name of the channel.</param>
            <param name="serviceProvider">The service provider.</param>
            <param name="channel">The channel.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteServer.GetConnector(System.String)">
            <summary>
            Gets the connector.
            </summary>
            <param name="channelName">Name of the channel.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Remote.RemoteServer.Instance">
            <summary>
            Gets the static remote server instance
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Remote.RemoteServer.Connector">
            <summary>
            </summary>
            <remarks>
            DO NOT ADD FIELDS TO THIS CLASS
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Remote.RemoteServer.Connector.#ctor">
            <summary>
            Default .ctor
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Reports.IReportManager">
            <summary>
            The report manager
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reports.IReportManager.RelativeRootPath">
            <summary>
            Gets the relative root path
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reports.IReportManager.RootPath">
            <summary>
            Gets the root path of reports
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reports.IReportManager.ReportName">
            <summary>
            Gets the name of this report
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reports.IReportManager.ReportPath">
            <summary>
            Gets the report path.
            </summary>
            <value>The report path.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Reports.IReportManager.ReportPathUri">
            <summary>
            Gets the report path URI.
            </summary>
            <value>The report path URI.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.SourceControl.EmptySourceControl">
            <summary>
            Default source control implementation, when no
            source control is available
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.SourceControl.ISourceControl">
            <summary>
            A source control system
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.SourceControl.ISourceControl.TryAddOrCheckoutFile(System.String)">
            <summary>
            Tries to add the new file or checkout an existing file to the source control
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.SourceControl.ISourceControl.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:Microsoft.ExtendedReflection.SourceControl.EmptySourceControl.Instance">
            <summary>
            Gets the default instance of this source control
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.SourceControl.ISourceControlManager">
            <summary>
            A <see cref="T:Microsoft.ExtendedReflection.SourceControl.ISourceControl"/> manager
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.SourceControl.ISourceControlManager.AddSourceControl(Microsoft.ExtendedReflection.SourceControl.ISourceControl)">
            <summary>
            Adds the source control.
            </summary>
            <param name="sourceControl">The source control.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.SourceControl.ISourceControlManager.TryGetSourceControl(System.String,Microsoft.ExtendedReflection.SourceControl.ISourceControl@)">
            <summary>
            Tries to get the current source control.
            </summary>
            <param name="name">The name.</param>
            <param name="sourceControl">The source control.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.SourceControl.ISourceControlManager.SourceControls">
            <summary>
            Gets the source controls.
            </summary>
            <value>The source controls.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.SourceControl.ISourceControlManager.CurrentSourceControl">
            <summary>
            Gets or sets the current source control.
            </summary>
            <value>The current source control.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.SourceControl.SourceControlManager">
            <summary>
            Source control manager
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.SourceControl.SourceControlManager.AddSourceControl(Microsoft.ExtendedReflection.SourceControl.ISourceControl)">
            <summary>
            Adds the source control.
            </summary>
            <param name="sourceControl">The source control.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.SourceControl.SourceControlManager.TryGetSourceControl(System.String,Microsoft.ExtendedReflection.SourceControl.ISourceControl@)">
            <summary>
            Tries to query the source control.
            </summary>
            <param name="name">The name.</param>
            <param name="sourceControl">The source control.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.SourceControl.SourceControlManager.SourceControls">
            <summary>
            Gets the source controls.
            </summary>
            <value>The source controls.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.SourceControl.SourceControlManager.CurrentSourceControl">
            <summary>
            Gets or sets the current source control.
            </summary>
            <value>The current source control.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.ISymbolManagerOptions">
            <summary>
            Symbol manager options
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.ISymbolManagerOptions.SourceSearchPath">
            <summary>
            Gets the source search path.
            </summary>
            <value>The source search path.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.ISymbolManagerOptions.SymbolSearchPath">
            <summary>
            Gets the symbol search path.
            </summary>
            <value>The symbol search path.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.SourceManager">
            <summary>
            Default implementation of <see cref="T:Microsoft.ExtendedReflection.Symbols.ISourceManager"/>
            </summary>
            <remarks>
            This component realizes a global document cache,
            that gets purged occasionally.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SourceManager.TryGetSource(System.String,Microsoft.ExtendedReflection.Symbols.ISourceDocument@)">
            <summary>
            Tries to get the source text for a given url.
            </summary>
            <param name="url">The URL.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.SymbolManagerOptions">
            <summary>
            Options of <see cref="T:Microsoft.ExtendedReflection.Symbols.ISymbolManager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManagerOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Symbols.SymbolManagerOptions"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolManagerOptions.Initialize">
            <summary>
            Loads the symbol options from the environment and command line options
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.SymbolManagerOptions.SourceSearchPath">
            <summary>
            Gets the source search path.
            </summary>
            <value>The source search path.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.SymbolManagerOptions.SymbolSearchPath">
            <summary>
            Gets the symbol search path.
            </summary>
            <value>The symbol search path.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.SymbolTopFrameContext">
            <summary>
            Sets a Symbol.TopFrame inside the context
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolTopFrameContext.Create(Microsoft.ExtendedReflection.Symbols.ISymbolManager,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Creates the specified symbols.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="methodDefinition">The method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolTopFrameContext.Create(Microsoft.ExtendedReflection.Symbols.ISymbolManager)">
            <summary>
            Creates the specified symbols.
            </summary>
            <param name="symbols">The symbols.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.SymbolTopFrameContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.AssemblyCache">
            <summary>
            Managed API to query the GAC
            </summary>
            <remarks>
            See http://blogs.msdn.com/junfeng/articles/229649.aspx
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyCache.TryQueryAssemblyInfo(System.String,System.Boolean,System.String@)">
            <summary>
            Queries the GAC api to resolve the assembly location from an assembly full name
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="approximate">Whether a similar assembly may be picked if there is no exact match.</param>
            <param name="location">The location.</param>
            <returns></returns>
            <remarks>
            A.k.a, for v1.0/v1.1 assemblies, it should be "name, Version=xx, Culture=xx, PublicKeyToken=xx".
            For v2.0 assemblies, it should be "name, Version=xx, Culture=xx, PublicKeyToken=xx, ProcessorArchitecture=xx".
            If assemblyName is not fully specified, a random matching assembly will be queried.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.AssemblyResolver">
            <summary>
            Default assembly resolver
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.AssemblyResolver"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyResolver.AddAssemblyPath(System.String,System.String)">
            <summary>
            Maps an assembly full name to a rooted path
            </summary>
            <param name="assemblyFullName"></param>
            <param name="assemblyFullPath"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyResolver.AddSearchDirectory(System.String)">
            <summary>
            Adds the search directory.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyResolver.AddSearchDirectoryRange(System.String[])">
            <summary>
            Adds a range of directories
            </summary>
            <param name="directories"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyResolver.Dump">
            <summary>
            Dumps the current state of the resolver to the log.
            Resolver must be sited for this command.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyResolver.Attach">
            <summary>
            Attaches this instance to the assembly resolution event
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyResolver.Detach">
            <summary>
            Detaches this instance from the assembly resolution event
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyResolver.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Handles the AssemblyResolve event of the CurrentDomain control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:System.ResolveEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyResolver.CurrentDomain_ReflectionOnlyAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Handles the ReflectionOnlyAssemblyResolve event of the CurrentDomain control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:System.ResolveEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.AssemblyResolver.SearchDirectories">
            <summary>
            Gets the search directories.
            </summary>
            <value>The search directories.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.AssemblyResolverContext">
            <summary>
            Scope for assembly resolution
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyResolverContext.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyResolverContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.AssemblyResolverContext.Resolver">
            <summary>
            Gets the resolver.
            </summary>
            <value>The resolver.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.BackgroundTask">
            <summary>
            Helper class to schedule a set of background tasks
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BackgroundTask.Schedule(Microsoft.ExtendedReflection.Logging.IEventLog,System.Threading.WaitCallback)">
            <summary>
            Schedules the specified callback.
            </summary>
            <param name="log">The log.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BackgroundTask.Schedule(Microsoft.ExtendedReflection.Logging.IEventLog,System.Threading.WaitCallback,System.Object)">
            <summary>
            Schedules the specified callback.
            </summary>
            <param name="log">The log.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.BitHelper">
            <summary>
            Helper methods for bit manipulations
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BitHelper.GetLowestBit(System.Int32)">
            <summary>
            Returns an integer in which only at most one bit is set: the lowest set bit of the input.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BitHelper.GetLowestBit(System.UInt64)">
            <summary>
            Returns an integer in which only at most one bit is set: the lowest set bit of the input.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BitHelper.GetLowestBit(System.Int64)">
            <summary>
            Returns an integer in which only at most one bit is set: the lowest set bit of the input.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BitHelper.GetHighestBit(System.Int32)">
            <summary>
            Returns an integer in which only at most one bit is set: the highest set bit of the input.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BitHelper.GetHighestBit(System.Int64)">
            <summary>
            Returns an integer in which only at most one bit is set: the highest set bit of the input.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BitHelper.CountBits(System.Int32)">
            <summary>
            Count the number of bits set in the given integer value
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BitHelper.ClearHalf(System.Int32)">
            <summary>
            Clears the half of the bits, starting from the lowest bit
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BitHelper.GetBitIndex(System.Int32)">
            <summary>
            Determines the index of the bit set in the given value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BitHelper.GetBitIndex(System.Int64)">
            <summary>
            Determines the index of the bit set in the given value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BitHelper.Combine(System.Int32,System.Int32)">
            <summary>
            Creates a 64-bit value by combining two 32-bit values.
            </summary>
            <param name="lowerBits">The lower bits.</param>
            <param name="higherBits">The higher bits.</param>
            <returns>all bits</returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.BooleanHelper">
            <summary>
            Helper methods for the <see cref="T:System.Boolean"/> type
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BooleanHelper.IsNormalized(System.Boolean)">
            <summary>
            Whether whether a given boolean value is represented by its normal form.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BooleanHelper.ToByte(System.Boolean)">
            <summary>
            Converts the bits of a bool value into a byte.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BooleanHelper.ToBool(System.Byte)">
            <summary>
            Converts the bits of a byte value into a bool.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey">
            <summary>
            Compressed hashed int array (optimized for sparse coverage data)
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey.Create(System.Int32[])">
            <summary>
            Compresses an array of non-negative integers.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey.Cap(System.UInt32)">
            <summary>
            Saturates values with the <paramref name="cap"/> value
            </summary>
            <param name="cap">The cap.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey.Equals(Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey.ToArray">
            <summary>
            Uncompresses this value into an integer array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey.GetMaximum">
            <summary>
            Determines the maximum non-negative integer in the uncompressed data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey.GetNonZeroIndices">
            <summary>
            Create an enumerator that returns the indices of non-zero elements
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey.op_Equality(Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey,Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey)">
            <summary>
            Checks whether two object property collections are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey.op_Inequality(Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey,Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey)">
            <summary>
            Checks whether two object property collections are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.CompressedInt32ArrayKey.CompressedSize">
            <summary>
            Number of bytes allocated in compressed representation (without object header overheads)
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.CappedCompressedInt32ArrayKey">
            <summary>
            Key for capped compressed arrays
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CappedCompressedInt32ArrayKey.#ctor(System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.CappedCompressedInt32ArrayKey"/> class.
            </summary>
            <param name="compressedData">The compressed data.</param>
            <param name="cap">The cap.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CappedCompressedInt32ArrayKey.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CappedCompressedInt32ArrayKey.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CappedCompressedInt32ArrayKey.Equals(Microsoft.ExtendedReflection.Utilities.CappedCompressedInt32ArrayKey)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ConsoleColorContext">
            <summary>
            Color context for <see cref="T:System.Console"/>
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ConsoleColorContext.DefaultColor">
            <summary>
            Gets the original foreground color
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ConsoleColorContext.ErrorColor">
            <summary>
            Gets the error color
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ConsoleColorContext.CreateError">
            <summary>
            Creates a context with the error color
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ConsoleColorContext.Create(System.ConsoleColor)">
            <summary>
            Creates the specified color.
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ConsoleColorContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.ConsoleColorContext"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ConsoleColorContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ContractsMetadata">
            <summary>
            Helper methods for code contracts
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.TryGetContractFailureKind(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Symbols.StackFrameName},Microsoft.ExtendedReflection.Utilities.ContractsMetadata.ContractFailureKind@)">
            <summary>
            Tries to infer the contract failre kind from the frames
            </summary>
            <param name="frames"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.IsRuntimeContractType(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference)">
            <summary>
            Gets a value indicating if the type is the generated runtime type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.IsContractExceptionType(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Returns true if the exception type and namespace match System.Diagnostics.Contracts.ContractException
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.TryGetRuntimeContractFailureKind(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference,Microsoft.ExtendedReflection.Utilities.ContractsMetadata.ContractFailureKind@)">
            <summary>
            Returns true if the method is the Contract.Ensures method
            </summary>
            <param name="method"></param>
            <param name="kind">the contract failure kind if any</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.IsRuntimeContractEnsuresMethod(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference)">
            <summary>
            Returns true if the method is the Contract.Ensures method
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.TryGetRuntimeContractLevel(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyDefinition,Microsoft.ExtendedReflection.Utilities.ContractsMetadata.RuntimeContractsFlags@)">
            <summary>
            Gets a value indicating whether the assembly was rewritten using the
            contract rewriter
            </summary>
            <param name="assembly"></param>
            <param name="level">the level of runtime contracts instrumentation</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.IsContractClass(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeDefinition)">
            <summary>
            Gets a value indicating if the type is a contract class, i.e.
            has the [ContractClassFor] attribute.
            </summary>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.IsContractInvariantMethod(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodDefinition)">
            <summary>
            Gets a value indicating if the method is a contract invariant method, i.e.
            has the [ContractInvariantMethod] attribute.
            </summary>
            <param name="methodDefinition">The method definition.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.TryGetContractInvariantMethod(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to find the invariant method of a type.
            </summary>
            <param name="type">The type.</param>
            <param name="invariantMethod">The invariant method.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.ContractFailureKind">
            <summary>
            The kind of contract violations
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.ContractFailureKind.Precondition">
            <summary>
            Requires
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.ContractFailureKind.Postcondition">
            <summary>
            Ensures
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.ContractFailureKind.PostconditionOnException">
            <summary>
            Ensures on exception
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.ContractFailureKind.Invariant">
            <summary>
            Invariant
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.ContractFailureKind.Assert">
            <summary>
            Assert
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.ContractFailureKind.Assume">
            <summary>
            Assume
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.ContractFailureKind.Unknown">
            <summary>
            Unknown level
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.RuntimeContractsFlags">
            <summary>
            Gets the rewritten assembly level contract
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.RuntimeContractsFlags.Asserts">
            <summary>
            Assertions
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.RuntimeContractsFlags.Assumes">
            <summary>
            Assumptions
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.RuntimeContractsFlags.Ensures">
            <summary>
            Ensures
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.RuntimeContractsFlags.Invariants">
            <summary>
            Invariants
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.RuntimeContractsFlags.LegacyRequires">
            <summary>
            LegacyRequires
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.RuntimeContractsFlags.None">
            <summary>
            No contracts
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.RuntimeContractsFlags.Requires">
            <summary>
            Preconditions
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.RuntimeContractsFlags.RequiresWithException">
            <summary>
            RequiresAlways
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.RuntimeContractsFlags.ThrowOnFailure">
            <summary>
            Throws on failure
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.RuntimeContractsFlags.Preconditions">
            <summary>
            All preconditions
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.RuntimeContractsFlags.Full">
            <summary>
            All contracts
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata">
            <summary>
            Metadata associated to Code Contracts
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.ContractsNamespace">
            <summary>
            Code Contracts namespace name
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.ContractRuntimeTypeName">
            <summary>
            The type name generated by the rewriter
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.InsideContractEvaluationFieldName">
            <summary>
            The name of the static thread local field used to specify if inside a contract
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.RuntimeContractsAttributeTypeName">
            <summary>
            The type name of the attribute added by the rewriter
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.ContractTypeName">
            <summary>
            The type name of the Contract class.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.ContractClassForAttributeTypeName">
            <summary>
            The type name of the ContractClassForAttribute.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.ContractInvariantMethodAttributeTypeName">
            <summary>
            The type name of the ContractInvariantMethodAttribute.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.ContractExceptionTypeName">
            <summary>
            Gets the contract exception type name
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.AreContractsBuiltin">
            <summary>
            Whether the Contract class is present in mscorlib
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.ExplicitMicrosoftContractsAssembly">
            <summary>
            Code Contracts assembly name 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.BuiltinContractsAssembly">
            <summary>
            mscorlib assembly name
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.ExplicitMicrosoftContractsRuntimeContractsAttributeType">
            <summary>
            Code Contracts RuntimeContractsAttribute type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.BuiltinContractsRuntimeContractsAttributeType">
            <summary>
            Code Contracts RuntimeContractsAttribute type.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.ExplicitMicrosoftContractsContractTypeDefinition">
            <summary>
            Code Contracts Contract class
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.BuiltinContractsContractTypeDefinition">
            <summary>
            Code Contracts Contract class
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.ExplicitMicrosoftContractsContractClassForAttributeType">
            <summary>
            Code Contracts ContractClassFor attribute
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.BuiltinContractsContractClassForAttributeType">
            <summary>
            Code Contracts ContractClassFor attribute
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.ExplicitMicrosoftContractsContractInvariantMethodAttributeType">
            <summary>
            Code Contracts ContractInvariantMethod attribute
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.BuiltinContractsContractInvariantMethodAttributeType">
            <summary>
            Code Contracts ContractInvariantMethod attribute
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ContractsMetadata.Metadata.ContractExceptionFullTypeName">
            <summary>
            Gets the contract exception full type name
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ConvertHelper">
            <summary>
            Small helper methods around conversions
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ConvertHelper.TryChangeType(System.Int64,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Object@)">
            <summary>
            Tries to change the type of a value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.CsvWriter">
            <summary>
            A CSV writer
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CsvWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.CsvWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CsvWriter.#ctor(System.IO.TextWriter,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.CsvWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
            <param name="separator">The separator.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CsvWriter.WriteRow(System.String[])">
            <summary>
            Writes the row.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CsvWriter.WriteRow``1(System.Collections.IEnumerable,System.Converter{``0,System.String})">
            <summary>
            Writes the row.
            </summary>
            <param name="values">The values.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CsvWriter.WriteRow``1(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,System.String})">
            <summary>
            Writes the row.
            </summary>
            <param name="values">The values.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.CsvWriter.Separator">
            <summary>
            Gets or sets the separator.
            </summary>
            <value>The separator.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.DelegateCompilerBase">
            <summary>
            This helper class takes care of compiling delegates.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DelegateCompilerBase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of delegate compiler base
            </summary>
            <param name="assemblyName"></param>
            <param name="typeNameSuffix"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DelegateCompilerBase.CreateDelegate``1">
            <summary>
            Creates a new instance of the delegate
            </summary>
            <typeparam name="TDelegate"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DelegateCompilerBase.TryCreateDelegate(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Object@)">
            <summary>
            Tries to create a new instance of the delegate
            </summary>
            <param name="delegateType"></param>
            <param name="delegate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DelegateCompilerBase.EmitDelegateBody(System.Type,System.Reflection.ParameterInfo[],System.Reflection.Emit.MethodBuilder)">
            <summary>
            Emits the delegate body
            </summary>
            <param name="delegateReturnType"></param>
            <param name="delegateParameters"></param>
            <param name="methodBuilder"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.DgmlStyleTargetType">
            <summary>
            The kind of Style targets
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DgmlStyleTargetType.Node">
            <summary>
            Targets a node
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DgmlStyleTargetType.Link">
            <summary>
            Targets a Link
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.DgmlStyleTargetType.Graph">
            <summary>
            Targets a graph
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter">
            <summary>
            A DGML graph writer
            </summary>
            <remarks>
            More information on DGML at http://msdn.microsoft.com/en-us/library/ee842619(VS.100).aspx
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.#ctor(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Initializes the graph writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.Create(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Creates a new DGML writer
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.Close">
            <summary>
            Closes the writer
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.Dispose">
            <summary>
            Disposes the graph writer
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.DefineAlias(System.String)">
            <summary>
            Defines an alias for the avlue
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteStartDirectedGraph(System.String)">
            <summary>
            Opens the 'DirectedGraph' element
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteEndDirectedGraph">
            <summary>
            Closes the 'DirectedGraph' element
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteStartNodes">
            <summary>
            Opens the 'Nodes' element
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteEndNodes">
            <summary>
            Closes the 'Nodes' element
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteStartNode(System.String)">
            <summary>
            Starts a node element
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteEndNode">
            <summary>
            Ends a node element
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteStartLinks">
            <summary>
            Opens the 'Links' element
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteEndLinks">
            <summary>
            Closes the 'Nodes' element
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteStartLink(System.String,System.String)">
            <summary>
            Starts a Link element and returns the id
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteEndLink">
            <summary>
            Ends a Link element
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteContainsLink(System.String,System.String)">
            <summary>
            Writes a link that specifes that a group contains a node
            </summary>
            <param name="group"></param>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteAttributeString(System.String,System.String)">
            <summary>
            Writes the attribue pair
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteCategoryAttribute(System.String)">
            <summary>
            Writes the category attribute
            </summary>
            <param name="category"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteLabelAttribute(System.String)">
            <summary>
            Writes the label attribute
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteNodesAndLinks``2(Microsoft.ExtendedReflection.Collections.SafeDirectedGraph{``0,``1},Microsoft.ExtendedReflection.Utilities.Safe.SafeFunc{``0,System.String},Microsoft.ExtendedReflection.Utilities.Safe.SafeAction{Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter,``0},Microsoft.ExtendedReflection.Utilities.Safe.SafeAction{Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter,Microsoft.ExtendedReflection.Collections.SafeDirectedGraph{``0,``1}},Microsoft.ExtendedReflection.Utilities.Safe.SafeAction{Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter,``1},Microsoft.ExtendedReflection.Utilities.Safe.SafeAction{Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter,Microsoft.ExtendedReflection.Collections.SafeDirectedGraph{``0,``1}})">
            <summary>
            Writes the nodes and links of the graph
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="graph"></param>
            <param name="vertexIdentities"></param>
            <param name="_vertexWriter"></param>
            <param name="_nodeWriter">additional node writer</param>
            <param name="_edgeWriter"></param>
            <param name="_linkWriter">additional link writer</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteGroupAttribute(System.Boolean)">
            <summary>
            Writes a Group attribute
            </summary>
            <param name="expanded"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteStartCategories">
            <summary>
            Writes the start of the categories
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteEndCategories">
            <summary>
            Writes the end of the categories
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteStartCategory(System.String,System.String)">
            <summary>
            Writes a Category element
            </summary>
            <param name="id"></param>
            <param name="label"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteEndCategory">
            <summary>
            Writes the end of a Category element
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteStartStyles">
            <summary>
            Writes the start of a style section
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteEndStyles">
            <summary>
            Writes the end of the style section
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteStartStyle(Microsoft.ExtendedReflection.Utilities.DgmlStyleTargetType,System.String,System.String)">
            <summary>
            Writes the start of a style section
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteEndStyle">
            <summary>
            Writes the end of the style section
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteCondition(System.String)">
            <summary>
            Writes a condition element
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteSetterValue(System.String,System.String)">
            <summary>
            Writes a property setter
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteSetterExpression(System.String,System.String)">
            <summary>
            Writes a property setter
            </summary>
            <param name="property"></param>
            <param name="expression"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteStartProperties">
            <summary>
            Writes the start of a Properties element
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteEndProperties">
            <summary>
            Writes the end of a Properties element
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.WriteProperty(System.String,System.String,System.String,System.TypeCode)">
            <summary>
            Writes a property definition
            </summary>
            <param name="id"></param>
            <param name="label"></param>
            <param name="description"></param>
            <param name="dataType"></param>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Utilities.DgmlGraphWriter.Closed">
            <summary>
            Raised when closed
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.DoubleHelper">
            <summary>
            Various floating point method helpers
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.DoubleHelper.TryConvertToRational(System.Double,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Converts a floating point number to a rational (using continued fractions).
            Since a float/double might be outside the range of integer, it's a 'try' style of
            method.
            </summary>
            <param name="value"></param>
            <param name="max"></param>
            <param name="numerator"></param>
            <param name="denominator"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.EnumHelper">
            <summary>
            Helper methods over enumerations
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnumHelper.TryParse``1(System.String,``0@)">
            <summary>
            Tries to parse the string to an Enum value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnumHelper.TryGetName(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int64,System.String@)">
            <summary>
            Tries to get the name of an enum value.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnumHelper.TryGetName(System.Type,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int64,System.String@)">
            <summary>
            Tries to get the name of the enum value
            </summary>
            <param name="targetEnumType">Type of the target enum.</param>
            <param name="enumType">Type of the enum.</param>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnumHelper.TryFormat(System.Type,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int64,System.String@)">
            <summary>
            Tries to format the enum value
            </summary>
            <param name="targetEnumType">Type of the target enum.</param>
            <param name="enumType">Type of the enum.</param>
            <param name="value">The value.</param>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnumHelper.Format``1(System.Int32)">
            <summary>
            Formats a value as an enum.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnumHelper.FormatAsLowerInvariant``1(System.Int32)">
            <summary>
            Formats a value as an enum.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnumHelper.FormatAsSentence``1(System.Int32)">
            <summary>
            Formats as a sentence
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnumHelper.GetEnumValues``1">
            <summary>
            Gets the enum values.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnumHelper.GetEnumValues(System.Type)">
            <summary>
            Gets the enum values.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.IEnvironmentSetting">
            <summary>
            Used to cast environment setting class
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.IEnvironmentSetting.Name">
            <summary>
            Gets the name of the environment variable.
            </summary>
            <value>The name of the environment variable.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.IEnvironmentSetting.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.IEnvironmentSetting.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.EnvironmentSetting`1">
            <summary>
            Wrapper to lazy load enviroment settings.
            TODO support regkeys.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSetting`1.#ctor(System.String,`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.EnvironmentSetting`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSetting`1.SetValue(System.String)">
            <summary>
            Sets the value and overrides the data fetched from the enviroment variable if
            any.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSetting`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterPriority>2</filterPriority>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSetting`1.TryParse(System.String,`0@)">
            <summary>
            Parses the specified environment value.
            </summary>
            <param name="environmentValue">The environment value.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.EnvironmentSetting`1.Name">
            <summary>
            Gets the name of the environment variable
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.EnvironmentSetting`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.EnvironmentSetting`1.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.EnvironmentSetting`1.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.EnvironmentSetting`1.HasValue">
            <summary>
            Gets a value indicating whether this setting was set.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.EnvironmentSetting`1.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings">
            <summary>
            Factory for EnvironmentSetting instances.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.AsBool(System.String,System.Boolean,System.String)">
            <summary>
            Creates an environment setting for booleans
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">the default value</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.AsBool(System.String,System.String)">
            <summary>
            Creates an environment setting for booleans
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.AsString(System.String)">
            <summary>
            Ints the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.AsString(System.String,System.String)">
            <summary>
            Ints the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.AsString(System.String,System.String,System.String)">
            <summary>
            Ints the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.AsInt32(System.String,System.Int32,System.String)">
            <summary>
            Creates an environment setting for integers
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.AsInt64(System.String,System.Int64,System.String)">
            <summary>
            Creates an environment setting for long integers
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.AsEnum``1(System.String,``0,System.String)">
            <summary>
            Creates an environment setting for enums
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.GetSettings(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Displays the value of EnvironmentSettings fields in a type
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingBool.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingBool"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">default value</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingBool.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingBool"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingBool.TryParse(System.String,System.Boolean@)">
            <summary>
            Parses the specified environment value.
            </summary>
            <param name="environmentValue">The environment value.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingString.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingString"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">the default value</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingString.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingString"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingString.TryParse(System.String,System.String@)">
            <summary>
            Parses the specified environment value.
            </summary>
            <param name="environmentValue">The environment value.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingInt32.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingBool"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingInt32.TryParse(System.String,System.Int32@)">
            <summary>
            Parses the specified environment value.
            </summary>
            <param name="environmentValue">The environment value.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingEnum`1.#ctor(System.String,`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingBool"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingEnum`1.TryParse(System.String,`0@)">
            <summary>
            Parses the specified environment value.
            </summary>
            <param name="environmentValue">The environment value.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingInt64.#ctor(System.String,System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingBool"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.EnvironmentSettings.EnvironmentSettingInt64.TryParse(System.String,System.Int64@)">
            <summary>
            Parses the specified environment value.
            </summary>
            <param name="environmentValue">The environment value.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.BackgroundInitializedValue`1">
            <summary>
            Holds a value that is created in the background
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BackgroundInitializedValue`1.#ctor(Microsoft.ExtendedReflection.Utilities.Factory{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.BackgroundInitializedValue`1"/> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="start">if set to <c>true</c> [start].</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BackgroundInitializedValue`1.StartInitialize">
            <summary>
            Starts this the value creation in the background, if not already started or finished.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.BackgroundInitializedValue`1.WaitInitialize">
            <summary>
            Waits for the initialization of the value to finish, it not already finished.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.BackgroundInitializedValue`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ExitCodes">
            <summary>
            List of exit codes
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.SafeDebugFail">
            <summary>
            When a managed assumption or assertion 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.ClrMonitorFail">
            <summary>
            When the unmanaged profiler fails
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.OtherProfilerAlreadyLoaded">
            <summary>
            When another profiler is already loaded
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.PlatformMismatch">
            <summary>
            Could not load assembly on current platform
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.ExternalProfilerRegistered">
            <summary>
            an external profiler has already been registered
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.X86MonitoringNotEnabled">
            <summary>
            Monitoring is not enabled
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.X64MonitoringNotEnabled">
            <summary>
            Monitoring is not enabled
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.AssemblyDoesNotExist">
            <summary>
            The target assembly does not exist
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.CannotLoadAssembly">
            <summary>
            Failed to load the target assembly
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.CannotReflectAssembly">
            <summary>
            Failed to reflect the assembly
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.ControlC">
            <summary>
            Ctrl+C
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.FatalExecutionEngineError">
            <summary>
            CLR error code
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.StackOverflow">
            <summary>
            Stack overflow
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.ClrError">
            <summary>
            CLR error
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExitCodes.AccessViolation">
            <summary>
            Access violation
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExitCodes.DescribeHelper(System.Int32,System.String,System.Type[])">
            <summary>
            Describes the specified exit code.
            </summary>
            <param name="exitCode">The exit code.</param>
            <param name="formatString">The format string.</param>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExitCodes.TryGetName(System.Int32,System.String@,System.Type[])">
            <summary>
            Tries to get the name of the exit code
            </summary>
            <param name="exitCode">The exit code.</param>
            <param name="name">The name.</param>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExitCodes.Describe(System.Int32,System.String)">
            <summary>
            Describes the specified exit code.
            </summary>
            <param name="exitCode">The exit code.</param>
            <param name="formatString">The format string.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExitCodes.Describe(System.Int32)">
            <summary>
            Describes the specified exit code.
            </summary>
            <param name="exitCode">The exit code.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExitCodes.IsExitCode(System.Int32,System.Type[])">
            <summary>
            Determines whether the specified exit code is described by the specified list of types.
            </summary>
            <param name="exitCode">The exit code.</param>
            <param name="types">The types.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings">
            <summary>
            Static class containing global configuration settings of Extended Reflection
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.ExternalProfilers">
            <summary>
            a semicolon separated list of profiler GUID to be loaded in the process
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.NoThreading">
            <summary>
            Whether no attempts should be make to speed things up by creating multiple threads
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.NoBitArithmetic">
            <summary>
            Will cause assertions failures if non-logical 'and' or 'or' or 'xor' terms are created;
            for internal debugging.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.SignedBoundsChecks">
            <summary>
            Whether to use a more verbose signed bounds check encoding.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.IgnorePointerConstraints">
            <summary>
            Whether to ignore constraints regarding pointer.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.CheckModels">
            <summary>
            Whether models from the constraint solver should be checked for correctness.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpModelSearch">
            <summary>
            Whether the steps performed during the model-search process should be dumped.
            </summary>
            <remarks>
            Each level includes lower levels.
            </remarks>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DisableContextfulReducer">
            <summary>
            Whether to disable simple syntactical implication checks.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.SelfTest">
            <summary>
            Special debug mode where Extended Reflection is applied on itself.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.NtSymbolPath">
            <summary>
            Symbol path
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.NtSourcePath">
            <summary>
            Source path
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpSourceSearch">
            <summary>
            Debugging the source finding logic
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpSourceColoring">
            <summary>
            Debugging the source coloring logic
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DiagnoseUnverifiable">
            <summary>
            Whether special diagnostics output should be generated when unverifiable memory accesses are detected.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.TraceEnterLeave">
            <summary>
            Whether a trace of enter/leave pairs should be dumped.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.NoCodeEmitterSizeLimit">
            <summary>
            Whether size limits imposed on emitted code size should be ignored.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.RandomSeed">
            <summary>
            Random seed; negative number means to generate random seed from current time
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.ConsoleOutputLength">
            <summary>
            maximum character length of the console output memory buffer, before it is dumped to disk
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.ConsoleOutputPreviewLength">
            <summary>
            maximum character length of the console output memory buffer, before it is dumped to disk
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.MaxStringLengthForGetHashCode">
            <summary>
            maximum length of string for which GetHashCode is encoded
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.MaxStringLengthForIsMatch">
            <summary>
            maximum length of string for which IsMatch is encoded
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DisableRex">
            <summary>
            whether Rex technology should be disabled for regular expression matching
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.MaxFraction">
            <summary>
            maximum value of the numerator or denomiator of a rational
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.EmitPreferredLineWidth">
            <summary>
            preferred line with for generated code
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.EmitNamespacemode">
            <summary>
            strategy for prettifying namespaces
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.NoIncrementalSolving">
            <summary>
            Whether not to use constraint dependency analysis
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpExecutionNodeSubtreeEvents">
            <summary>
            Whether the dump events raised in the connection with the exhaustive search of certain subtrees.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpDynamicCode">
            <summary>
            Dumps IDynamicCodeManager information
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DontCacheEvents">
            <summary>
            Whether logged events shouldn't be cached, i.e. whether duplicate events get pruned.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.SplitStructs">
            <summary>
            Whether read from and writes to structs are split into reads from and writes to the fields of the struct..
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.SupportUnsafeTestInputs">
            <summary>
            Whether Pex should symbolically track memory accessed through unknown unmanaged pointer references
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.MaxObjectsToFollow">
            <summary>
            Maximum number of objects to follow when slurping
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.AlignPrimitiveValues">
            <summary>
            Makes sure primitive values are aligned.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DoNotUseTwoPhaseSolving">
            <summary>
            Use two phase solving
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DoNotUseStringSolver">
            <summary>
            Whether to explore string functions instead of reasoning about them abstractly.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.UnfoldStrings">
            <summary>
            Whether to always unfold string operations, instead of using more efficient term representations
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.ClientReadWaitMilliSeconds">
            <summary>
            Number of milliseconds to wait for the client to be ready, -1 = infinite
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpHeapOnOutOfMemory">
            <summary>
            path to the debugger tools
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DebuggerPath">
            <summary>
            path to the debugger tools
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpAssemblyLoading">
            <summary>
            logs assembly loads and resolution
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.FSharpLanguage">
            <summary>
            enable the experimental F# language support
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpModelSearchMode">
            <summary>
            Dump model search modes
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpModelSearchMode.Off">
            <summary>
            off
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpModelSearchMode.Summary">
            <summary>
            summary at the end
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpModelSearchMode.FlippedNodes">
            <summary>
            which nodes are flipped
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpModelSearchMode.TimedoutFlippedConstraints">
            <summary>
            flipped constraints when timeout occurs
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpModelSearchMode.FlippedConstraints">
            <summary>
            flipped constraints
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpModelSearchMode.AllConstraints">
            <summary>
            all constraints
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpModelSearchMode.SomeModel">
            <summary>
            some information related to the model
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpModelSearchMode.RawModel">
            <summary>
            raw (verbose) model-dump 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ExtendedReflectionEnvironmentSettings.DumpModelSearchMode.RawConstraintStore">
            <summary>
            raw (verbose) constraint store-dump
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.FileHelper">
            <summary>
            Helper static methods for operation on files
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.FileHelper.AreSameFileEncodedContent(System.String,System.String)">
            <summary>
            Checks that two files have the same encoded content, in a memory efficient way
            </summary>
            <param name="leftFile"></param>
            <param name="rightFile"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.FileHelper.AreSameFileBinaryContent(System.String,System.String)">
            <summary>
            Checks that two files have the same binary content, in a memory efficient way
            </summary>
            <param name="leftFile"></param>
            <param name="rightFile"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.FileHelper.ReadAllSettings(System.String)">
            <summary>
            Reads all settings.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.FileHelper.ReadAllSettings(System.IO.TextReader)">
            <summary>
            Reads all settings.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.FileHelper.WriteAllSettings(System.String,Microsoft.ExtendedReflection.Collections.IFiniteMap{System.String,Microsoft.ExtendedReflection.Collections.IFiniteMap{System.String,System.String}})">
            <summary>
            Writes all settings.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.FileHelper.WriteAllSettings(System.IO.TextWriter,Microsoft.ExtendedReflection.Collections.IFiniteMap{System.String,Microsoft.ExtendedReflection.Collections.IFiniteMap{System.String,System.String}})">
            <summary>
            Writes all settings.
            </summary>
            <param name="writer">The writer.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.FileHelper.AddSetting(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the setting in an atomic operation.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="sectionName">Name of the section.</param>
            <param name="keyName">Name of the key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.GCHelper">
            <summary>
            GC helper methods
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.GCHelper.DumpHeap">
            <summary>
            Invokes CDB and dumps the heap to the console. DEBUG only.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.GCHelper.AggressiveCollect">
            <summary>
            Collects and waits for pending finalizers several times
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.GCHelper.AggressiveCollect(System.Int32)">
            <summary>
            Collects and waits for pending finalizers <param name="iterations"/>
            times
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ExecutionTimer">
            <summary>
            A helper class to log execution times
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExecutionTimer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.ExecutionTimer"/> class.
            </summary>
            <param name="stackDepth">The stack depth.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExecutionTimer.Measure``1(Microsoft.ExtendedReflection.Utilities.Safe.SafeFunc{``0})">
            <summary>
            Measures the specified action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExecutionTimer.Measure(Microsoft.ExtendedReflection.Utilities.Safe.SafeAction)">
            <summary>
            Measures the specified action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExecutionTimer.Clear">
            <summary>
            Clears the recorded durations.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ExecutionTimer.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the measurments to the writer
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ExecutionTimer.Durations">
            <summary>
            Gets the durations.
            </summary>
            <value>The durations.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.GuidHelper">
            <summary>
            Helper methos for the Guid type
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.GuidHelper.TryParse(System.String,System.Guid@)">
            <summary>
            Trying to parse the guid
            </summary>
            <param name="value"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.LazyValue`1">
            <summary>
            A wrapper for lazy loaded values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.LazyValue`1.#ctor(Microsoft.ExtendedReflection.Utilities.Factory{`0})">
            <summary>
            Initializes a new instances of the lazy value
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.LazyValue`1.GetValue">
            <summary>
            Gets the value (useful to get a delegate)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.LazyValue`1.TryGetValue(`0@)">
            <summary>
            Tries to get a non-default value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.LazyValue`1.Value">
            <summary>
            Gets the value and lazily computes it if necessary
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.MsBuildHelper">
            <summary>
            Helper methods for msbuild
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.MsBuildHelper.MsBuildPath">
            <summary>
            Gets the msbuild path that lives in the framework folder
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.PartialNameMembershipCondition">
            <summary>
            A membership condition for assembly names (weaker than the <see cref="T:System.Security.Policy.StrongNameMembershipCondition"/>)
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.PartialNameMembershipCondition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.PartialNameMembershipCondition"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.PartialNameMembershipCondition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.PartialNameMembershipCondition"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.PartialNameMembershipCondition.System#Security#ISecurityPolicyEncodable#ToXml(System.Security.Policy.PolicyLevel)">
            <summary>
            
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.PartialNameMembershipCondition.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.PartialNameMembershipCondition.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.PartialNameMembershipCondition.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ProcessMemoryInfo">
            <summary>
            Contains extended memory statistics for a process.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ProcessMemoryInfo.PageFaultCount">
            <summary>
            The number of page faults.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ProcessMemoryInfo.PeakWorkingSetSize">
            <summary>
            The peak working set size, in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ProcessMemoryInfo.WorkingSetSize">
            <summary>
            The current working set size, in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ProcessMemoryInfo.QuotaPeakPagedPoolUsage">
            <summary>
            The peak paged pool usage, in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ProcessMemoryInfo.QuotaPagedPoolUsage">
            <summary>
            The current paged pool usage, in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ProcessMemoryInfo.QuotaPeakNonPagedPoolUsage">
            <summary>
            The peak nonpaged pool usage, in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ProcessMemoryInfo.QuotaNonPagedPoolUsage">
            <summary>
            The current nonpaged pool usage, in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ProcessMemoryInfo.PagefileUsage">
            <summary>
            The current space allocated for the pagefile, in bytes. Those pages may or may not be in memory.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ProcessMemoryInfo.PeakPagefileUsage">
            <summary>
            The peak space allocated for the pagefile, in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.ProcessMemoryInfo.PrivateUsage">
            <summary>
            The current amount of memory that cannot be shared with other processes, in bytes. Private bytes include memory that is committed and marked MEM_PRIVATE, data that is not mapped, and executable pages that have been written to.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ProcessMemoryInfo.TryGetProcessMemoryInfo(System.Diagnostics.Process,Microsoft.ExtendedReflection.Utilities.ProcessMemoryInfo@)">
            <summary>
            Tries to query the current memory status.
            </summary>
            <param name="process">The process.</param>
            <param name="memoryInfo">The memory info.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.CachedContext">
            <summary>
            Context that flushes the cache away when exited
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CachedContext.#ctor(Microsoft.ExtendedReflection.ComponentModel.ICached)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.CachedContext"/> class.
            </summary>
            <param name="cached">The cached.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CachedContext.Create(Microsoft.ExtendedReflection.ComponentModel.ICached)">
            <summary>
            Creates the specified cached.
            </summary>
            <param name="cached">The cached.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CachedContext.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ICancelManager">
            <summary>
            Cancel manager
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ICancelManager.ResetCancel">
            <summary>
            Resets the cancel state
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ICancelManager.CreateCancelKeyContext">
            <summary>
            Listens to Ctrl+C and triggers the Cancel method if necessary, until Dispose is called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ICancelManager.Cancel">
            <summary>
            Requests the component to cancel its computation
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ICancelManager.Suspend">
            <summary>
            Suspends execution
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ICancelManager.WaitTillResume">
            <summary>
            If suspended, blocks until resuming
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ICancelManager.Resume">
            <summary>
            Sends a message to resume execution
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ICancelManager.ResetNext">
            <summary>
            Resets a pending next request
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ICancelManager.Next">
            <summary>
            Sends a message to fast forward 
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Utilities.ICancelManager.CancelReseted">
            <summary>
            Raised when the cancel state has been reseted
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Utilities.ICancelManager.CancelRequested">
            <summary>
            Raised when the cancel method is called
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ICancelManager.IsCancelling">
            <summary>
            Gets a value indicating if a cancellation request is pending.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ICancelManager.WaitTillResumeOrIsCanceling">
            <summary>
            Waits if resumed (if necessary), then returns if cancelled
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ICancelManager.IsNextRequested">
            <summary>
            Gets a value indicating whether a fast-forward event is pending.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.CancelManager">
            <summary>
            Cancel manager
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CancelManager.ResetCancel">
            <summary>
            Resets the cancel state
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CancelManager.Cancel">
            <summary>
            Requests the component to cancel its computation
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CancelManager.OnCancelReseted(Microsoft.ExtendedReflection.Logging.RemoteEventArgs)">
            <summary>
            Raises the <see cref="E:CancelReseted"/> event.
            </summary>
            <param name="e">The <see cref="T:Microsoft.ExtendedReflection.Logging.RemoteEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CancelManager.OnCancelRequested(Microsoft.ExtendedReflection.Logging.RemoteEventArgs)">
            <summary>
            Raises the <see cref="E:CancelRequested"/> event.
            </summary>
            <param name="e">The <see cref="T:Microsoft.ExtendedReflection.Logging.RemoteEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CancelManager.CreateCancelKeyContext">
            <summary>
            Listens to Ctrl+C and triggers the Cancel method if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CancelManager.Suspend">
            <summary>
            Suspends execution
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CancelManager.Resume">
            <summary>
            Sends a message to resume execution
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CancelManager.WaitTillResume">
            <summary>
            If suspended, blocks until resuming
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CancelManager.ResetNext">
            <summary>
            Resets a pending next request
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.CancelManager.Next">
            <summary>
            Sends a message to fast forward 
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.CancelManager.WaitTillResumeOrIsCanceling">
            <summary>
            Gets a value indicating if a cancellation request is pending.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.CancelManager.IsCancelling">
            <summary>
            Gets a value indicating if a cancellation request is pending.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Utilities.CancelManager.CancelReseted">
            <summary>
            Raised when the cancel method is called
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Utilities.CancelManager.CancelRequested">
            <summary>
            Raised when the cancel method is called
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.CancelManager.IsNextRequested">
            <summary>
            Gets a value indicating whether a fast-forward event is pending.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.PathHelper">
            <summary>
            Path helpers
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.PathHelper.MaxPath">
            <summary>
            The famous MAX_PATh constant
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.PathHelper.GetRobustFileName(System.String)">
            <summary>
            Escapes, and ensures unique
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.PathHelper.EscapeFileName(System.String)">
            <summary>
            Escapes the path.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.PathHelper.GetUniqueFileName(System.String)">
            <summary>
            Gets the name of the unique file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.PathHelper.GetUniqueDirectoryName(System.String)">
            <summary>
            Gets a unique directory name
            </summary>
            <param name="directoryName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.PathHelper.GetUniqueFileName(System.String,System.String,System.String)">
            <summary>
            Gets the name of the unique file.
            </summary>
            <param name="directory">The directory.</param>
            <param name="name">The name.</param>
            <param name="extension">The extension.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.PathHelper.GetUnc(System.String,System.String,System.String)">
            <summary>
            Gets a unc.
            </summary>
            <param name="serverName">Name of the server.</param>
            <param name="shareName">Name of the share.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ProcessHelper">
            <summary>
            Small helper methods around the <see cref="T:System.Diagnostics.Process"/> class
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ProcessHelper.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.ProcessHelper"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ProcessHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.ProcessHelper"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="fileName">Name of the file.</param>
            <param name="arguments">arguments</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ProcessHelper.WriteArguments(System.String)">
            <summary>
            Writes arguments directly
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ProcessHelper.AppendSwitch(System.String)">
            <summary>
            Appends the switch.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ProcessHelper.AppendSwitch(System.String,System.String)">
            <summary>
            Appends the switch.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ProcessHelper.AppendFileName(System.String)">
            <summary>
            Appends the name of the file.
            </summary>
            <param name="bsource">The bsource.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ProcessHelper.OnBeforeExecution">
            <summary>
            Called when [before start].
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ProcessHelper.OnAfterExecution">
            <summary>
            Called when [after execution].
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ProcessHelper.Execute">
            <summary>
            Executes the specified log.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ProcessHelper.ExecuteCommand(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Executes the command and pipes the output to the current
            console output.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="arguments">The arguments.</param>
            <param name="_workingDirectory">working directory if any</param>
            <param name="_clrVersion">target CLR version</param>
            <param name="timeOut">timeout in seconds</param>
            <returns>exit code</returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ProcessHelper.ExecuteCommand(System.Diagnostics.ProcessStartInfo,System.Int32)">
            <summary>
            Executes the command.
            </summary>
            <param name="info">The info.</param>
            <param name="timeOut">time out in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ProcessHelper.Dump(Microsoft.ExtendedReflection.Logging.IEventLog)">
            <summary>
            Dumps the specified log.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ProcessHelper.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ProcessHelper.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ProcessHelper.Output">
            <summary>
            Gets the output.
            </summary>
            <value>The output.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ProcessHelper.Duration">
            <summary>
            Gets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ProcessHelper.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
            <value>The exit code.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ProcessHelper.SuccessExitCode">
            <summary>
            Gets or sets the success exit code.
            </summary>
            <value>The success exit code.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ProcessHelper.EnvironmentVariables">
            <summary>
            Gets the environment variables.
            </summary>
            <value>The environment variables.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ProcessHelper.TimeOut">
            <summary>
            Gets or sets the time out in seconds
            </summary>
            <value>The time out.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ProcessHelper.WorkingDirectory">
            <summary>
            Gets or sets the process working directory
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ProcessHelper.Command">
            <summary>
            Gets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ProcessHelper.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.ExtendedReflection.Utilities.ProcessHelper"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Utilities.ProcessHelper.BeforeExecution">
            <summary>
            Raised before launching the process
            </summary>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Utilities.ProcessHelper.AfterExecution">
            <summary>
            Raised before process finished
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.ProcessHelper.CurrentProcess">
            <summary>
            The current process.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.RandomHelper">
            <summary>
            Helper for generating random generators
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.RandomHelper.CreateRandom">
            <summary>
            Creates the random. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.RegistryHelper">
            <summary>
            Helper class providing convient access to the registry
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.RegistryHelper.TryResolveTypeLib(System.String,System.String@,System.String@)">
            <summary>
            Tries to resolve the TypeLib guid and version, give a guid string
            </summary>
            <param name="guid"></param>
            <param name="typeLibGuidString"></param>
            <param name="typeLibVersionString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.RegistryHelper.TryResolveTypeLibFromInterfaceKey(System.String,System.String@,System.String@)">
            <summary>
            Tries to resolve the TypeLib guid and version strings
            </summary>
            <param name="key"></param>
            <param name="typeLibGuidString"></param>
            <param name="typeLibVersionString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.RegistryHelper.TryResolveCLSID(System.String,System.String@)">
            <summary>
            Tries to resolve the CLSID guid , given an interface guid string
            </summary>
            <param name="guid"></param>
            <param name="clsid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.RegistryHelper.TryResolveCLSIDFromInterfaceKey(System.String,System.String@)">
            <summary>
            Tries to resolve the CLSID guid and version strings
            </summary>
            <param name="key"></param>
            <param name="clsid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.RegistryHelper.TryResolveTypeLibThroughCLSID(System.String,System.String@,System.String@)">
            <summary>
            Tries to resolve the TypeLib guid and version from
            a CLSID guid string
            </summary>
            <param name="clsid"></param>
            <param name="typeLibGuidString"></param>
            <param name="typeLibVersionString"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.RegistryHelper.LocalMachine">
            <summary>
             Contains the configuration data for the local machine. This field reads the
             Windows registry base key HKEY_LOCAL_MACHINE.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.RegistryHelper.LocalMachine.SOFTWARE32">
            <summary>
            Gives back the SOFTWARE\Wow6432Node, or SOFTWARE in an 32-bit environment
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.RegistryHelper.ClassesRoot">
            <summary>
             Contains the configuration data for the local machine. This field reads the
             Windows registry base key HKEY_CLASSES_ROOT.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.RegistryHelper.ClassesRoot.Root">
            <summary>
            Gives back the Wow6432Node, or root in an 32-bit environment
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.RegistryHelper.ClassesRoot.OpenSubKey(System.String)">
            <summary>
            Opens a sub key
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.Indexable">
            <summary>
            Indexable helpers
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.ToArray``1(Microsoft.ExtendedReflection.Collections.ICopyable{``0})">
            <summary>
            Converts an indexable to an array. The resulting array must not be mutated!
            </summary>
            <param name="indexable">The indexable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.ToArrayOrEmpty``1(Microsoft.ExtendedReflection.Collections.ICopyable{``0})">
            <summary>
            Converts an indexable to an array or null if the indexable if null or empty
            </summary>
            <param name="indexable">The indexable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Array``1(``0[])">
            <summary>
            Creates the specified indexable.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Collection``1(System.Collections.ICollection)">
            <summary>
            Collections the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Collection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Collections the specified collection.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Segment``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.Int32)">
            <summary>
            Segments the specified indexable.
            </summary>
            <param name="indexable">The indexable.</param>
            <param name="start">The start.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Segment``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.Int32,System.Int32)">
            <summary>
            Segments the specified indexable.
            </summary>
            <param name="indexable">The indexable.</param>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.EmptyOrEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates the specified indexable.
            </summary>
            <param name="enumerable">The enumerable, or null.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.EmptyOrArray``1(``0[])">
            <summary>
            Creates the specified indexable.
            </summary>
            <param name="array">The array or null.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.TryEmptyOrArray``1(``0[],Microsoft.ExtendedReflection.Collections.IIndexable{``0}@)">
            <summary>
            Tries to create the specified indexable if non-null and non-empty
            </summary>
            <param name="array">The array or null.</param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Enumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates the specified indexable.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.IndexOf``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.Predicate{``0})">
            <summary>
            Gets the index of the first element that matches the predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elements"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Concat``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},``0)">
            <summary>
            Concatenates two indexables.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Concat``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},Microsoft.ExtendedReflection.Collections.IIndexable{``0})">
            <summary>
            Concatenates two indexables.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.FindAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified
            predicate.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="match">The match.</param>
            <returns></returns>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.TryFind``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)">
            <summary>
            Tries to find the first match.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="match">The match.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.ConvertAllOrEmpty``2(``0[],System.Converter{``0,``1})">
            <summary>
            Converts all or returns null if indexable is null.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="_indexable">The indexable (may be null).</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.ConvertAllOrEmpty``2(Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.Converter{``0,``1})">
            <summary>
            Converts all or returns null if indexable is null.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="_indexable">The indexable (may be null).</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.ConvertAll``2(Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.Converter{``0,``1})">
            <summary>
            Converts all.
            </summary>
            <param name="indexable">The indexable.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.TrueForAny``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.Predicate{``0})">
            <summary>Determines whether the specified indexable contains elements that match the conditions defined by the specified predicate.</summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.TrueForAll``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.Predicate{``0})">
            <summary>Determines whether the specified indexable contains only elements that match the conditions defined by the specified predicate.</summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.ConvertAllOrEmptyToArray``2(Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.Converter{``0,``1})">
            <summary>
            Converts all or returns null if indexable is null.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="_indexable">The indexable (may be null).</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.ConvertAllOrEmptyToArray``2(``0[],System.Converter{``0,``1})">
            <summary>
            Converts all or returns null if indexable is null.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="_array">The array (may be null).</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.ConvertAllToArray``2(Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.Converter{``0,``1})">
            <summary>
            Converts all.
            </summary>
            <param name="indexable">The indexable.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.ConvertAll``2(``0[],System.Converter{``0,``1})">
            <summary>
            Converts all.
            </summary>
            <param name="array">The array.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.ConvertAllToArray``2(``0[],System.Converter{``0,``1})">
            <summary>
            Converts all.
            </summary>
            <param name="array">The array.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.GetEmptyEnumerator``1">
            <summary>
            Creates an empty enumerator.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Empty``1">
            <summary>
            Creates an enumerable with zero elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.EmptyOrOne``1(``0)">
            <summary>
            Creates an enumerable containing a zero or one element.
            </summary>
            <param name="element">The element, or null.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.One``1(``0)">
            <summary>
            Creates an enumerable containing a single element.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Two``1(``0,``0)">
            <summary>
            Creates an enumerable containing two elements.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Sort``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the specified indexable.
            </summary>
            <param name="indexable">The indexable.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Sort``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.Comparison{``0})">
            <summary>
            Sorts the specified indexable.
            </summary>
            <param name="indexable">The indexable.</param>
            <param name="comparison">The comparison.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Equal``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},Microsoft.ExtendedReflection.Collections.IIndexable{``0},Microsoft.ExtendedReflection.Collections.EqualityComparison{``0})">
            <summary>
            Gets the value indicating if the elements of left and right are equal
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="equalityComparison"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Equal``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},Microsoft.ExtendedReflection.Collections.IIndexable{``0})">
            <summary>
            Gets the value indicating if the elements of left and right are equal
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Compare``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Compares the left and right values
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.Compare``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.Comparison{``0})">
            <summary>
            Compares the left and right values
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="comparison">The comparison.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.EnumerableUntyped``1(System.Collections.IEnumerable)">
            <summary>
            Enumerables the untyped.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.FindInstances``2(Microsoft.ExtendedReflection.Collections.IIndexable{``0})">
            <summary>
            Finds all the instances of TOutput
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Indexable.AreElementsEqual``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},Microsoft.ExtendedReflection.Collections.IIndexable{``0},Microsoft.ExtendedReflection.Collections.EqualityComparison{``0})">
            <summary>
            Checks that two indexable contain the same elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <param name="equality"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2">
            <summary>
            A safe replacement for sorted dictionary.
            </summary>
            <remarks>
            Safe here means that this class will not be instrumented.
            </remarks>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the specified value contains value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value contains value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.CopyTo(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to query the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.Item(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.Enumerator">
            <summary>
            Enumerator
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.Enumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.KeyCollection">
            <summary>
            Key collection
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.KeyCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeSortedDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.KeyCollection"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.KeyCollection.Contains(`0)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.KeyCollection.Microsoft#ExtendedReflection#Collections#ISet{TKey}#Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.KeyCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.KeyCollection.Enumerator">
            <summary>
            Enumerator
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.KeyCollection.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.KeyCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.KeyCollection.Enumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.ValueCollection">
            <summary>
            Value collection
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.ValueCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeSortedDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.ValueCollection"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.ValueCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.ValueCollection.Enumerator">
            <summary>
            Enumerator
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.ValueCollection.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.ValueCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeSortedDictionary`2.ValueCollection.Enumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.Map">
            <summary>
            Map helpers
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Map.Empty``2">
            <summary>
            Returns an empty table
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Map.Empty``2(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an empty table
            </summary>
            <param name="comparer">The comparer.</param>
            <returns></returns>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Map.One``2(System.Collections.Generic.IEqualityComparer{``0},``0,``1)">
            <summary>
            Returns a table with one entry
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Map.Two``2(System.Collections.Generic.IEqualityComparer{``0},``0,``1,``0,``1)">
            <summary>
            Returns a table with to entries
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="firstKey">The first key.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondKey">The second key.</param>
            <param name="secondValue">The second value.</param>
            <returns></returns>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Map.Array``2(System.Collections.Generic.IEqualityComparer{``0},Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{``0,``1}[])">
            <summary>
            Creates the specified table.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Map.Enumerable``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{``0,``1}})">
            <summary>
            Creates the specified table.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Map.EmpyOrEnumerable``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{``0,``1}})">
            <summary>
            Creates the specified indexable.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="enumerable">The enumerable, or null.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Map.Override``2(Microsoft.ExtendedReflection.Collections.IFiniteMap{``0,``1},Microsoft.ExtendedReflection.Collections.IFiniteMap{``0,``1})">
            <summary>
            Overrides the elements of the first table with elements of the second table.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Map.Override``2(Microsoft.ExtendedReflection.Collections.IFiniteMap{``0,``1},``0,``1)">
            <summary>
            Overrides the elements of the first table with elements of the second table.
            </summary>
            <param name="first">The first.</param>
            <param name="secondKey">The second key.</param>
            <param name="secondValue">The second value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Map.GetValues``2(Microsoft.ExtendedReflection.Collections.IFiniteMap{``0,``1})">
            <summary>
            Gets the values.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.Map.GetKeys``2(Microsoft.ExtendedReflection.Collections.IFiniteMap{``0,``1})">
            <summary>
            Gets the keys.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeOrderedSet`1">
            <summary>
            An ordered set
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeOrderedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.TreeSet`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeOrderedSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeOrderedSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeOrderedSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeOrderedSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeOrderedSet`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeOrderedSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeOrderedSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeOrderedSet`1.Comparer">
            <summary>
            Gets the comparer.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeOrderedSet`1.Enumerator">
            <summary>
            Enumerator
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeOrderedSet`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeOrderedSet`1.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeOrderedSet`1.Enumerator.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.RemotingHelper">
            <summary>
            Helper classes for setting up remoting
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.RemotingHelper.GetPortName(System.String)">
            <summary>
            Gets the name of the port.
            </summary>
            <param name="channelName">Name of the channel.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.RemotingHelper.TryRegisterServer(System.Type,System.String,System.Runtime.Remoting.Channels.IChannel@)">
            <summary>
            Tries to register the server.
            </summary>
            <param name="serverType">Type of the server.</param>
            <param name="channelName">Name of the channel.</param>
            <param name="channel">The channel.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.RemotingHelper.RegisterClient(System.String)">
            <summary>
            Registers the client.
            </summary>
            <param name="channelName">Name of the channel.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.RemotingHelper.GetUri(System.Type,System.String)">
            <summary>
            Gets the URI for a given type and channel name
            </summary>
            <param name="type">The type.</param>
            <param name="channelName">Name of the channel.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.RemotingHelper.GetObject``2(System.String)">
            <summary>
            Gets the remoting service instance.
            </summary>
            <typeparam name="TIdentifier">The type of the identifier.</typeparam>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="channelName">Name of the channel.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.RemotingHelper.UnregisterServer(System.Runtime.Remoting.Channels.IChannel)">
            <summary>
            Unregisters the server.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeDateTime">
            <summary>
            Fast replacements of the original DateTime functions
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.SafeDateTime.Now">
            <summary>
            Now
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeAssumptionException">
            <summary>
            Exception that is thrown when <see cref="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Assume(System.Boolean,System.String)"/> fails.
            </summary>
            <remarks>
            Actually, this exception is not "safe" at all, 
            but indicates a pre-condition has been violated.
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeContractException">
            <summary>
            Exception that is thrown when a contract fails.
            </summary>
            <remarks>
            Actually, this exception is not "safe" at all, but indicates a severe failure.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeContractException.#ctor">
            <summary>
            Creates an instance of this type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeContractException.#ctor(System.String)">
            <summary>
            Creates an instance of this type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeContractException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeContractException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of this type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeAssumptionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeAssumptionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeAssumptionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeAssumptionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeAssumptionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeAssumptionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeAssumptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeAssumptionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeTimer">
            <summary>
            High precision timer
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeTimer.ToSeconds(System.Int64,System.Int64)">
            <summary>
            Returns the duration of the timer (in seconds)
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeTimer.ToSeconds(System.Int64)">
             <summary>
            Returns the duration in seconds
             </summary>
             <param name="ticks">The ticks.</param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeTimer.ToSecondsFromNow(System.Int64)">
             <summary>
            Returns the duration in seconds from <paramref name="start"/>
             </summary>
             <param name="start">The start.</param>
             <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeTimer.Frequency">
            <summary>
            Gets the frequency.
            </summary>
            <value>The frequency.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeTimer.Now">
            <summary>
            Gets the current ticks value.
            </summary>
            <value>The now.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.IO.ProtectingTextWriter">
            <summary>
            A wrapping textwriter that sets up a protecting thread context.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareContentMode">
            <summary>
            Current writing mode
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareContentMode.Memory">
            <summary>
            In memory location
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareContentMode.File">
            <summary>
            Dumped to file
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString">
            <summary>
            A string that could be in memory or on a file
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString.ContentMode">
            <summary>
            Gets the content mode
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString.Value">
            <summary>
            Gets the in memory value
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString.FileName">
            <summary>
            Gets the backing file name
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString.FromMemory(System.String)">
            <summary>
            Froms the memory.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString.FromFile(System.String)">
            <summary>
            Creates a resource aware string from a file
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString.FromFile(System.String,System.String)">
            <summary>
            Creates a resource aware string from a file,
            with preview
            </summary>
            <param name="fileName"></param>
            <param name="preview"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString.TryLoadContent(System.String@,System.String@)">
            <summary>
            Loads the string from the disk if necessary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString.ToString">
            <summary>
            Returns a reasonably small string.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Dumps this instance to xml
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString.Equals(Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString"/> is empty.
            </summary>
            <value><c>true</c> if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString.FileUri">
            <summary>
            A uri that represents the file name
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter">
            <summary>
            A writer that starts writing to memory, then
            flips to disk when resource consumption gets too big.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.DefaultMaxLength">
            <summary>
            Maximum in memory length
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.DefaultPreviewLength">
            <summary>
            Default length of the preview string when switching to file mode
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="encoding">The encoding.</param>
            <param name="diagnostic">if set to <c>true</c> [diagnostic].</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.Write(System.Char)">
            <summary>
            Writes a character to the text stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
            <filterPriority>1</filterPriority>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.Write(System.String)">
            <summary>
            Writes a string to the text stream.
            </summary>
            <param name="value">The string to write.</param>
            <filterPriority>1</filterPriority>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text stream.
            </summary>
            <param name="value">The string to write. If <paramref name="value"/> is null, only the line termination characters are written.</param>
            <filterPriority>1</filterPriority>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.Close">
            <summary>
            Closes the current writer and releases any system resources associated with the writer.
            </summary>
            <filterPriority>1</filterPriority>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.TransferContent(System.String,System.IO.StreamWriter)">
            <summary>
            Transfers the content to the file writer
            </summary>
            <param name="content">The content.</param>
            <param name="fileWriter">The file writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.ToResourceAwareString">
            <summary>
            Returns a resource aware string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="E:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.ModeChanged">
            <summary>
            Raised when the writer starts writing to disk
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.ContentMode">
            <summary>
            Gets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.MaxLength">
            <summary>
            Gets the maximum in-memory length
            </summary>
            <value>The length of the max.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.PreviewLength">
            <summary>
            Gets the preview length when the writer is in file mode
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.Encoding">
            <summary>
            When overridden in a derived class, returns the <see cref="T:System.Text.Encoding"/> in which the output is written.
            </summary>
            <value></value>
            <returns>The Encoding in which the output is written.</returns>
            <filterPriority>1</filterPriority>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareWriter.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
            <exception cref="T:System.InvalidOperationException">
            The writer has been flushed to disk;.
            </exception>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray">
            <summary>
            Safe array methods
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.MinimumMbForResourceCheck">
            <summary>
            Minimum array size to perform memory fail point
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.Empty``1">
            <summary>
            Returns an empty array
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.EmptyOrArray``1(``0[])">
            <summary>
            Returns the given array, or an empty array if the given array is null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.ResourceAwareNew``1(System.Int32,System.Int32)">
            <summary>
            Allocates a new array. Performs a <see cref="T:System.Runtime.MemoryFailPoint"/> check if
            the estimated size of the array is greater that
            <see cref="F:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.MinimumMbForResourceCheck"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elementSize">Size of the element.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.Copy``1(``0[],``0[],System.Int32)">
            <summary>
            Copies the specified source array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="destinationArray">The destination array.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.Copy``1(``0[],System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
            Copies the specified source array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">Index of the source.</param>
            <param name="destinationArray">The destination array.</param>
            <param name="destinationIndex">Index of the destination.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.Contains``1(``0[],``0)">
            <summary>
            Determines whether the specified array contains <paramref name="value"/>.
            </summary>
            <param name="array">The array.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.Contains``1(``0[],``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether the specified array contains <paramref name="value"/>.
            </summary>
            <param name="array">The array.</param>
            <param name="value">The value.</param>
            <param name="comparer">The comparer.</param>
            <returns>
            	<c>true</c> if [contains] [the specified array]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.TrueForAny``1(``0[],System.Predicate{``0})">
            <summary>Determines whether the specified array contains elements that match the conditions defined by the specified predicate.</summary>
            <returns>true if array contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"></see> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"></see> that defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.TrueForAll``1(``0[],System.Predicate{``0})">
            <summary>Determines whether the specified array contains only elements that match the conditions defined by the specified predicate.</summary>
            <returns>true if array contains only elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"></see> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"></see> that defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Array"></see>.</summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"></see> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"></see> that defines the conditions of the element to search for.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array"></see> that extends from the specified index to the last element.</summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"></see> to search.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"></see> that defines the conditions of the element to search for.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array"></see> that starts at the specified index and contains the specified number of elements.</summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"></see> to search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"></see> that defines the conditions of the element to search for.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.FindAll``1(``0[],System.Predicate{``0})">
            <summary>Retrieves all the elements that match the conditions defined by the specified predicate.</summary>
            <returns>An <see cref="T:System.Array"></see> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Array"></see>.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"></see> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"></see> that defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.ForEach``1(``0[],Microsoft.ExtendedReflection.Utilities.Safe.SafeAction{``0})">
            <summary>Performs the specified action on each element of the specified array.</summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"></see> on whose elements the action is to be performed.</param>
            <param name="action">The <see cref="T:System.Action`1"></see> to perform on each element of array.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.IndexOf``1(``0[],``0)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the entire <see cref="T:System.Array"></see>.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire array, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"></see> to search.</param>
            <param name="value">The object to locate in array.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.IndexOf``1(``0[],``0,System.Int32)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the <see cref="T:System.Array"></see> that extends from the specified index to the last element.</summary>
            <returns>The zero-based index of the first occurrence of value within the range of elements in array that extends from startIndex to the last element, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"></see> to search.</param>
            <param name="value">The object to locate in array.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the <see cref="T:System.Array"></see> that starts at the specified index and contains the specified number of elements.</summary>
            <returns>The zero-based index of the first occurrence of value within the range of elements in array that starts at startIndex and contains the number of elements specified in count, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"></see> to search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="value">The object to locate in array.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.LastIndexOf``1(``0[],``0)">
            <summary>Searches for the specified object and returns the index of the last occurrence within the entire <see cref="T:System.Array"></see>.</summary>
            <returns>The zero-based index of the last occurrence of value within the entire array, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"></see> to search.</param>
            <param name="value">The object to locate in array.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.LastIndexOf``1(``0[],``0,System.Int32)">
            <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array"></see> that extends from the first element to the specified index.</summary>
            <returns>The zero-based index of the last occurrence of value within the range of elements in array that extends from the first element to startIndex, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"></see> to search.</param>
            <param name="value">The object to locate in array.</param>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array"></see> that contains the specified number of elements and ends at the specified index.</summary>
            <returns>The zero-based index of the last occurrence of value within the range of elements in array that contains the number of elements specified in count and ends at startIndex, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"></see> to search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="value">The object to locate in array.</param>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.IsNullOrEmpty``1(``0[])">
            <summary>
            Determines whether the array is null or empty
            </summary>
            <param name="separator">The separator.</param>
            <returns>
            	<c>true</c> if [is null or empty] [the specified separator]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.Sort``1(``0[])">
            <summary>
            Sorts the specified array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the specified array.
            </summary>
            <param name="array">The array.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the specified array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
            <param name="length">The length.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.Sort``1(``0[],System.Int32,System.Int32,System.Comparison{``0})">
            <summary>
            Sorts the specified array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
            <param name="length">The length.</param>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.Sort``1(``0[],System.Comparison{``0})">
            <summary>
            Sorts the specified array.
            </summary>
            <param name="array">The array.</param>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.Convert``2(``0[],System.Converter{``0,``1})">
            <summary>
            Converts the specified res.
            </summary>
            <param name="values">The values.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.ReverseInPlace``1(``0[])">
            <summary>
            Reverses the array in place
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reports"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.AreEqual``1(``0[],``0[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Checks that two arrays have equal content
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.AreEqual``1(``0[],``0[],Microsoft.ExtendedReflection.Collections.EqualityComparison{``0})">
            <summary>
            Checks that two arrays have equal content
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="comparison">The comparison.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.AreEqual``1(``0[],``0[])">
            <summary>
            Checks that two arrays have equal content
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.Concat``1(``0[],``0[],System.Int32)">
            <summary>
            Concatenates the two arrays (supports null as input parameters)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="rightIndex">Index of the right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.Concat``1(``0[],``0[])">
            <summary>
            Concatenates the two arrays (supports null as input parameters)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeArray.Equals``1(``0[],``0[])">
            <summary>
            Checks array elements are equal
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeComponent`1">
            <summary>
            A generic component element
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeComponent`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.SafeComponent`1.Owner">
            <summary>
            Gets the owner
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeAction">
            <summary>
            Empty delegate
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeAction`1">
            <summary>
            Consumes a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeAction`2">
            <summary>
            action that takes 2 arguments.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeAction`3">
            <summary>
            action that takes 2 arguments.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeFunc`1">
            <summary>
            Element factory
            </summary>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeFunc`2">
            <summary>
            Element factory
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeFunc`3">
            <summary>
            Converter that takes two arguments
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeExecution">
            <summary>
            Execution of delegate in safe environment
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeExecution.DropConstraints``1(``0)">
            <summary>
            Drops the constraints.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeExecution.Run(Microsoft.ExtendedReflection.Utilities.Safe.SafeAction)">
            <summary>
            Runs the specified action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeExecution.RunWithRetry(Microsoft.ExtendedReflection.Utilities.Safe.SafeAction)">
            <summary>
            Repeats the specified action.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeExecution.RunWithRetry(Microsoft.ExtendedReflection.Utilities.Safe.SafeAction,Microsoft.ExtendedReflection.Utilities.Safe.SafeAction{System.Exception,System.Int32})">
            <summary>
            Repeats the specified action.
            </summary>
            <param name="action">The action.</param>
            <param name="waitHandler">The wait handler.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeExecution.RunWithRetry(Microsoft.ExtendedReflection.Utilities.Safe.SafeAction,System.Int32,System.Int32,System.Int32,Microsoft.ExtendedReflection.Utilities.Safe.SafeAction{System.Exception,System.Int32})">
            <summary>
            Repeats the specified action.
            </summary>
            <param name="action">The action.</param>
            <param name="retryCount">The retry count.</param>
            <param name="wait">The wait in seconds between retries.</param>
            <param name="outerRetryCount">The outer retry count.</param>
            <param name="waitHandler">The wait handler.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeExecution.Action``1(Microsoft.ExtendedReflection.Utilities.Safe.SafeAction{``0},``0)">
            <summary>
            Runs the specified action.
            </summary>
            <param name="action">The action.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeExecution.Action``2(Microsoft.ExtendedReflection.Utilities.Safe.SafeAction{``0,``1},``0,``1)">
            <summary>
            Runs the specified action.
            </summary>
            <param name="action">The action.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeExecution.Factory``1(Microsoft.ExtendedReflection.Utilities.Safe.SafeFunc{``0})">
            <summary>
            Runs the specified action.
            </summary>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeMath">
            <summary>
            Safe replacements of System.Math
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeWeakReference`1">
            <summary>
            Also typesafe
            </summary>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeWeakReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeWeakReference`1"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeWeakReference`1.GetTarget(Microsoft.ExtendedReflection.Utilities.Safe.SafeWeakReference{`0})">
            <summary>
            Gets the target.
            </summary>
            <remarks>
            This method IS thread safe.
            </remarks>
            <param name="reference">The reference.</param>
            <returns></returns> 
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeWeakReference`1.SetTarget(Microsoft.ExtendedReflection.Utilities.Safe.SafeWeakReference{`0}@,`0)">
            <summary>
            Sets the target, and creates weak reference as necessary
            </summary>
            <remarks>
            This method is IS NOT thread-safe.
            </remarks>
            <param name="reference">The reference.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeWeakReference`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeWeakReference`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.SafeWeakReference`1.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Text.RegularExpressions.IRegexCache">
            <summary>
            A Regex compiler.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.RegularExpressions.IRegexCache.CompileRegex(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Compiles and returns the equivalent regex.
            </summary>
            <param name="pattern"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Text.RegularExpressions.RegexCache">
            <summary>
            Singleton type for <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.Text.RegularExpressions.IRegexCache"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.Text.RegularExpressions.RegexCache.Instance">
            <summary>
            Gets or sets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Text.RegularExpressions.EmptyRegexCache">
            <summary>
            Empty cache, 
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.RegularExpressions.EmptyRegexCache.CompileRegex(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            returns the usual regex
            </summary>
            <param name="pattern"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Text.RegularExpressions.InterpretedRegexCache">
            <summary>
            Interpreted cache, makes sure regex are never compiled
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.RegularExpressions.InterpretedRegexCache.CompileRegex(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            returns the usual regex
            </summary>
            <param name="pattern"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Text.RegularExpressions.CompiledRegexCache">
            <summary>
            Cache for compiled and instrument Regex methods
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Safe.Text.RegularExpressions.CompiledRegexCache.CompiledNamespace">
            <summary>
            Namespace that will hold the generated regex types
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.RegularExpressions.CompiledRegexCache.#ctor(Microsoft.ExtendedReflection.Logging.IEventLog,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.Text.RegularExpressions.CompiledRegexCache"/> class.
            </summary>
            <param name="log">The log.</param>
            <param name="outputDirectory">The output directory.</param>
            <param name="typeNameFormat">The type name format.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.RegularExpressions.CompiledRegexCache.CompileRegex(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Creates a cached instrumented regex. This method is thread safe.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder">
            <summary>
            A safe string builder
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder"/> class.
            </summary>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.Clear">
            <summary>
            Sets the length to zero; doesn't release memory, though.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.ClearAndTrim">
            <summary>
            Sets the length to zero and releases all allocated memory.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.Append(System.Char)">
            <summary>
            Appends the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.Append``1(``0)">
            <summary>
            Appends the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.Append(System.String)">
            <summary>
            Appends the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.Append(System.Char[],System.Int32,System.Int32)">
            <summary>
            Appends the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="start">The start.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.Append(System.String,System.Int32,System.Int32)">
            <summary>
            Appends the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="start">The start.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.Append(System.Char,System.Int32)">
            <summary>
            Appends the specified value the specified number of times.
            </summary>
            <param name="value">The value.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.AppendFormat(System.String,System.Object)">
            <summary>
            Appends the formatted string.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The arg0.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.AppendFormat(System.String,System.Object,System.Object)">
            <summary>
            Appends the formatted string.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The arg0.</param>
            <param name="arg1">The arg1.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Appends the formatted string.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The arg0.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.AppendFormat(System.String,System.Object[])">
            <summary>
            Appends the formatted string.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the formatted string.
            </summary>
            <param name="provider">The provider.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.AppendLine">
            <summary>
            Appends the default line terminator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.AppendLine(System.String)">
            <summary>
            Appends a copy of the specified string and the default line terminator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.IndexOf(System.Char,System.Int32)">
            <summary>
            Searches for a character
            </summary>
            <param name="value">The character value to search for.</param>
            <param name="startIndex">The index to stat searching at.</param>
            <returns>
            The index of the first occurence of value or -1 if it is not found.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.LastIndexOf(System.Char,System.Int32)">
            <summary>
            Searches for a character in reverse
            </summary>
            <param name="value">The character to search for.</param>
            <param name="startIndex">The index to start the search at.</param>
            <returns>
            The index of the last occurence of value in text or -1 if it is not found.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.GetChars">
            <summary>
            Don't mutate.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.Length">
            <summary>
            Sets or gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder.Item(System.Int32)">
            <summary>
            Gets the character at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Xml.EmbeddedResourceResolver">
            <summary>
            Embedded xslt resource resolver
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.EmbeddedResourceResolver.#ctor(System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.Xml.EmbeddedResourceResolver"/> class.
            </summary>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.EmbeddedResourceResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Maps a URI to an object containing the actual resource.
            </summary>
            <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)"></see></param>
            <param name="role">The current implementation does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios.</param>
            <param name="ofObjectToReturn">The type of object to return. The current implementation only returns System.IO.Stream objects.</param>
            <returns>
            A System.IO.Stream object or null if a type other than stream is specified.
            </returns>
            <exception cref="T:System.NullReferenceException">absoluteUri is null. </exception>
            <exception cref="T:System.UriFormatException">The specified URI is not an absolute URI. </exception>
            <exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
            <exception cref="T:System.Xml.XmlException">ofObjectToReturn is neither null nor a Stream type. </exception>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase">
            <summary>
            A base class for building efficient xml transformations
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase.#ctor">
            <summary>
            Initializes a new instance of the visitor
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase.Transform(System.Xml.XmlReader,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Applies the transformation from the reader to the writer
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase.WriteDocType(System.Xml.XmlReader,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes document type
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase.WriteProcessingInstruction(System.Xml.XmlReader,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            writes processing instruction
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase.WriteEndElement(System.Xml.XmlReader,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the end element
            </summary>
            <param name="reader"></param> 
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase.WriteWhitespace(System.Xml.XmlReader,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes a whitespace from the reader to the writer
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase.WriteComment(System.Xml.XmlReader,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes a comment from the reader to the writer
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase.WriteCDATA(System.Xml.XmlReader,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes a CDATA from the reader to the writer
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase.WriteText(System.Xml.XmlReader,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes text from the reader to the writer
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase.WriteElement(System.Xml.XmlReader,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Write element
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase.WriteElement(System.Xml.XmlReader,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter,System.Boolean)">
            <summary>
            Writes the element
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
            <param name="emptyElement"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase.WriteAttributes(System.Xml.XmlReader,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the element attributes from the reader to the writer
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase.WriteElementNoDescendant(System.Xml.XmlReader,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Advances the read pointer till the end of the element
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.SecurityHelper">
            <summary>
            Security related helpers
            </summary>
            <remarks>
            Most of these methods come from http://blogs.msdn.com/shawnfa
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.SecurityHelper.IsCurrentUserAdministrator">
            <summary>
            Checks if the current user has administrator rights
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.SecurityHelper.GetNamedPermissionSet(System.String)">
            <summary>
            Get a named permission set from the security policy
            </summary>
            <param name="name">Name of the permission set to retrieve</param>
            <exception cref="T:System.ArgumentException">If name is null or empty</exception>
            <returns>
            The intersection of permission sets with the given name from all policy
            levels, or an empty set if the name is not found
            </returns>
            <remarks>
            source: http://blogs.msdn.com/shawnfa/archive/2004/10/22/246549.aspx
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.SecurityHelper.CreateStrongName(System.Reflection.Assembly)">
            <summary>
            Create a StrongName that matches a specific assembly
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.SecurityHelper.AddClassAttribute(System.Security.SecurityElement,System.Type)">
            <summary>
            Adds the 'class' attribute to a security element
            </summary>
            <param name="element"></param>
            <param name="type"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.VirtualMemory">
            <summary>
            Helper to allocate Win32 memory at fixed addresses.
            </summary>
            <remarks>
            The allocated memory region is separated into 3 areas. 
            Two offset define a lower and upper regions where 
            read and write should not occur. The 'active' memory 
            region is exposed to the user through the BaseAddress
            and Size properties.
            
            The instance can validate the memory after a run by
            ensuring that the values in the left and right regions
            are still 0. This mechanism will detect incorrect writes,
            but won't detect incorrect reads. 
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.VirtualMemory.Allocate(System.UIntPtr)">
            <summary>
            Allocates the specified size.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.VirtualMemory.TryAllocate(System.UIntPtr,System.UIntPtr,Microsoft.ExtendedReflection.Utilities.VirtualMemory@)">
            <summary>
            Allocates a chunk of memory, preferably at the specified address.
            </summary>
            <param name="address">The address.</param>
            <param name="size">The size.</param>
            <param name="virtualMemory">The virtual memory.</param>
            <returns></returns>
            <exception cref="T:System.OutOfMemoryException">when the allocation fails</exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.VirtualMemory.Clear">
            <summary>
            Resets the content of the virtual memory buffers
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.VirtualMemory.Validate">
            <summary>
            Inspects left and right memory regions for forbidden writes
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.VirtualMemory.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Microsoft.ExtendedReflection.Utilities.VirtualMemory"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.VirtualMemory.Dispose">
            <summary>
            Frees the allocated memory.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.VirtualMemory.BaseAddress">
            <summary>
            Gets the base address of the actually allocated memory.
            </summary>
            <value>The base address.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.VirtualMemory.Size">
            <summary>
            Gets the size of the allocated memory.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.VirtualMemory.UserBaseAddress">
            <summary>
            Gets the base address of the actually allocated memory available to the user.
            </summary>
            <value>The base address.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.VirtualMemory.UserSize">
            <summary>
            Gets the size of the allocated memory available to the user.
            </summary>
            <value>The size.</value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.XmlHelper">
            <summary>
            XML little helpers
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.XmlHelper.SkipElement(System.Xml.XmlReader)">
            <summary>
            Advances the read pointer till the end of the element
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.XmlHelper.TryReadAttributeString(System.Xml.XmlReader,System.String,System.String@)">
            <summary>
            Tries to read a particular attribute string
            </summary>
            <param name="reader"></param>
            <param name="attributeName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.XmlHelper.ReadAttributeBool(System.Xml.XmlReader,System.String)">
            <summary>
            Tries to parse an integer from the xml stream
            </summary>
            <param name="reader">The reader.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.XmlHelper.TryReadAttributeInt(System.Xml.XmlReader,System.String,System.Int32@)">
            <summary>
            Tries to parse an integer from the xml stream
            </summary>
            <param name="reader"></param>
            <param name="attributeName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.XmlHelper.TryReadAttributeShort(System.Xml.XmlReader,System.String,System.Int16@)">
            <summary>
            Tries to parse an integer from the xml stream
            </summary>
            <param name="reader"></param>
            <param name="attributeName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.XmlHelper.TryReadAttributeByte(System.Xml.XmlReader,System.String,System.Byte@)">
            <summary>
            Tries to parse an integer from the xml stream
            </summary>
            <param name="reader"></param>
            <param name="attributeName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.XmlHelper.TryReadAttributeDouble(System.Xml.XmlReader,System.String,System.Double@)">
            <summary>
            Tries to parse a double from the xml stream
            </summary>
            <param name="reader"></param>
            <param name="attributeName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.XmlHelper.TryReadAttributeGuid(System.Xml.XmlReader,System.String,System.Guid@)">
            <summary>
            Tries to parse an guid from the xml stream
            </summary>
            <param name="reader"></param>
            <param name="attributeName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.XmlHelper.TryReadAttributeEnum``1(System.Xml.XmlReader,System.String,``0@)">
            <summary>
            Tries to parse an enum from the xml stream
            </summary>
            <param name="reader"></param>
            <param name="attributeName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.XmlHelper.TryReadAttributeDateTime(System.Xml.XmlReader,System.String,System.DateTime@)">
            <summary>
            Tries to parse an date time from the xml stream
            </summary>
            <param name="reader"></param>
            <param name="attributeName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.XmlHelper.TryReadAttribute``1(System.Xml.XmlReader,System.String,Microsoft.ExtendedReflection.Utilities.XmlHelper.TryParseHandler{``0},``0@)">
            <summary>
            Tries to parse a value from an xml attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="attributeName"></param>
            <param name="tryParse"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.XmlHelper.IsInvalidCharacter(System.Char)">
            <summary>
            Determines whether given character is an invalid Xml character.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.XmlHelper.EscapeToBuilder(System.String,Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder)">
            <summary>
            Appends an escaped xml string to a string builder.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.XmlHelper.EscapeToCDATABuilder(System.String,Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder)">
            <summary>
            Appends an escaped xml string to a string builder (for CDATA sections)
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.XmlHelper.TryParseHandler`1">
            <summary>
            A delegate that maps to usual TryParse methods
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.XmlDocumentation.IXmlDocumentation">
            <summary>
            An queryable xml documentation 
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.IXmlDocumentation.TryTransformMemberDocumentation(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference,System.String,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Tries to apply a forward only transformation of the xml comments
            </summary>
            <param name="method"></param>
            <param name="elementName">member, summary, remarks, etc...</param>
            <param name="transform"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.IXmlDocumentation.TryGetExceptionTypes(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference,Microsoft.ExtendedReflection.Collections.IIndexable{System.String}@)">
            <summary>
            Tries to get documented exception for a given member
            </summary>
            <param name="method"></param>
            <param name="exceptions"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationEncoding">
            <summary>
            Map from reflection to encoding used in an xml doc file.
            </summary>
            <remarks>
            All parameters are expected to be non-null unless stated otherwise.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationEncoding.GetSignature(Microsoft.ExtendedReflection.Metadata.Interfaces.ITypeReference)">
            <summary>
            Gets the xml doc signature of a given type reference
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationEncoding.GetSignature(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets the xml signature of a given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationEncoding.GetSignature(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference)">
            <summary>
            Creates the method signature in xml doc format
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationEncoding.GetMethodSignature(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference)">
            <summary>
            Creates method signature in xml doc format.
            </summary>
            <example>M:System.Data.DataSet.#ctor</example>
            <example>M:ExceptionTests.Generics`1.meth(`0,System.Collections.Generic.ICollection{`0})</example>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/csspec/html/vclrfCSharpSpec_B_3_1.asp
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationEncoding.GetPropertySignature(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference)">
            <summary>
            Creates a property signature in xml doc format.
            </summary>
            <example>P:System.Configuration.ConfigurationElement.EvaluationContext</example>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/csspec/html/vclrfCSharpSpec_B_3_1.asp
            </remarks>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Symbols.StackTraceName">
            <summary>
            An enhanced StackTrace
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.#ctor(System.String,Microsoft.ExtendedReflection.Symbols.StackFrameName[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Symbols.StackTraceName"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="frames">The frames.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.#ctor(Microsoft.ExtendedReflection.Symbols.StackFrameName[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Symbols.StackTraceName"/> class.
            </summary>
            <param name="frames">The frames.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.FromFrames(System.Diagnostics.StackFrame[])">
            <summary>
            Creates a stacktrace from the frames
            </summary>
            <param name="frames">The frames.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.FromFrames(System.Diagnostics.StackTrace)">
            <summary>
            Creates a serializable stacktrace
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.ToBuildMessage">
            <summary>
            Generates a build message
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.TryGetFirstFrameWithSourceInformation(Microsoft.ExtendedReflection.Symbols.StackFrameName@)">
            <summary>
            Gets the first frame with source information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.GetHash(Microsoft.ExtendedReflection.Symbols.IStackFrameFilter)">
            <summary>
            Gets a stack trace hash
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.WriteXml(Microsoft.ExtendedReflection.Symbols.ISymbolManager,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the stack trace.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.Empty">
            <summary>
            Creates an empty stack trace
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.CloneWithSourceInformation(Microsoft.ExtendedReflection.Symbols.ISymbolManager)">
            <summary>
            Clones current stack frame and tries to update source information
            </summary>
            <param name="symbols"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.Equals(System.Object)">
            <summary>
            Checks equality with another stackt race
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.Equals(Microsoft.ExtendedReflection.Symbols.StackTraceName)">
            <summary>
            Gets a value indicating if the stack trace is equivalent to the current stack
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.GetHashCode">
            <summary>
            Gets the hash code of the current instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Symbols.StackTraceName.Internalize">
            <summary>
            Internalizes the current stack trace
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.StackTraceName.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.StackTraceName.Frames">
            <summary>
            Gets the frames.
            </summary>
            <value>The frames.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Symbols.StackTraceName.SourceInformationFromSymbols">
            <summary>
            Gets a value indicating whether the source information has been updated with symbols
            </summary>
            <value>
            	<c>true</c> if [source information from symbols]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.AssemblyNameComparer">
            <summary>
            A comparer for <see cref="T:System.Reflection.AssemblyName"/>
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyNameComparer.Compare(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyNameComparer.Equals(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.AssemblyNameComparer.GetHashCode(System.Reflection.AssemblyName)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeEqualityComparer`1">
            <summary>
            Class providing optimized default equality comparer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Collections.SafeEqualityComparer`1.Default">
            <summary>
            Default comparer.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeComparer`1">
            <summary>
            Class providing optimized default comparer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Collections.SafeComparer`1.Default">
            <summary>
            Default comparer.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.IFormatProviderEx">
            <summary>
            Data types which provide formatting implement the <see cref="T:Microsoft.ExtendedReflection.Utilities.IFormatProviderEx"/> interface. 
            On Formats itself, the method ToPrettyFormat is identity.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.IFormatProviderEx.ToFormat">
            <summary>
            Returns a format.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Format">
            <summary>
            A format is a value which can be converted to a string or written to a file, 
            given a certain margin width in which the format should fit.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> 
            that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.ToFormat">
            <summary>
            Returns a format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.Literal(System.String)">
            <summary>
            A Literal is an atomic piece of text. 
            Don't use new lines in literals.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Format.Empty">
            <summary>
            An empty format is often required as a neutral element for constructing Formats; it is represented as Literal containing an empty string. 
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Format.Space">
            <summary>
            A space is a Literal containing a string with whitespace.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Format.Comma">
            <summary>
            A comma is a literal containing a string with a comma.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Format.Open">
            <summary>
            Literal with opening parenthesis.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Format.Close">
            <summary>
            Literal with closing parenthesis.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Format.CurlyOpen">
            <summary>
            Literal with curly opening parenthesis.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Format.CurlyClose">
            <summary>
            Literal with curly closing parenthesis.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Format.Dot">
            <summary>
            Literal with dot.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Format.Colon">
            <summary>
            Literal with colon.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Format.BracketOpen">
            <summary>
            Literal with opening bracket.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Format.BracketClose">
            <summary>
            Literal with closing bracket.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.TextToFormat(System.String)">
            <summary>
            A given text which might contain line breaks is converted to a format this method.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.Aside(Microsoft.ExtendedReflection.Utilities.Format,System.Int32,System.Int32,Microsoft.ExtendedReflection.Utilities.Format)">
            <summary>
            Two Formats can be put aside. A space and an Indent is given. The numbers of spaces are inserted if the Formats are put on the same line; the Indent is used if the Formats need to be put on different lines. 
            The algorithm for printing affixed Formats is as follows: the Right format is converted under the assumption a break has took place, i.e. it assumes the current margin width minus the Indent. But if its resulting width in fact fits on the current line with the Left format's representation, space's are inserted and the format is put on the current line. The result of this algorithm in general is that deeper nested affixes glue tighter. 
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.Aside(Microsoft.ExtendedReflection.Utilities.Format,System.Int32,Microsoft.ExtendedReflection.Utilities.Format)">
            <summary>
            Shortcut to put Formats aside.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.Aside(Microsoft.ExtendedReflection.Utilities.Format,Microsoft.ExtendedReflection.Utilities.Format)">
            <summary>
            Shortcut to put Formats aside.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.op_Addition(Microsoft.ExtendedReflection.Utilities.Format,Microsoft.ExtendedReflection.Utilities.Format)">
            <summary>
            Shortcut to put Formats aside.
            </summary>
        </member>
        <member name="F:Microsoft.ExtendedReflection.Utilities.Format.defaultIndentation">
            <summary>
            Shortcut to put Formats aside.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.FixedAside(Microsoft.ExtendedReflection.Utilities.Format,Microsoft.ExtendedReflection.Utilities.Format)">
            <summary>
            Sometimes it is necessary to enforce that to Formats are printed on the same line, 
            even if the margin goal width is violated by this.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.Beneath(Microsoft.ExtendedReflection.Utilities.Format[])">
            <summary>
            This basic composition operator for Formats is placing them beneath. 
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.Beneath(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Utilities.Format})">
            <summary>
            This basic composition operator for Formats is placing them beneath. 
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.Beneath(Microsoft.ExtendedReflection.Utilities.Format,Microsoft.ExtendedReflection.Utilities.Format)">
            <summary>
            This basic composition operator for Formats is placing them beneath. 
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.Indent(System.Int32,Microsoft.ExtendedReflection.Utilities.Format)">
            <summary>
            Indent a format. That means that all the lines the format produces are indented by the given amount.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.List(System.String,System.String,System.String,Microsoft.ExtendedReflection.Utilities.Format[])">
            <summary>
            A common situation for Formats is a list-like structure, which is supported by this method.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.List(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Utilities.Format})">
            <summary>
            A common situation for Formats is a list-like structure, which is supported by this method.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.OptionalList(System.String,System.String,System.String,Microsoft.ExtendedReflection.Utilities.Format[])">
            <summary>
            A common situation for Formats is a list-like structure, which is supported by this method.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.OptionalList(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Utilities.Format})">
            <summary>
            A common situation for Formats is a list-like structure, which is supported by this method.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.List(Microsoft.ExtendedReflection.Utilities.Format,Microsoft.ExtendedReflection.Utilities.Format,Microsoft.ExtendedReflection.Utilities.Format,Microsoft.ExtendedReflection.Utilities.Format[])">
            <summary>
            A common situation for Formats is a list-like structure, which is supported by this method.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.List(Microsoft.ExtendedReflection.Utilities.Format,Microsoft.ExtendedReflection.Utilities.Format,Microsoft.ExtendedReflection.Utilities.Format,System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Utilities.Format})">
            <summary>
            A common situation for Formats is a list-like structure, which is supported by this method.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.List(Microsoft.ExtendedReflection.Utilities.Format,Microsoft.ExtendedReflection.Utilities.Format[])">
            <summary>
            A common situation for Formats is a list-like structure, which is supported by this method.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.List(Microsoft.ExtendedReflection.Utilities.Format,System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Utilities.Format})">
            <summary>
            A common situation for Formats is a list-like structure, which is supported by this method.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.Application(Microsoft.ExtendedReflection.Utilities.Format,Microsoft.ExtendedReflection.Utilities.Format[])">
            <summary>
            An application-like format.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.Application(Microsoft.ExtendedReflection.Utilities.Format,System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Utilities.Format})">
            <summary>
            An application-like format.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.Infix(Microsoft.ExtendedReflection.Utilities.Format,Microsoft.ExtendedReflection.Utilities.Format,Microsoft.ExtendedReflection.Utilities.Format)">
            <summary>
            An infix-like format.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.ToString(System.Int32)">
            <summary>
            Returns a string.
            </summary>
            <param name="margin">The margin.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Format.Write(System.IO.TextWriter,System.Int32)">
            <summary>
            Writes to the specified stream.
            </summary>
            <param name="writer">The writer.</param>
            <param name="margin">The margin.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.HtmlHelper">
            <summary>
            HTMl validation (debug only)
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.HtmlHelper.ValidateHtml(Microsoft.ExtendedReflection.Logging.IEventLog,System.String)">
            <summary>
            Validates the HTML against its DTD
            </summary>
            <param name="log">The log.</param>
            <param name="inputUri">The input URI.</param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Factory`1">
            <summary>
            Provides a value.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Factories`1">
            <summary>
            Methods to create factories.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Factories`1.Cache(Microsoft.ExtendedReflection.Utilities.Factory{`0})">
            <summary>
            Create a factory that caches the result.
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Factories`1.Constant(`0)">
            <summary>
            Turns a value into a constant factory.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.ResourceHelper">
            <summary>
            Helper methods to handle embedded resources
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ResourceHelper.LoadTransform(System.String,System.Reflection.Assembly[])">
            <summary>
            Loads the transform.
            </summary>
            <param name="name">The name.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ResourceHelper.DumpResourceBinary(System.String,System.Type,System.String)">
            <summary>
            Dumps the resource binary.
            </summary>
            <param name="outputDirectory">The output directory.</param>
            <param name="typeFromNamespace">The type from namespace.</param>
            <param name="resource">The resource.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ResourceHelper.DumpResource(System.String,System.Type,System.String)">
            <summary>
            Dumps the resource.
            </summary>
            <param name="outputDirectory">The output directory.</param>
            <param name="typeFromNamespace">The type from namespace.</param>
            <param name="resource">The resource.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ResourceHelper.LoadResource(System.Reflection.Assembly,System.String)">
            <summary>
            Loads the resource.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="resourceName">Name of the resource.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.ResourceHelper.LoadResource(System.Type,System.String)">
            <summary>
            Loads the resource.
            </summary>
            <param name="typeFromNamespace">The type from namespace.</param>
            <param name="resource">The resource.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2">
            <summary>
            A safe replacement for dictionary.
            </summary>
            <remarks>
            Safe here means that this class will not be instrumented.
            This implementation is deterministic, i.e. the hashcode of values does not affect the order in which elements are returned by the enumerator.
            </remarks>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.GetOrCreateValue``1(`0,``0,Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary{`0,`1}.ValueCreator{``0})">
            <summary>
            Gets or creates value.
            </summary>
            <remarks>
            The purpose of the context argument is to enable statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="key">The key.</param>
            <param name="context">The context.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.SynchronizedGetOrCreateValue``1(`0,``0,Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary{`0,`1}.ValueCreator{``0})">
            <summary>
            Gets or creates value.
            </summary>
            <remarks>
            The purpose of the context argument is to enable statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="key">The key.</param>
            <param name="context">The context.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.GetOrCreateValue(`0,Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary{`0,`1}.ValueCreator)">
            <summary>
            Gets or creates the value.
            </summary>
            <param name="key">The key.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
            <remarks>
            This method should be used with statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.SynchronizedGetOrCreateValue(`0,Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary{`0,`1}.ValueCreator)">
            <summary>
            Gets or creates the value.
            </summary>
            <param name="key">The key.</param>
            <param name="valueCreator">The value creator.</param>
            <returns></returns>
            <remarks>
            This method should be used with statically allocated delegates.
            To this end, non-trivial delegates passed to this method should always be declared as
            a static method, to prevent accidental closures.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}})">
            <summary>
            Adds the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.AddRange(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}[])">
            <summary>
            Adds the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.OverrideRange(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}})">
            <summary>
            Overrides the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.OverrideRange(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}[])">
            <summary>
            Overrides the range.
            </summary>
            <param name="entries">The entries.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.ContainsKey(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.ContainsValue(`1)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.CopyTo(Microsoft.ExtendedReflection.Collections.SafeKeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.Item(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.ValueCreator`1">
            <summary>
            Value creator delegate.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.ValueCreator">
            <summary>
            Value creator delegate.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.KeyCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.KeyCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary{`0,`1})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.KeyCollection.Contains(`0)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.KeyCollection.Microsoft#ExtendedReflection#Collections#ISet{TKey}#Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.KeyCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.KeyCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.KeyCollection.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.KeyCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.KeyCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.ValueCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.ValueCollection.#ctor(Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary{`0,`1})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.ValueCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.ValueCollection.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.ValueCollection.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.ValueCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableDictionary`2.ValueCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1">
            <summary>
            A safe implementation of a set
            </summary>
            <remarks>
            Safe means that the code is not instrumented
            This implementation is deterministic, i.e. the hashcode of values does not affect the order in which elements are returned by the enumerator.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.Clear">
            <summary>
            Removes all elements.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.Add(`0)">
            <summary>
            Adds the element <code>t</code> to the set
            </summary>
            If the element is already in the set, it returns false otherwise true
            <param name="key">element to add</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.Remove(`0)">
            <summary>
            Removes the element <code>t</code> from the set;
            if the element is in the set, it returns <code>true</code>, otherwise <code>false</code>.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.Choose(System.Random)">
            <summary>
            Chooses (deterministically) some element of the set
            </summary>
            <param name="random">random value generator, or <code>null</code> to return elements in (roughly) insertion order</param>
            <remarks>
            The set must be non-empty.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.Contains(`0)">
            <summary>
            Tests whether <code>t</code> is an element of the set
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.Intersect(Microsoft.ExtendedReflection.Collections.SafeEquatableSet{`0})">
            <summary>
            Calculates the intersection of this set and the given set
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.DeepEquals(Microsoft.ExtendedReflection.Collections.SafeEquatableSet{`0})">
            <summary>
            Whether this set is deeply equal to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of elements
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes a range of elements
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.ToArray">
            <summary>
            Turns the elements into an array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.ToIndexable">
            <summary>
            Turns the elements into an indexable collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.GetEnumerator">
            <summary>
            Creates an enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.Microsoft#ExtendedReflection#Collections#ISet{T}#Comparer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.Count">
            <summary>
            the number of elements in this set
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeEquatableSet`1.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeQueue`1">
            <summary>
            A safe replacement of the queue class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.EnqueueRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.Enqueue(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.Dequeue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.TryDequeue(`0@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.TrimExcess">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeQueue`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeQueue`1.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeQueue`1.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeQueue`1.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeStack`1">
            <summary>
            A safe replacement of the stack class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.ClearAndTrim">
            <summary>
            Removes all elements, and trims the size of the stack.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.TrimExcess">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.Peek(System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.Pop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.Pop(System.Int32)">
            <summary>
            Pops the specified number of elements.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.Push(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.ToArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeStack`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Collections.SafeStack`1.Enumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Collections.SafeStack`1.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Collections.SafeStack`1.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeAssertionException">
            <summary>
            Exception that is thrown when <see cref="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Assert(System.Boolean,System.String)"/> fails.
            </summary>
            <remarks>
            Actually, this exception is not "safe" at all, but indicates a severe failure.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeAssertionException.#ctor">
            <summary>
            Creates an instance of this type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeAssertionException.#ctor(System.String)">
            <summary>
            Creates an instance of this type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeAssertionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this type.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeAssertionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of this type.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug">
            <summary>
            This class provides safe replacements of diagnostics and debug methods.
            </summary>
            <remarks>
            Safe here means that this class will not be instrumented.
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.SetBreakOnAssert(System.Boolean)">
            <summary>
            Sets the break on assert value
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.SetCrashOnAssert(System.String)">
            <summary>
            Sets the break on assert value
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Internalize(Microsoft.ExtendedReflection.Collections.IInternalizable)">
            <summary>
            Internalizes twice an internalizable instance
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Assert(System.Boolean,System.String)">
            <summary>
            Assert a condition. Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssertFalse(System.Boolean,System.String)">
            <summary>
            Asserts that a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssertNotNull(System.Object,System.String)">
            <summary>
            Assert that an object is not null. Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="object"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Asserts that the value is not null or empty. Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssertNotNullOrEmpty``1(``0[],System.String)">
            <summary>
            Asserts that the value is not null or empty. Breaks into the debugger if the condition does not hold.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssertElementsNotNull(System.Object[],System.String)">
            <summary>
            Assert that the elements of an array are not null. 
            Does not fail if array is null.
            Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="array"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssertElementsNotNull``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.String)">
            <summary>
            Assert that the elements of an array are not null.
            Does not fail if array is null.
            Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="indexable">The indexable.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Assert a condition. Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="format">The format.</param>
            <param name="arg0">The first argument of the format string</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Assert a condition. Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="format">The format.</param>
            <param name="arg0">The first argument of the format string.</param>
            <param name="arg1">The second argument of the format string.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Assert a condition. Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssertAreEqual(System.Int32,System.Int32)">
            <summary>
            Asserts that 2 integers are equal
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Assume(System.Boolean,System.String)">
            <summary>
            Assume a condition. Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssumeFalse(System.Boolean,System.String)">
            <summary>
            Assumes that a condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssumeNotNull(System.Object,System.String)">
            <summary>
            Assume that an object is not null. Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="object"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssumeNotNullOrEmpty(System.String,System.String)">
            <summary>
            Assumes the not null or empty.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssumeNotNullOrEmpty``1(``0[],System.String)">
            <summary>
            Assumes the not null or empty.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssumeElementsNotNull(System.Object[],System.String)">
            <summary>
            Assume that the elements of an array are not null. 
            Does not fail if array is null.
            Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="array"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssumeElementsNotNull``1(Microsoft.ExtendedReflection.Collections.IIndexable{``0},System.String)">
            <summary>
            Assume that the elements of an array are not null.
            Does not fail if array is null.
            Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="indexable">The indexable.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Assume(System.Boolean,System.String,System.Object)">
            <summary>
            Assume a condition. Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="format">The format.</param>
            <param name="arg0">The first argument to be replaced in the format string.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Assume(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Assume a condition. Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="format">The format.</param>
            <param name="arg0">The first argument to be replaced in the format string.</param>
            <param name="arg1">The second argument to be replaced in the format string.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Assume(System.Boolean,System.String,System.Object[])">
            <summary>
            Assume a condition. Breaks into the debugger if the condition does not hold.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Fail">
            <summary>
            Fail. Breaks into the debugger.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.FailOnUnexpectedValue``1(``0)">
            <summary>
            Fail because of unexpected value. Breaks into the debugger.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.FailOnUnimplemented(System.String)">
            <summary>
            Fail because of unimplemented feature. Breaks into the debugger.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.FailOnUnimplemented(System.String,System.Object[])">
            <summary>
            Fail because of unimplemented feature. Breaks into the debugger.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Fail(System.String)">
            <summary>
            Fail. Breaks into the debugger.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.FailUnreachable">
            <summary>
            Fail because code should be unreachble. Breaks into the debugger.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.Fail(System.String,System.Object[])">
            <summary>
            Fail. Breaks into the debugger.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.FailOnException(System.Exception)">
            <summary>
            Fail. Breaks into the debugger.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssumeFail">
            <summary>
            AssumeFail. Breaks into the debugger.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssumeFailOnUnexpectedValue``1(``0)">
            <summary>
            AssumeFail because of unexpected value. Breaks into the debugger.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssumeFail(System.String)">
            <summary>
            AssumeFail. Breaks into the debugger.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssumeFail(System.String,System.Object[])">
            <summary>
            AssumeFail. Breaks into the debugger.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.AssumeFailOnException(System.Exception)">
            <summary>
            AssumeFail. Breaks into the debugger.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.FatalFail">
            <summary>
            Fatal Fail. Does not return.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.FatalFail(System.String)">
            <summary>
            Fatal Fail. Does not return.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.FatalFail(System.String,System.Object[])">
            <summary>
            Fatal Fail. Does not return.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.FatalFailOnUnexpectedValue``1(``0)">
            <summary>
            Fatal Fail. Does not return.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.FatalFailOnUnexpectedIntPtrSize">
            <summary>
            Fatal Fail. Does not return.
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.TraceListenerContext">
            <summary>
            Injects a non-blocking trace listener,
            and restores the orignal ones when disposing.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebug.TraceListenerContext.Create(System.Action{System.String})">
            <summary>
            Creates the trace listener context
            </summary>
            <param name="asserter">The asserter.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebugger">
            <summary>
            Safe replacement for debugger class
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebugger.BreakIf(System.Boolean,System.String)">
            <summary>
            Break into the debugger.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebugger.BreakIf(System.Boolean)">
            <summary>
            Break into the debugger.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebugger.Break">
            <summary>
            Break into the debugger.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Diagnostics.SafeDebugger.Break(System.String)">
            <summary>
            Break into the debugger.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter">
            <summary>
            This class implements a text writer that writes to a string buffer and allows
            the resulting sequence of characters to be presented as a string.
            (Copy of StringWriter)
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.#ctor(System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter"/> class.
            </summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"></see> object that controls formatting.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.#ctor(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter"/> class.
            </summary>
            <param name="sb">The sb.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.#ctor(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter"/> class.
            </summary>
            <param name="stringBuilder">The string builder.</param>
            <param name="formatProvider">The format provider.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.Clear">
            <summary>
            Removes all content of this writer
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.Close">
            <summary>
            Closes the current writer and releases any system resources associated with the writer.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.TextWriter"></see> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.GetStringBuilder">
            <summary>
            Returns the underlying SafeStringBuilder. This is either the SafeStringBuilder
            that was passed to the constructor, or the SafeStringBuilder that was
            automatically created.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.Write(System.Char)">
            <summary>
            Writes a character to the text stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"></see> is closed. </exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.Write(System.Char,System.Int32)">
            <summary>
            Writes characters to the text stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
            <param name="count">The count.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"></see> is closed. </exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the text stream.
            </summary>
            <param name="buffer">The character array to write data from.</param>
            <param name="index">Starting index in the buffer.</param>
            <param name="count">The number of characters to write.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index or count is negative. </exception>
            <exception cref="T:System.ArgumentException">The buffer length minus index is less than count. </exception>
            <exception cref="T:System.ArgumentNullException">The buffer parameter is null. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"></see> is closed. </exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.Write(System.String)">
            <summary>
            Writes a string to the text stream.
            </summary>
            <param name="value">The string to write.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"></see> is closed. </exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.Write(System.String,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"></see>.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">An object to write into the formatted string.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentNullException">format is null. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"></see> is closed. </exception>
            <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"></see>.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">An object to write into the formatted string.</param>
            <param name="arg1">An object to write into the formatted string.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentNullException">format is null. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"></see> is closed. </exception>
            <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"></see>.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">An object to write into the formatted string.</param>
            <param name="arg1">An object to write into the formatted string.</param>
            <param name="arg2">An object to write into the formatted string.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentNullException">format is null. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"></see> is closed. </exception>
            <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.Write(System.String,System.Object[])">
            <summary>
            Writes the specified format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.WriteLine(System.String,System.Object)">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"></see>.
            </summary>
            <param name="format">The formatted string.</param>
            <param name="arg0">The object to write into the formatted string.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentNullException">format is null. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"></see> is closed. </exception>
            <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"></see>.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">The object to write into the format string.</param>
            <param name="arg1">The object to write into the format string.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentNullException">format is null. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"></see> is closed. </exception>
            <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"></see>.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">The object to write into the format string.</param>
            <param name="arg1">The object to write into the format string.</param>
            <param name="arg2">The object to write into the format string.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentNullException">format is null. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"></see> is closed. </exception>
            <exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the line.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.Length">
            <summary>
            The number of characters in this string
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeStringWriter.Encoding">
            <summary>
            When overridden in a derived class, returns the <see cref="T:System.Text.Encoding"></see> in which the output is written.
            </summary>
            <value></value>
            <returns>The Encoding in which the output is written.</returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Appender`1">
            <summary>
            Delegate used to append values to a string builder
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.SafeString">
            <summary>
            Helper methods to make <see cref="M:System.Object.ToString"/> safe.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.IndexOf(System.String,System.Char)">
            <summary>
            Returns the last index of the occurence of 'c'. -1 if not found; uses ordinal string comparison.
            </summary>
            <param name="value"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.IndexOf(System.String,System.Char,System.Int32)">
            <summary>
            Returns the last index of the occurence of 'c'. -1 if not found; uses ordinal string comparison.
            </summary>
            <param name="value"></param>
            <param name="c"></param>
            <param name="start">start</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.IndexOf(System.String,System.String)">
            <summary>
            Returns the last index of the occurence of 'other'. -1 if not found; uses ordinal string comparison.
            </summary>
            <param name="value"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.IndexOf(System.String,System.String,System.Int32)">
            <summary>
            Returns the last index of the occurence of 'other'. -1 if not found; uses ordinal string comparison.
            </summary>
            <param name="value"></param>
            <param name="other"></param>
            <param name="start">start</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.LastIndexOf(System.String,System.Char)">
            <summary>
            Returns the last index of the occurence of 'c'. -1 if not found; uses ordinal string comparison.
            </summary>
            <param name="value"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.TrimAfter(System.String,System.Char)">
            <summary>
            Trims string after any occurence of <paramref name="c"/>.
            </summary>
            <param name="target">The target.</param>
            <param name="c">the character to look for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.TrimAfter(System.String,System.Char[])">
            <summary>
            Trims string after any first occurence of <paramref name="anyOf"/>.
            </summary>
            <param name="target">The target.</param>
            <param name="anyOf">Any of.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.TrimBefore(System.String,System.Char[])">
            <summary>
            Trims string before last occurence of <paramref name="anyOf"/>.
            </summary>
            <param name="target">The target.</param>
            <param name="anyOf">Any of.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.ToString(System.Object)">
            <summary>
            Turns a value into a safe, taking care of possible exceptions.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Format(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Formats a set a values, taking care of possible exception that are thrown as part of formatting the individual arguments.
            </summary>
            <param name="provider">The provider.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Format(System.String,System.Object[])">
            <summary>
            Formats the specified format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Format(System.String,System.Object)">
            <summary>
            Formats the specified format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The arg0.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Format(System.String,System.Object,System.Object)">
            <summary>
            Formats the specified format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The arg0.</param>
            <param name="arg1">The arg1.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Format(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Formats the specified format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The arg0.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether the given name is null or empty.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.IsNullOrWhiteSpace(System.String)">
            <summary>
            Checks whether a string is null or whitespaces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.FormatAsSentence(System.String)">
            <summary>
            Takes a capitalized word and turns it into a sequence of word:
            MyName -> my name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Join``1(System.String,``0[])">
            <summary>
            Joins the specified items using the default appender.
            </summary>
            <param name="separator">The separator.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Join``1(System.String,``0[],Microsoft.ExtendedReflection.Utilities.Safe.Appender{``0})">
            <summary>
            Joins the specified items using a custom
            appender.
            </summary>
            <param name="separator">The separator.</param>
            <param name="items">The items.</param>
            <param name="appender">The appender.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Join``1(System.String,Microsoft.ExtendedReflection.Collections.ICountable{``0})">
            <summary>
            Joins the specified items using the default appender.
            </summary>
            <param name="separator">The separator.</param>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Join``1(System.String,Microsoft.ExtendedReflection.Collections.ICountable{``0},Microsoft.ExtendedReflection.Utilities.Safe.Appender{``0})">
            <summary>
            Joins the specified items using a custom
            appender.
            </summary>
            <param name="separator">The separator.</param>
            <param name="items">The items.</param>
            <param name="appender">The appender.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Join``1(System.String,System.Collections.Generic.IEnumerable{``0},Microsoft.ExtendedReflection.Utilities.Safe.Appender{``0})">
            <summary>
            Joins the specified separator.
            </summary>
            <param name="separator">The separator.</param>
            <param name="items">The items.</param>
            <param name="appender">The appender.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Join(System.String,Microsoft.ExtendedReflection.Collections.ICountable{System.String})">
            <summary>
            Joins the specified separator.
            </summary>
            <param name="separator">The separator.</param>
            <param name="strings">The strings.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Split(System.String,System.Char[])">
            <summary>
            Returns a <see cref="T:System.String"></see> array containing the substrings in this instance that are delimited by elements of a specified <see cref="T:System.Char"></see> array.
            </summary>
            <param name="target">The target.</param>
            <param name="separator">An array of Unicode characters that delimit the substrings in this instance, an empty array containing no delimiters, or null.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Split(System.String,System.Char[],System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"></see> array containing the substrings in this instance that are delimited by elements of a specified <see cref="T:System.Char"></see> array. A parameter specifies the maximum number of substrings to return.
            </summary>
            <param name="target">The target.</param>
            <param name="separator">An array of Unicode characters that delimit the substrings in this instance, an empty array containing no delimiters, or null.</param>
            <param name="count">The maximum number of substrings to return.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Split(System.String,System.Char[],System.StringSplitOptions)">
            <summary>
            Returns a <see cref="T:System.String"></see> array containing the substrings in this string that are delimited by elements of a specified <see cref="T:System.Char"></see> array. A parameter specifies whether to return empty array elements.
            </summary>
            <param name="target">The target.</param>
            <param name="separator">An array of Unicode characters that delimit the substrings in this string, an empty array containing no delimiters, or null.</param>
            <param name="options">Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"></see> to omit empty array elements from the array returned, or <see cref="F:System.StringSplitOptions.None"></see> to include empty array elements in the array returned.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Split(System.String,System.String[],System.StringSplitOptions)">
            <summary>
            Returns a <see cref="T:System.String"></see> array containing the substrings in this string that are delimited by elements of a specified <see cref="T:System.String"></see> array. A parameter specifies whether to return empty array elements.
            </summary>
            <param name="target">The target.</param>
            <param name="separator">An array of strings that delimit the substrings in this string, an empty array containing no delimiters, or null.</param>
            <param name="options">Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"></see> to omit empty array elements from the array returned, or <see cref="F:System.StringSplitOptions.None"></see> to include empty array elements in the array returned.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Split(System.String,System.Char[],System.Int32,System.StringSplitOptions)">
            <summary>
            Returns a <see cref="T:System.String"></see> array containing the substrings in this string that are delimited by elements of a specified <see cref="T:System.Char"></see> array. Parameters specify the maximum number of substrings to return and whether to return empty array elements.
            </summary>
            <param name="target">The target.</param>
            <param name="separator">An array of Unicode characters that delimit the substrings in this string, an empty array containing no delimiters, or null.</param>
            <param name="count">The maximum number of substrings to return.</param>
            <param name="options">Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"></see> to omit empty array elements from the array returned, or <see cref="F:System.StringSplitOptions.None"></see> to include empty array elements in the array returned.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Split(System.String,System.String[],System.Int32,System.StringSplitOptions)">
            <summary>
            Returns a <see cref="T:System.String"></see> array containing the substrings in this string that are delimited by elements of a specified <see cref="T:System.String"></see> array. Parameters specify the maximum number of substrings to return and whether to return empty array elements.
            </summary>
            <param name="target">The target.</param>
            <param name="separator">An array of strings that delimit the substrings in this string, an empty array containing no delimiters, or null.</param>
            <param name="count">The maximum number of substrings to return.</param>
            <param name="options">Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"></see> to omit empty array elements from the array returned, or <see cref="F:System.StringSplitOptions.None"></see> to include empty array elements in the array returned.</param>
            <returns>
            An array whose elements contain the substrings in this string that are delimited by one or more strings in separator. For more information, see the Remarks section.
            </returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.StartsWith(System.String,System.String)">
            <summary>
            Gets a value indicating if the string starts with the given prefix, using ordinal string comparison.
            </summary>
            <param name="target">The target.</param>
            <param name="prefix">The prefix.</param>
            <returns></returns>
            <remarks>
            case sensitive, does not involve encoding
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.EndsWith(System.String,System.String)">
            <summary>
            Gets a value indicating if the string ends with the given suffix, using ordinal string comparison.
            </summary>
            <param name="target">The target.</param>
            <param name="suffix">The suffix.</param>
            <returns></returns>
            <remarks>
            case sensitive, does not involve encoding
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.StartsWith(System.String,System.Char)">
            <summary>
            Gets a value indicating if the string starts with the given prefix, using ordinal string comparison.
            </summary>
            <param name="target">The target.</param>
            <param name="prefix">The prefix.</param>
            <returns></returns>
            <remarks>
            case sensitive, does not involve encoding
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.EndsWith(System.String,System.Char)">
            <summary>
            Gets a value indicating if the string ends with the given suffix, using ordinal string comparison.
            </summary>
            <param name="target">The target.</param>
            <param name="suffix">The suffix.</param>
            <returns></returns>
            <remarks>
            case sensitive, does not involve encoding
            </remarks>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.TrimAfterCount(System.String,System.Int32,System.String)">
            <summary>
            Trims the string after a number of character
            </summary>
            <param name="value">The value.</param>
            <param name="count">The count.</param>
            <param name="replacement">The replacement.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.FormatDateTimeUniversal(System.DateTime)">
            <summary>
            Formats the date time in the universal sortable format, which is associated with the 'u' format character. 
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.ExtractPrePostStrings(System.String,System.String,System.String@,System.String@)">
            <summary>
            Extracts the string before and after the token
            </summary>
            <param name="nameFormat">The name format.</param>
            <param name="token">The token.</param>
            <param name="startsWith">The starts with.</param>
            <param name="endsWith">The ends with.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.CompareOrdinal(System.String,System.String)">
            <summary>
            Compares two strings, character by character.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.ReplaceNullChars(System.String)">
            <summary>
            In a string, replaces null characters ('\0') with "\\0".
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.Contains(System.String,System.Char)">
            <summary>
            Gets a value indicating if 'c' is in the input string
            </summary>
            <param name="source"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.TrySplitInTwo(System.String,System.Char,System.String@,System.String@)">
            <summary>
            Tries to split a string at the first occurence of the separator
            </summary>
            <param name="source"></param>
            <param name="separator"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.SafeString.TrimEndOnce(System.String,System.String)">
            <summary>
            Trims the last occurence if any
            </summary>
            <param name="value"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter">
            <summary>
            A safe and simplified version of XmlWriter
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.#ctor(System.IO.TextWriter,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
            <param name="indent">if set to <c>true</c> [indent].</param>
            <param name="appendNewLines"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.Create(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <param name="indent">if set to <c>true</c> [indent].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.Create(System.String,System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
            Creates the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <param name="indent">if set to <c>true</c> [indent].</param>
            <param name="appendNewLines"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.Create(System.IO.TextWriter,System.Boolean)">
            <summary>
            Creates the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="indent">if set to <c>true</c> [indent].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.Create(System.IO.TextWriter,System.Boolean,System.Boolean)">
            <summary>
            Creates the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="indent">if set to <c>true</c> [indent].</param>
            <param name="appendNewLines"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteStartDocument">
            <summary>
            Writes the start document.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteStartDocument(System.Boolean)">
            <summary>
            Writes the start document.
            </summary>
            <param name="standalone">if set to <c>true</c> [standalone].</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteProcessingInstruction(System.String,System.String,System.String)">
            <summary>
            Writes the processing instruction.
            </summary>
            <remarks>
            Writes processing instruction such as
            <code>
            &lt;?xml-stylesheet type="text/xsl" href="xxx.xsl"?&gt;
            </code>
            </remarks>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="href">The href.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteEndDocument">
            <summary>
            Writes the end document.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteStartElement(System.String)">
            <summary>
            Writes the start element.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteEndElement">
            <summary>
            Writes the end element.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteAttributeString(System.String,System.String)">
            <summary>
            Writes the attribute string.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value. If null, the attribute is not written</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteElementAttributeGuid(System.String,System.String,System.Guid)">
            <summary>
            Writes the element attribute GUID.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="guid">The GUID.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteAttributeBool(System.String,System.Boolean)">
            <summary>
            Writes the boolean attribute (does not write anything if false)
            </summary>
            <param name="name">The name.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteAttributeGuid(System.String,System.Guid)">
            <summary>
            Writes the attribute value
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteAttributeInt(System.String,System.Int32)">
            <summary>
            Writes the attribute value
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteAttributeLong(System.String,System.Int64)">
            <summary>
            Writes the attribute value
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteAttributeByte(System.String,System.Byte)">
            <summary>
            Writes the attribute value
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteAttributeFloat(System.String,System.Single)">
            <summary>
            Writes the attribute value
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteAttributeDouble(System.String,System.Double)">
            <summary>
            Writes the attribute value
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteAttributeEnum``1(System.String,System.Int32)">
            <summary>
            Writes the attribute value
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteElementString(System.String,System.String)">
            <summary>
            Writes the element string.
            </summary>
            <param name="name">The name.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteElementAttributeString(System.String,System.String,System.String)">
            <summary>
            Writes an element with a single attribute in it
            </summary>
            <param name="name"></param>
            <param name="attributeName"></param>
            <param name="content"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteComment(System.String)">
            <summary>
            Writes the comment.
            </summary>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteElementCData(System.String,System.String)">
            <summary>
            Writes the element C data.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteString(System.String)">
            <summary>
            Writes the string.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteWhitespace(System.String)">
            <summary>
            Writes a white space
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteCData(System.String)">
            <summary>
            Writes the CDATA.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteRaw(System.String)">
            <summary>
            Writes the raw.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteAllEndElements">
            <summary>
            Closes the till root.
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            Write a processing instruction ( &lt;? ... ?&gt;)
            </summary>
            <param name="name"></param>
            <param name="text"></param>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            Writes a DOCTYPE section
            </summary>
            <param name="name"></param>
            <param name="pubid"></param>
            <param name="sysid"></param>
            <param name="subset"></param>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.Indent">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter"/> is indented.
            </summary>
            <value><c>true</c> if indent; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.AppendNewLines">
            <summary>
            Gets a value indicating whether new lines should be appended.
            </summary>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="P:Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter.NodeDepth">
            <summary>
            Gets the current node depth in the writer
            </summary>
        </member>
        <member name="T:Microsoft.ExtendedReflection.Utilities.StringHelper">
            <summary>
            A static helper class for operations on string
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.EnglishPlural(System.Int32,System.String)">
            <summary>
            Select the plural or singular form for a regular plural form.
            </summary>
            <param name="count"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.Plural(System.Int32,System.String,System.String)">
            <summary>
            Returns the plural or singular form.
            </summary>
            <param name="count">The count.</param>
            <param name="singular">The singular.</param>
            <param name="plural">The plural.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.LastLine(System.String)">
            <summary>
            Get the last line of the string
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.Ellipse(System.String,System.Int32,System.String)">
            <summary>
            Returns a string at most maxCount long. If maxCount is reached,
            ellipse is appended.
            </summary>
            <param name="value"></param>
            <param name="maxCount"></param>
            <param name="ellipse"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.ToHexString(System.Byte[])">
            <summary>
            Returns a hexadecimal representation of a byte array.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.ToHexString(System.Int32,System.Int32)">
            <summary>
            Returns a hexadecimal representation of an integer with at least the given length.
            </summary>
            <param name="value"></param>
            <param name="hexDigits">minimum length</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.Capitalize(System.String)">
            <summary>
            Capitalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.Camelize(System.String)">
            <summary>
            Camelizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.Abbreviate(System.String)">
            <summary>
            Extracts capitalized letters from string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.Squeeze(System.String,System.Int32)">
            <summary>
            Splits the string into multiple lines, where each is at most as long as the given width
            </summary>
            <param name="value"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.GetSpaces(System.Int32)">
            <summary>
            Get a string with a number of spaces.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.GetLineOffsets(System.String)">
            <summary>
            Computes the offsets of the lines.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.Split(System.String,System.Char)">
            <summary>
            Splits a string; much faster than string.Split.
            </summary>
            <param name="value"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.TryParseInt32(System.String,System.Int32@)">
            <summary>
            Tries to parse a (possibly signed) integer. Independent of current locale.
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.Int32ToString(System.Int32)">
            <summary>
            Turns an integer into a string; independent of current locale, and more efficient (may cache strings)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.Utilities.StringHelper.AppendQuotedIfSpaces(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.String)">
            <summary>
            Returns the quoted string if spaces in the string. '"' is escaped to ""
            </summary>
            <param name="sb"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationSlim">
            <summary>
            A pre-parsed, lightweight view of the xml documentation.
            Keeps a mapping from member identifier to location in the xml stream
            </summary>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationSlim.#ctor(Microsoft.ExtendedReflection.ComponentModel.IComponent,System.String)">
            <summary>
            Maps the xml documentation.
            </summary>
            <param name="host"></param>
            <param name="location">The xml file location.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationSlim.TryTransformMemberDocumentation(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference,System.String,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeXmlTransformBase,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Tries to transform a member documentation
            </summary>
            <param name="method"></param>
            <param name="elementName"></param>
            <param name="transform"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ExtendedReflection.XmlDocumentation.XmlDocumentationSlim.TryGetExceptionTypes(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference,Microsoft.ExtendedReflection.Collections.IIndexable{System.String}@)">
            <summary>
            Tries to query the exception types.
            </summary>
            <param name="method">The member.</param>
            <param name="exceptions">The exceptions.</param>
            <returns></returns>
        </member>
        <member name="T:__NonPublicReceiverAttribute">
            <summary>
            Methods marked by an attribute of this type use 'object' as the receiver type (or 'UIntPtr' for struct methods) to avoid visibility issues.
            </summary>
            <remarks>
            Usually, only calls to public implementation methods will be substituted.
            This implies that all parameters must be public. This attribute can be used as a workaround if only the receiver type is not public.
            Note that the unmanaged profiler does not care where this attribute is defined; it simply looks for an attribute 
            which has the name __NonPublicReceiverAttribute.
            </remarks>
        </member>
        <member name="T:__ProtectAttribute">
            <summary>
            Types marked by an attribute of this type will be
            protected, i.e. a protection context will be set around the method body.
            </summary>
            <remarks>
            Note that the unmanaged profiler does not care where this attribute is defined; it simply looks for an attribute 
            which has the name __ProtectAttribute.
            </remarks>
        </member>
        <member name="T:__Auxiliary.Array">
            <summary>
            Class containing auxiliary methods, 
            which should only be called from instrumented code,
            and which always get substituted.
            </summary>
            <remarks>
            These methods allow the instrumented summarizers to directly communicate with the shadow interpreter.
            </remarks>
        </member>
        <member name="M:__Auxiliary.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
            (In the shadow world) copies all elements of one array into another.
            As efficient as setting a single field.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">Index of the source.</param>
            <param name="targetArray">The target array.</param>
            <param name="targetIndex">Index of the target.</param>
            <param name="count">The count.</param>
            <remarks>
            Does not do argument validation; always succeeds.
            </remarks>
        </member>
        <member name="M:__Auxiliary.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            (In the shadow world) copies all elements of one array into another.
            As efficient as setting a single field.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">Index of the source.</param>
            <param name="targetArray">The target array.</param>
            <param name="targetIndex">Index of the target.</param>
            <param name="count">The count.</param>
            <remarks>
            Does not do argument validation; always succeeds.
            </remarks>
        </member>
        <member name="M:__Auxiliary.Array.GetValue(System.Array,System.Int32)">
            <summary>
            Reads an element of an sz-array, and boxes it if necessary.
            </summary>
            <remarks>
            Does not do argument validation; always succeeds.
            </remarks>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Array.SetValue(System.Array,System.Object,System.Int32)">
            <summary>
            Stores an element in an sz-array, unboxes if necessary.
            </summary>
            <remarks>
            Does not do argument validation; always succeeds.
            </remarks>
            <param name="array"></param>
            <param name="value"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:__Auxiliary.Buffer">
            <summary>
            Class containing auxiliary methods, 
            which should only be called from instrumented code,
            and which always get substituted.
            </summary>
            <remarks>
            These methods allow the instrumented summarizers to directly communicate with the shadow interpreter.
            </remarks>
        </member>
        <member name="M:__Auxiliary.Buffer.TryFastMemCopy(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            (In the shadow world) tries to copy all elements of one array into another.
            Only succeds of source and dest pointers are type compatible.
            </summary>
            <param name="source">The source.</param>
            <param name="dest">The dest.</param>
            <param name="count">The count.</param>
            <returns></returns>
            <remarks>
            Does not do much argument validation.
            </remarks>
        </member>
        <member name="M:__Auxiliary.Buffer.InternalMemCopy(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Actually performs a mem copy; not instrumented.
            </summary>
            <param name="src">The source.</param>
            <param name="dest">The dest.</param>
            <param name="len">The len.</param>
        </member>
        <member name="T:__Auxiliary.ConcreteSymbolic`1">
            <summary>
            a term paired with a concrete representative
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="F:__Auxiliary.ConcreteSymbolic`1.Term">
            <summary>
            Abstract representation of data
            </summary>
        </member>
        <member name="F:__Auxiliary.ConcreteSymbolic`1.ConcreteValue">
            <summary>
            Concrete instance of data
            </summary>
        </member>
        <member name="M:__Auxiliary.ConcreteSymbolic`1.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Interpretation.Term,`0)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="termManager"></param>
            <param name="term"></param>
            <param name="concreteValue"></param>
        </member>
        <member name="T:__Auxiliary.ConcreteSymbolicProcessor`1">
            <summary>
            a term paired with a concrete representative
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="T:__Auxiliary.IConcreteSymbolicProcessor`1">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:__Auxiliary.IConcreteSymbolicProcessor`1.Wrap(Microsoft.ExtendedReflection.Interpretation.TermManager,`0,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Wraps concrete data and abstract data.
            </summary>
            <param name="termManager"></param>
            <param name="concreteData"></param>
            <param name="abstractData"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.IConcreteSymbolicProcessor`1.UnWrap(Microsoft.ExtendedReflection.Interpretation.TermManager,System.Object,`0@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Wraps concrete data and abstract data.
            </summary>
            <param name="termManager"></param>
            <param name="wrappedData"></param>
            <param name="concreteData"></param>
            <param name="abstractData"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.ConcreteSymbolicProcessor`1.Wrap(Microsoft.ExtendedReflection.Interpretation.TermManager,`0,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Creates a value representing the pair of a concrete instance of an term
            </summary>
            <param name="termManager"></param>
            <param name="concreteData"></param>
            <param name="abstractData"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.ConcreteSymbolicProcessor`1.UnWrap(Microsoft.ExtendedReflection.Interpretation.TermManager,System.Object,`0@,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Unwraps a wrap values that represents a pair of a concrete and term
            </summary>
            <param name="termManager"></param>
            <param name="wrappedData"></param>
            <param name="concreteData"></param>
            <param name="abstractData"></param>
        </member>
        <member name="T:__Auxiliary.Decimal">
            <summary>
            Class containing auxiliary methods, 
            which should only be called from instrumented code,
            and which always get treated as arithmetic functions.
            </summary>
            <remarks>
            These methods allow the instrumented summarizers to directly communicate with the shadow interpreter.
            </remarks>
        </member>
        <member name="T:__Auxiliary.Object">
            <summary>
            Class containing auxiliary methods, 
            which should only be called from instrumented code,
            and which always get substituted.
            </summary>
            <remarks>
            These methods allow the instrumented summarizers to directly communicate with the shadow interpreter.
            </remarks>
        </member>
        <member name="M:__Auxiliary.Object.MemberwiseClone(System.Object)">
            <summary>
            Creates a structural clone of the given object
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:__Auxiliary.Reflection">
            <summary>
            Class containing auxiliary methods, 
            which should only be called from instrumented code;
            most get substituted.
            </summary>
            <remarks>
            These methods allow the instrumented summarizers to directly communicate with the shadow interpreter.
            </remarks>
        </member>
        <member name="M:__Auxiliary.Reflection.SetFieldValue(System.Reflection.FieldInfo,System.Object,System.Object)">
            <summary>
            Sets a field value; unboxes when necessary.
            </summary>
            <remarks>
            Does not do argument validation; always succeeds.
            </remarks>
            <param name="fieldInfo"></param>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:__Auxiliary.Reflection.SetFieldValue``1(System.Object,System.String,``0)">
            <summary>
            Sets a field value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object">The @object.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <remarks>
            Does not do argument validation.
            </remarks>
        </member>
        <member name="M:__Auxiliary.Reflection.GetFieldValue(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Gets a field value; boxes when necessary.
            </summary>
            <remarks>
            Does not do argument validation; always succeeds.
            </remarks>
            <param name="fieldInfo"></param>
            <param name="obj"></param>
        </member>
        <member name="M:__Auxiliary.Reflection.IsAssignableFrom(System.IntPtr,System.IntPtr)">
            <summary>
            Whether one type is assignable from other.
            </summary>
            <remarks>
            Does not do argument validation; always succeeds.
            </remarks>
            <param name="targetType"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:__Auxiliary.Reflection.GetObjectType(System.Object)">
            <summary>
            Gets the type of an object; may be a __Box&lt;&gt; instance.
            </summary>
            <remarks>
            Does not do argument validation; always succeeds.
            </remarks>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Reflection.GetBoxValueType(System.IntPtr)">
            <summary>
            Assuming that the given type is a boxed type, returns the value type of the box.
            </summary>
            <remarks>
            Does not do argument validation; always succeeds.
            </remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Reflection.GetType(System.Type)">
            <summary>
            Gets the internal type identifier of a reflection type.
            </summary>
            <remarks>
            Does not do argument validation; always succeeds.
            </remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Reflection.GetParameterCount(System.Reflection.MethodBase)">
            <summary>
            Gets the number of parameters, without the optional implicit this-parameter.
            </summary>
            <remarks>
            Does not do argument validation.
            </remarks>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Reflection.GetParameterCount(System.Delegate)">
            <summary>
            Gets the number of parameters, without the optional implicit this-parameter.
            </summary>
            <param name="delegate">The @delegate.</param>
            <returns></returns>
            <remarks>
            Does not do argument validation.
            </remarks>
        </member>
        <member name="M:__Auxiliary.Reflection.GetParameterType(System.Reflection.MethodBase,System.Int32)">
            <summary>
            Gets the type of a parameter.
            </summary>
            <remarks>
            Does not do argument validation.
            </remarks>
            <param name="method"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Reflection.IsParameterByRef(System.Reflection.MethodBase,System.Int32)">
            <summary>
            Checks whether a parameter is passed by-ref.
            </summary>
            <remarks>
            Does not do argument validation.
            </remarks>
            <param name="method"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Reflection.IsParameterOut(System.Reflection.MethodBase,System.Int32)">
            <summary>
            Checks whether a parameter is passed out only.
            </summary>
            <remarks>
            Does not do argument validation.
            </remarks>
            <param name="method"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Reflection.IsNull(System.Object)">
            <summary>
            Checks whether a reference is null.
            </summary>
            <remarks>
            Does not do argument validation.
            </remarks>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Reflection.CreateOutParameterValue(System.Reflection.MethodBase,System.Int32)">
            <summary>
            Checks whether a reference is null.
            </summary>
            <remarks>
            Does not do argument validation.
            </remarks>
            <param name="method"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Reflection.SetNextReflectionCallArgument(System.Object)">
            <summary>
            Sets next reflection call argument.
            </summary>
            <param name="argument"></param>
        </member>
        <member name="M:__Auxiliary.Reflection.SetNextByRefReflectionCallArgument(System.Object[],System.Int32)">
            <summary>
            Sets next reflection call argument.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:__Auxiliary.Reflection.GetResult">
            <summary>
            Auxiliary method to realize Reflection Invoke
            </summary>
            <returns></returns>
        </member>
        <member name="T:__Auxiliary.String">
            <summary>
            There are "method interpreter"s that effectively replace the methods in here;
            they introduce specialized uninterpreted functions to represent the result of these functions,
            under the assumptions that all arguments have been checked for exceptional cases.
            </summary>
        </member>
        <member name="T:__Auxiliary.StringBuilder">
            <summary>
            Class containing auxiliary methods, 
            which should only be called from instrumented code,
            and which always get substituted.
            </summary>
            <remarks>
            These methods allow the instrumented summarizers to directly communicate with the shadow interpreter.
            </remarks>
        </member>
        <member name="M:__Auxiliary.StringBuilder.AppendChar(System.Text.StringBuilder,System.Char)">
            <summary>
            Pretends to append a character to a string builder
            </summary>
            <param name="stringBuilder"></param>
            <param name="c"></param>
        </member>
        <member name="M:__Auxiliary.StringBuilder.InsertChar(System.Text.StringBuilder,System.Int32,System.Char)">
            <summary>
            Pretends to insert a character to a string builder
            </summary>
            <param name="stringBuilder"></param>
            <param name="index"></param>
            <param name="c"></param>
        </member>
        <member name="M:__Auxiliary.StringBuilder.get_Chars(System.Text.StringBuilder,System.Int32)">
            <summary>
            Pretends to retreive a character from a string builder
            </summary>
            <param name="stringBuilder"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.StringBuilder.set_Chars(System.Text.StringBuilder,System.Int32,System.Char)">
            <summary>
            Pretends to set a character in a string builder
            </summary>
            <param name="stringBuilder"></param>
            <param name="index"></param>
            <param name="c"></param>
        </member>
        <member name="M:__Auxiliary.StringBuilder.Remove(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Pretends to remove a range of characters from a string builder
            </summary>
            <param name="stringBuilder"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
        </member>
        <member name="T:__Auxiliary.Symbolic">
            <summary>
            Class containing auxiliary methods, 
            which should only be called from instrumented code,
            most get substituted.
            </summary>
            <remarks>
            These methods allow the instrumented summarizers to directly communicate with the shadow interpreter.
            </remarks>
        </member>
        <member name="M:__Auxiliary.Symbolic.DropConstraints``1(``0)">
            <summary>
            Forgets all constraints associated with passed value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.Derive``1(``0,System.Double)">
            <summary>
            Computes the derivative of formula with respect to variable
            </summary>
            <typeparam name="TFormula"></typeparam>
            <param name="formula"></param>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.ToString``1(``0)">
            <summary>
            Returns a symbolic representation of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.IsSymbolic``1(``0)">
            <summary>
            Checks whether the given value has any symbolic information attached to it.
            In other words, it checks whether the value was derived from the test inputs.
            Note that this check only applies to the given value itself,
            and not to its fields if it is an object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.ToRawString``1(``0)">
            <summary>
            Returns a symbolic representation of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.GetRelevantInputNames``1(``0)">
            <summary>
            Gets a textual representation of inputs directly or indirect affecting the given value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.IsTypedPointer(System.Type,System.Void*)">
            <summary>
            Determines whether a pointer is typed.
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The pointer.</param>
        </member>
        <member name="M:__Auxiliary.Symbolic.IsAllocated(System.Void*)">
            <summary>
            Determines whether a pointer is allocated.
            </summary>
            <param name="ptr">The pointer.</param>
            <returns>
            </returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.TypedMalloc(System.Type,System.Void*)">
            <summary>
            Overrides the symbolic representation of a newly allocated pointer.
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The pointer.</param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.TypedFree(System.Type,System.Void*)">
            <summary>
            Overrides the symbolic representation of a freed pointer.
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The pointer.</param>
        </member>
        <member name="M:__Auxiliary.Symbolic.Snapshot">
            <summary>
            Create a snapshot of the state for evaluating old expressions.
            </summary>
        </member>
        <member name="M:__Auxiliary.Symbolic.EvaluateInSnapshot``1(System.Object,System.Delegate)">
            <summary>
            Evaluates an expression in a state snapshot
            </summary>
            <typeparam name="T"></typeparam>
            <param name="snapshot">The snapshot.</param>
            <param name="expr">The expr.</param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.EvaluateInSnapshot``2(System.Object,System.Delegate,``1)">
            <summary>
            Evaluates an expression in a state snapshot
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="snapshot">The snapshot.</param>
            <param name="expr">The expr.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.EvaluateInSnapshot``3(System.Object,System.Delegate,``1,``2)">
            <summary>
            Evaluates an expression in a state snapshot
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U1">The type of the type parameter 1.</typeparam>
            <typeparam name="U2">The type of the type parameter 2.</typeparam>
            <param name="snapshot">The snapshot.</param>
            <param name="expr">The expr.</param>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.EvaluateInSnapshot``4(System.Object,System.Delegate,``1,``2,``3)">
            <summary>
            Evaluates an expression in a state snapshot
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U1">The type of the type parameter 1.</typeparam>
            <typeparam name="U2">The type of the type parameter 2.</typeparam>
            <typeparam name="U3">The type of the type parameter 3.</typeparam>
            <param name="snapshot">The snapshot.</param>
            <param name="expr">The expr.</param>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.GetPathConditionString">
            <summary>
            Gets a textual representation of the path condition at this point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.GetRawPathConditionString">
            <summary>
            Gets a textual representation of the path condition at this point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.Minimize``1(``0)">
            <summary>
            Requests to minimize the particular value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:__Auxiliary.Symbolic.DropEnumeration``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Forgets all constraints associated with the enumeration
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.IsInArray``1(``0,``0[])">
            <summary>
            Determines whether the specified value is in the array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="array">The array.</param>
        </member>
        <member name="M:__Auxiliary.Symbolic.WrapConcreteSymbolic``1(__Auxiliary.IConcreteSymbolicProcessor{``0},``0)">
            <summary>
            Passes the given data in its concrete and its symbolic representation to a processor.
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="data"></param>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="M:__Auxiliary.Symbolic.UnwrapConcreteSymbolic``1(__Auxiliary.IConcreteSymbolicProcessor{``0},System.Object)">
            <summary>
            Obtains data in its concrete and its symbolic representation from a processor.
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="processor"></param>
            <param name="concreteSymbolic"></param>
            <returns></returns>
        </member>
        <member name="T:__InstrumentedSummarizers.InstrumentedSummarizerMethodAttribute">
            <summary>
            This attribute must be attached to all instrumented summarizer methods.
            </summary>
        </member>
        <member name="F:__InstrumentedSummarizers.InstrumentedSummarizerMethodAttribute.IsStatic">
            <summary>
            Whether the summarized method is static.
            </summary>
        </member>
        <member name="F:__InstrumentedSummarizers.InstrumentedSummarizerMethodAttribute.IsNonPublic">
            <summary>
            Whether the summarized method is non-public.
            </summary>
        </member>
        <member name="F:__InstrumentedSummarizers.InstrumentedSummarizerMethodAttribute.IgnoreMissing">
            <summary>
            Whether missing method should be non-public
            </summary>
        </member>
        <member name="T:__InstrumentedSummarizers.InstrumentedSummarizerTypeAttribute">
            <summary>
            This attribute must be attached to all types containing instrumented summarizer methods.
            </summary>
        </member>
        <member name="F:__InstrumentedSummarizers.InstrumentedSummarizerTypeAttribute.IgnoreMissingOverloads">
            <summary>
            A comma-separated list of method names for which missing overloads of summarizer methods may be ignored;
            only set if you know what you are doing!
            </summary>
        </member>
        <member name="M:__RegexHelper.Uninstrumented.ConvertNodeMulti(Microsoft.ExtendedReflection.Utilities.RegexParser.RegexNode,System.Boolean,System.Boolean)">
            <summary>
            Sequence of characters in node._str
            </summary>
        </member>
        <member name="M:__RegexHelper.Uninstrumented.ConvertNodeNotone(Microsoft.ExtendedReflection.Utilities.RegexParser.RegexNode,System.Boolean,System.Boolean)">
            <summary>
            Matches chacter any character except node._ch
            </summary>
        </member>
        <member name="M:__RegexHelper.Uninstrumented.ConvertNodeOne(Microsoft.ExtendedReflection.Utilities.RegexParser.RegexNode,System.Boolean,System.Boolean)">
            <summary>
            Matches only node._ch
            </summary>
        </member>
        <member name="T:__Substitutions.System.Text.RegularExpressions.Regex">
            <summary>
            Regex substitutions
            </summary>
        </member>
        <member name="M:__Substitutions.__Auxiliary.Array.GetValue(System.Array,System.Int32)">
            <summary>
            Gets the value.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="T:__DoNotInstrumentAttribute">
            <summary>
            Types  marked by an attribute of this type will not be
            instrumented.
            </summary>
            <remarks>
            Note that the unmanaged profiler does not care where this attribute is defined; it simply looks for an attribute 
            which has the name __DoNotInstrumentAttribute.
            </remarks>
        </member>
        <member name="T:__InstrumentAttribute">
            <summary>
            Types marked by an attribute of this type or assembly will be instrumented.
            </summary>
            <remarks>
            Note that the unmanaged profiler does not care where this attribute is defined; it simply looks for an attribute 
            which has the name __InstrumentAttribute.
            </remarks>
        </member>
        <member name="T:__NonPublicAttribute">
            <summary>
            Methods marked by an attribute of this type will be used for substitutions even if the implementation method is not public.
            </summary>
            <remarks>
            Usually, only calls to public implementation methods will be substituted.
            Note that the unmanaged profiler does not care where this attribute is defined; it simply looks for an attribute 
            which has the name __NonPublicAttribute.
            </remarks>
        </member>
        <member name="M:__Substitutions.__Auxiliary.Symbolic.WrapConcreteSymbolic``1(__Auxiliary.IConcreteSymbolicProcessor{``0},``0)">
            <summary>
            Passes the given data in its concrete and its symbolic representation to a processor.
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="data"></param>
            <param name="wrapper"></param>
            <returns></returns>
        </member>
        <member name="M:__Substitutions.__Auxiliary.Symbolic.UnwrapConcreteSymbolic``1(__Auxiliary.IConcreteSymbolicProcessor{``0},System.Object)">
            <summary>
            Unwraps the given data into its concrete and its symbolic representation by a processor.
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="data"></param>
            <param name="wrapper"></param>
            <returns></returns>
        </member>
        <member name="M:__Substitutions.__Auxiliary.Symbolic.IsTypedPointer(System.Type,System.Void*)">
            <summary>
            Determines whether a pointer is typed.
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The pointer.</param>
        </member>
        <member name="M:__Substitutions.__Auxiliary.Symbolic.IsAllocated(System.Void*)">
            <summary>
            Determines whether a pointer is allocated.
            </summary>
            <param name="ptr">The pointer.</param>
            <returns>
            </returns>
        </member>
        <member name="M:__Substitutions.__Auxiliary.Symbolic.TypedMalloc(System.Type,System.Void*)">
            <summary>
            Overrides the symbolic representation of a newly allocated pointer.
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The pointer.</param>
            <returns></returns>
        </member>
        <member name="M:__Substitutions.__Auxiliary.Symbolic.TypedFree(System.Type,System.Void*)">
            <summary>
            Overrides the symbolic representation of a freed pointer.
            </summary>
            <param name="type">The type.</param>
            <param name="ptr">The pointer.</param>
        </member>
        <member name="M:__Substitutions.__Auxiliary.Symbolic.Snapshot">
            <summary>
            Create a snapshot of the state for evaluating old expressions.
            </summary>
        </member>
        <member name="M:__Substitutions.__Auxiliary.Symbolic.EvaluateInSnapshot``1(System.Object,System.Delegate)">
            <summary>
            Evaluates an expression in a state snapshot
            </summary>
            <typeparam name="T"></typeparam>
            <param name="snapshot">The snapshot.</param>
            <param name="expr">The expr.</param>
            <returns></returns>
        </member>
        <member name="M:__Substitutions.__Auxiliary.Symbolic.EvaluateInSnapshot``2(System.Object,System.Delegate,``1)">
            <summary>
            Evaluates an expression in a state snapshot
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="snapshot">The snapshot.</param>
            <param name="expr">The expr.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:__Substitutions.__Auxiliary.Symbolic.EvaluateInSnapshot``3(System.Object,System.Delegate,``1,``2)">
            <summary>
            Evaluates an expression in a state snapshot
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="U2"></typeparam>
            <param name="snapshot">The snapshot.</param>
            <param name="expr">The expr.</param>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:__Substitutions.__Auxiliary.Symbolic.EvaluateInSnapshot``4(System.Object,System.Delegate,``1,``2,``3)">
            <summary>
            Evaluates an expression in a state snapshot
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U1"></typeparam>
            <typeparam name="U2"></typeparam>
            <typeparam name="U3"></typeparam>
            <param name="snapshot">The snapshot.</param>
            <param name="expr">The expr.</param>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <returns></returns>
        </member>
    </members>
</doc>
